{"ast":null,"code":"import { getAPI } from '../axios-api';\nexport default {\n  name: 'descriptorPage',\n\n  data() {\n    return {\n      novelrelease: [],\n      genres: [],\n      tags: [],\n      novelstatus: []\n    };\n  },\n\n  created() {\n    const url = '/descriptorbution';\n    getAPI.get(url).then(response => {\n      console.log('Post Novel has recieved data');\n      this.novelrelease = response.data['novelrelease'];\n      this.genres = response.data['genre'];\n      this.tags = response.data['tag'];\n      this.novelstatus = response.data['novelstatus'];\n      this.uploadstatus = response.data['uploadstatus'];\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n\n  mounted() {\n    setTimeout(() => {\n      var bars = document.getElementsByClassName('bar');\n\n      for (var i = 0; i < bars.length; i++) {\n        const text = bars[i].innerHTML;\n        const length = parseInt(text.substring(text.indexOf(\":\") + 1));\n        bars[i].style.width = 10 * length + 'px';\n        console.log(text.substring(text.indexOf(\":\") + 1));\n      }\n    }, 500);\n  }\n\n};","map":{"version":3,"mappings":"AAgBE,SAASA,MAAT,QAAuB,cAAvB;AACF,eAAc;EACVC,IAAI,EAAC,gBADK;;EAEVC,IAAI,GAAE;IACF,OAAO;MACHC,YAAY,EAAC,EADV;MAEHC,MAAM,EAAC,EAFJ;MAGHC,IAAI,EAAC,EAHF;MAIHC,WAAW,EAAC;IAJT,CAAP;EAMH,CATS;;EAUNC,OAAO,GAAE;IACL,MAAMC,GAAE,GAAI,mBAAZ;IACAR,MAAM,CAACS,GAAP,CAAWD,GAAX,EACDE,IADC,CACIC,QAAO,IAAK;MAChBC,OAAO,CAACC,GAAR,CAAY,8BAAZ;MACA,KAAKV,YAAL,GAAoBQ,QAAQ,CAACT,IAAT,CAAc,cAAd,CAApB;MACA,KAAKE,MAAL,GAAcO,QAAQ,CAACT,IAAT,CAAc,OAAd,CAAd;MACA,KAAKG,IAAL,GAAYM,QAAQ,CAACT,IAAT,CAAc,KAAd,CAAZ;MACA,KAAKI,WAAL,GAAmBK,QAAQ,CAACT,IAAT,CAAc,aAAd,CAAnB;MACA,KAAKY,YAAL,GAAoBH,QAAQ,CAACT,IAAT,CAAc,cAAd,CAApB;IACD,CARC,EASDa,KATC,CASKC,GAAE,IAAK;MACZJ,OAAO,CAACC,GAAR,CAAYG,GAAZ;IACD,CAXC;EAYH,CAxBK;;EAyBNC,OAAO,GAAE;IACLC,UAAU,CAAC,MAAM;MACjB,IAAIC,IAAG,GAAIC,QAAQ,CAACC,sBAAT,CAAgC,KAAhC,CAAX;;MACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,IAAI,CAACI,MAAzB,EAAgCD,CAAC,EAAjC,EAAoC;QAChC,MAAME,IAAG,GAAIL,IAAI,CAACG,CAAD,CAAJ,CAAQG,SAArB;QACA,MAAMF,MAAK,GAAIG,QAAQ,CAACF,IAAI,CAACG,SAAL,CAAgBH,IAAI,CAACI,OAAL,CAAa,GAAb,IAAkB,CAAlC,CAAD,CAAvB;QACAT,IAAI,CAACG,CAAD,CAAJ,CAAQO,KAAR,CAAcC,KAAd,GAAuB,KAAGP,MAAJ,GAAY,IAAlC;QACAX,OAAO,CAACC,GAAR,CAAYW,IAAI,CAACG,SAAL,CAAgBH,IAAI,CAACI,OAAL,CAAa,GAAb,IAAkB,CAAlC,CAAZ;MACJ;IACE,CARQ,EAQN,GARM,CAAV;EASJ;;AAnCM,CAAd","names":["getAPI","name","data","novelrelease","genres","tags","novelstatus","created","url","get","then","response","console","log","uploadstatus","catch","err","mounted","setTimeout","bars","document","getElementsByClassName","i","length","text","innerHTML","parseInt","substring","indexOf","style","width"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Descriptor.vue"],"sourcesContent":["<template>\n<div>\n    <h3>Novel Release</h3>\n        <p v-for='p in novelrelease' v-html='p.descriptor+\":\"+p[\"count\"]' class = 'bar' :value='p.count'/>\n    <h3>Novel status</h3>\n        <p v-for='p in novelstatus' v-html='p.descriptor+\":\"+p[\"count\"]' class = 'bar' :value='p.count'/>\n     <h3>Upload status</h3>\n        <p v-for='p in uploadstatus' v-html='p.descriptor+\":\"+p[\"count\"]' class = 'bar' :value='p.count'/>\n    <h3>Genres</h3>\n        <p v-for='p in genres' v-html='p.descriptor+\":\"+p[\"count\"]' class = 'bar' :value='p.count'/>\n    <h3>Tags</h3>\n        <p v-for='p in tags' v-html='p.descriptor+\":\"+p[\"count\"]' class = 'bar' :value='p.count'/>\n</div>\n</template>\n\n<script>\n  import { getAPI } from '../axios-api'\nexport default{\n    name:'descriptorPage',\n    data(){\n        return {\n            novelrelease:[],\n            genres:[],\n            tags:[],\n            novelstatus:[],\n        }\n    },\n        created(){\n            const url = '/descriptorbution'\n            getAPI.get(url)\n          .then(response => {\n            console.log('Post Novel has recieved data')\n            this.novelrelease = response.data['novelrelease']\n            this.genres = response.data['genre']\n            this.tags = response.data['tag']\n            this.novelstatus = response.data['novelstatus']\n            this.uploadstatus = response.data['uploadstatus']\n          })\n          .catch(err => {\n            console.log(err)\n          })\n        },\n        mounted(){\n            setTimeout(() => {\n            var bars = document.getElementsByClassName('bar')\n            for (var i = 0; i < bars.length;i++){\n                const text = bars[i].innerHTML\n                const length = parseInt(text.substring((text.indexOf(\":\")+1)))\n                bars[i].style.width = (10*length)+'px'\n                console.log(text.substring((text.indexOf(\":\")+1)))\n            }\n             }, 500);\n        }\n}\n</script>\n\n<style scoped>\n.bar{\n    background-color:lightblue\n}\n</style>"]},"metadata":{},"sourceType":"module"}