{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport NovelCard from '../components/NovelCard';\nimport UtfBox from '../components/UtfBox';\nexport default {\n  name: 'Browser',\n  components: {\n    NovelCard,\n    UtfBox\n  },\n\n  data() {\n    return {\n      novelData: [],\n      chapterList: [],\n      attributesort: 'latest'\n    };\n  },\n\n  methods: {\n    /*\n    slugify(text) {\n    return text          \n        .normalize('NFKD')            \n        .replace(/[^a-zA-Z0-9 ]/g, \"\")//remove nonletter chars             \n        .trim()                                  \n        .replace(/\\s+/g, '-')//replace - with space \n    },*/\n    sort(a, b) {\n      switch (this.attributesort) {\n        case 'latest':\n          if (Date.parse(a.last_updated) < Date.parse(b.last_updated)) {\n            return 1;\n          }\n\n          if (Date.parse(a.last_updated) > Date.parse(b.last_updated)) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'alphabetical':\n          if (a.title < b.title) {\n            return -1;\n          }\n\n          if (a.title > b.title) {\n            return 1;\n          }\n\n          return 0;\n\n        case 'length':\n          if (a.firstChapter[0] < b.firstChapter[0]) {\n            return 1;\n          }\n\n          if (a.firstChapter[0] > b.firstChapter[0]) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'views':\n          if (a.views < b.views) {\n            return 1;\n          }\n\n          if (a.views > b.views) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'new':\n          if (a.first_release < b.first_release) {\n            return 1;\n          }\n\n          if (a.first_release > b.first_release) {\n            return -1;\n          }\n\n          return 0;\n      }\n    }\n\n  },\n\n  created() {\n    //document.title='Browse'\n    console.log(this.$route.params.identifier);\n    getAPI.get('/novel/multiple?tier=5&category=' + this.$route.params.browsetype + '&identifier=' + 'adapated to').then(response => {\n      console.log('Post API has recieved data');\n      this.novelData = response.data;\n      console.log(this.novelData[0]);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":"AA2BA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACI,eAAc;EACVC,IAAI,EAAE,SADI;EAEVC,UAAU,EAAC;IACPH,SADO;IAEPC;EAFO,CAFD;;EAMVG,IAAI,GAAE;IACF,OAAM;MACNC,SAAS,EAAC,EADJ;MAENC,WAAW,EAAC,EAFN;MAGNC,aAAa,EAAC;IAHR,CAAN;EAKH,CAZS;;EAaVC,OAAO,EAAC;IACJ;;;;;;;;IAQJC,IAAI,CAACC,CAAD,EAAGC,CAAH,EAAK;MACL,QAAQ,KAAKJ,aAAb;QACI,KAAK,QAAL;UACI,IAAGK,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,YAAb,IAA6BF,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,YAAb,CAAhC,EAA4D;YAAE,OAAO,CAAP;UAAU;;UACxE,IAAGF,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,YAAb,IAA6BF,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,YAAb,CAAhC,EAA4D;YAAE,OAAO,CAAC,CAAR;UAAW;;UACzE,OAAO,CAAP;;QACJ,KAAK,cAAL;UACI,IAAGJ,CAAC,CAACK,KAAF,GAAUJ,CAAC,CAACI,KAAf,EAAsB;YAAE,OAAO,CAAC,CAAR;UAAW;;UACnC,IAAGL,CAAC,CAACK,KAAF,GAAUJ,CAAC,CAACI,KAAf,EAAsB;YAAE,OAAO,CAAP;UAAU;;UAClC,OAAO,CAAP;;QACJ,KAAK,QAAL;UACI,IAAGL,CAAC,CAACM,YAAF,CAAe,CAAf,IAAoBL,CAAC,CAACK,YAAF,CAAe,CAAf,CAAvB,EAA0C;YAAE,OAAO,CAAP;UAAU;;UACtD,IAAGN,CAAC,CAACM,YAAF,CAAe,CAAf,IAAoBL,CAAC,CAACK,YAAF,CAAe,CAAf,CAAvB,EAA0C;YAAE,OAAO,CAAC,CAAR;UAAW;;UACvD,OAAO,CAAP;;QACJ,KAAK,OAAL;UACI,IAAGN,CAAC,CAACO,KAAF,GAAUN,CAAC,CAACM,KAAf,EAAsB;YAAE,OAAO,CAAP;UAAU;;UAClC,IAAGP,CAAC,CAACO,KAAF,GAAUN,CAAC,CAACM,KAAf,EAAsB;YAAE,OAAO,CAAC,CAAR;UAAW;;UACnC,OAAO,CAAP;;QACJ,KAAK,KAAL;UACI,IAAGP,CAAC,CAACQ,aAAF,GAAkBP,CAAC,CAACO,aAAvB,EAAsC;YAAE,OAAO,CAAP;UAAU;;UAClD,IAAGR,CAAC,CAACQ,aAAF,GAAkBP,CAAC,CAACO,aAAvB,EAAsC;YAAE,OAAO,CAAC,CAAR;UAAW;;UACnD,OAAO,CAAP;MApBR;IAwBJ;;EAlCQ,CAbE;;EAkDdC,OAAO,GAAE;IACL;IACAC,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAL,CAAYC,MAAZ,CAAmBC,UAA/B;IACDzB,MAAM,CAAC0B,GAAP,CAAW,qCAAmC,KAAKH,MAAL,CAAYC,MAAZ,CAAmBG,UAAtD,GAAiE,cAAjE,GAAgF,aAA3F,EACIC,IADJ,CACSC,QAAO,IAAK;MAChBR,OAAO,CAACC,GAAR,CAAY,4BAAZ;MACA,KAAKhB,SAAL,GAAeuB,QAAQ,CAACxB,IAAxB;MACAgB,OAAO,CAACC,GAAR,CAAY,KAAKhB,SAAL,CAAe,CAAf,CAAZ;IACD,CALJ,EAMIwB,KANJ,CAMUC,GAAE,IAAK;MACZV,OAAO,CAACC,GAAR,CAAYS,GAAZ;IACD,CARJ;EAUH;;AA/Dc,CAAd","names":["getAPI","NovelCard","UtfBox","name","components","data","novelData","chapterList","attributesort","methods","sort","a","b","Date","parse","last_updated","title","firstChapter","views","first_release","created","console","log","$route","params","identifier","get","browsetype","then","response","catch","err"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Browse.vue"],"sourcesContent":["<template>\n<div class = 'content' >\n    <br>\n    <p id = 'sortCategory' v-html='this.$route.params.identifier ? this.$route.params.identifier : \"All Novels\"'/>\n    <div id = 'top'>\n        <div id = 'count'>\n            <UtfBox shape = '&#9733;'/>\n            <p id = 'resultCount'>{{novelData.length}} RESULTS</p>\n            <label class = 'category'> Order By</label>\n        </div>\n        <div id = 'sortButtons'>\n            <button class = 'category' @click='attributesort=\"latest\"'>Latest</button>\n            <button class = 'category' @click='attributesort=\"alphabetical\"'>A-Z</button>\n            <button class = 'category' @click='attributesort=\"length\"'>Length</button>\n            <button class = 'category' @click='attributesort=\"views\"'>Most Views</button>\n            <button class = 'category' @click='attributesort=\"new\"'>New</button>\n        </div>\n    </div>\n    <div class = \"novelList\">\n        <div v-for='novel in novelData' :key = 'novel.title' id = 'novels'>\n            <NovelCard :novelData='novel'/>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nimport NovelCard from '../components/NovelCard'\nimport UtfBox from '../components/UtfBox'\n    export default{\n        name: 'Browser',\n        components:{\n            NovelCard,\n            UtfBox,\n        },\n        data(){\n            return{\n            novelData:[],\n            chapterList:[],\n            attributesort:'latest'\n            }\n        },\n        methods:{\n            /*\n            slugify(text) {\n            return text          \n                .normalize('NFKD')            \n                .replace(/[^a-zA-Z0-9 ]/g, \"\")//remove nonletter chars             \n                .trim()                                  \n                .replace(/\\s+/g, '-')//replace - with space \n        },*/\n        sort(a,b){\n            switch (this.attributesort){\n                case 'latest':\n                    if(Date.parse(a.last_updated) < Date.parse(b.last_updated)) { return 1; }\n                    if(Date.parse(a.last_updated) > Date.parse(b.last_updated)) { return -1; }\n                    return 0;\n                case 'alphabetical':\n                    if(a.title < b.title) { return -1; }\n                    if(a.title > b.title) { return 1; }\n                    return 0;\n                case 'length':\n                    if(a.firstChapter[0] < b.firstChapter[0]) { return 1; }\n                    if(a.firstChapter[0] > b.firstChapter[0]) { return -1; }\n                    return 0;\n                case 'views':\n                    if(a.views < b.views) { return 1; }\n                    if(a.views > b.views) { return -1; }\n                    return 0;\n                case 'new':\n                    if(a.first_release < b.first_release) { return 1; }\n                    if(a.first_release > b.first_release) { return -1; }\n                    return 0;\n\n            }\n\n        }\n        \n    },\n    created(){\n        //document.title='Browse'\n        console.log(this.$route.params.identifier)\n       getAPI.get('/novel/multiple?tier=5&category='+this.$route.params.browsetype+'&identifier='+'adapated to')\n          .then(response => {\n            console.log('Post API has recieved data')\n            this.novelData=response.data\n            console.log(this.novelData[0])\n          })\n          .catch(err => {\n            console.log(err)\n          })\n         \n    }\n    \n    }\n</script>\n\n<style scoped>\n#novels{\n    display:flex;\n    flex-direction:row;\n}\n#top{\n    display:flex;\n    flex-direction:row;\n    border-bottom:gray 2px solid;\n    margin-bottom:30px;\n    position:relative;\n    height:37px;\n}\n.novelList{\n   display: grid;\n   grid-template-columns: auto auto auto auto;\n   margin:auto;\n   height:fit-content;\n \n}\n#count{\n    width:275px;\n    display:flex;\n    flex-direction:row;\n   \n\n}\n#sortButtons{\n    width:400px;\n}\n.category{\n    background:none;\n    border:none;\n    color:gray;\n    position:relative;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    font-size:15px;\n    min-width:75px;\n}\nbutton.category:hover{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n}\n\n.category:focus{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n   outline: none;\n    }\n#sortCategory{\n    font-size:18px;\n    font-weight:bold;\n    margin-bottom:28px;\n    letter-spacing: 0.5px;\n}\n#resultCount{\n    margin-left:20px;\n    font-size:18px;\n    font-weight:600;\n    width:200px;\n}\n\n@media (max-width: 1200px){\n     .novelList{\n         grid-template-columns: auto auto auto;\n    }\n    #top{\n        flex-direction:column;\n        height: 79px;\n    }\n  }\n@media (max-width: 775px) {\n    .novelList{\n         grid-template-columns: auto;\n    }\n   \n}\n</style>\n"]},"metadata":{},"sourceType":"module"}