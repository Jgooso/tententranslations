{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-137d6444\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  id: \"Browse\"\n};\nconst _hoisted_2 = [\"innerHTML\"];\nconst _hoisted_3 = {\n  id: \"top\"\n};\nconst _hoisted_4 = {\n  id: \"count\"\n};\nconst _hoisted_5 = {\n  id: \"resultCount\"\n};\n\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"category\"\n}, \" Order By\", -1\n/* HOISTED */\n));\n\nconst _hoisted_7 = {\n  id: \"sortButtons\"\n};\nconst _hoisted_8 = {\n  id: \"pageNumber\"\n};\nconst _hoisted_9 = {\n  class: \"novelList\"\n};\nconst _hoisted_10 = {\n  id: \"pageNav\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UtfBox = _resolveComponent(\"UtfBox\");\n\n  const _component_NovelCard = _resolveComponent(\"NovelCard\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", {\n    id: \"sortCategory\",\n    innerHTML: this.$route.params.identifier ? this.$route.params.identifier : \"All Novels\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_2), _createElementVNode(\"header\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_UtfBox, {\n    shape: \"★\"\n  }), _createElementVNode(\"p\", _hoisted_5, _toDisplayString($data.novelCount) + \" RESULTS\", 1\n  /* TEXT */\n  ), _hoisted_6]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"input\", {\n    type: \"button\",\n    class: \"category selectable\",\n    style: {\n      \"border-left\": \"1px solid var(--borderColor)\"\n    },\n    onClick: _cache[0] || (_cache[0] = $event => $options.sort(\"lastupload\")),\n    value: \"Latest\",\n    id: \"sort-lastupload\"\n  }), _createElementVNode(\"input\", {\n    type: \"button\",\n    class: \"category selectable\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.sort(\"title\")),\n    value: \"A-Z\",\n    id: \"sort-title\"\n  }), _createElementVNode(\"input\", {\n    type: \"button\",\n    class: \"category selectable\",\n    onClick: _cache[2] || (_cache[2] = $event => $options.sort(\"length\")),\n    value: \"Length\",\n    id: \"sort-length\"\n  }), _createElementVNode(\"input\", {\n    type: \"button\",\n    class: \"category selectable\",\n    onClick: _cache[3] || (_cache[3] = $event => $options.sort(\"views\")),\n    value: \"Trending\",\n    id: \"sort-views\"\n  }), _createElementVNode(\"input\", {\n    type: \"button\",\n    class: \"category selectable\",\n    onClick: _cache[4] || (_cache[4] = $event => $options.sort(\"firstupload\")),\n    value: \"New\",\n    id: \"sort-firstupload\"\n  }), _createElementVNode(\"h6\", _hoisted_8, \"Page \" + _toDisplayString($data.page) + \" of \" + _toDisplayString($data.pageCount), 1\n  /* TEXT */\n  )])]), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.novelData, novel => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: novel.title,\n      id: \"novels\"\n    }, [_createVNode(_component_NovelCard, {\n      novelData: novel,\n      type: \"browse\",\n      class: \"novelcard\"\n    }, null, 8\n    /* PROPS */\n    , [\"novelData\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"div\", _hoisted_10, [$data.page > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"navigationButton\",\n    id: \"prev\",\n    onClick: _cache[5] || (_cache[5] = $event => $options.changePage(-1))\n  }, \"←Previous Page\")) : _createCommentVNode(\"v-if\", true), $data.page < $data.pageCount ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    class: \"navigationButton\",\n    id: \"next\",\n    onClick: _cache[6] || (_cache[6] = $event => $options.changePage(1))\n  }, \"Next Page→\")) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"mappings":"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","names":["id","_createElementVNode","class","_createElementBlock","innerHTML","$route","params","identifier","_createVNode","_component_UtfBox","shape","_toDisplayString","$data","_hoisted_6","type","style","onClick","$options","value","_Fragment","_renderList","novel","key","title","_component_NovelCard","novelData"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Browse.vue"],"sourcesContent":["<template>\n<div id = 'Browse' >\n\n    <h1 id = 'sortCategory' v-html='this.$route.params.identifier ? this.$route.params.identifier : \"All Novels\"'/>\n\n    <header id = 'top'>\n        <div id = 'count'>\n            <UtfBox shape = '&#9733;'/>\n            <p id = 'resultCount'>{{novelCount}} RESULTS</p>\n            <label class = 'category'> Order By</label>\n        </div>\n\n        <div id = 'sortButtons'>\n            <input type='button' class = 'category selectable' style=\"border-left:1px solid var(--borderColor)\" @click='sort(\"lastupload\")' value = 'Latest' id = 'sort-lastupload'>\n            <input type ='button' class = 'category selectable' @click='sort(\"title\")' value = 'A-Z' id = 'sort-title'>\n            <input type ='button' class = 'category selectable' @click='sort(\"length\")' value = 'Length' id = 'sort-length'>\n            <input type ='button' class = 'category selectable' @click='sort(\"views\")' value = 'Trending' id = 'sort-views'>\n            <input type ='button' class = 'category selectable' @click='sort(\"firstupload\")' value = 'New' id = 'sort-firstupload'>\n            <h6 id = 'pageNumber'>Page {{page}} of {{(pageCount)}}</h6>\n        </div>\n        \n    </header>\n\n    <div class = \"novelList\">\n        <div v-for='novel in novelData' :key = 'novel.title' id = 'novels'>\n            <NovelCard \n                :novelData='novel'\n                type=\"browse\"\n                class = 'novelcard'\n                />\n        </div>\n    </div>\n    <div id = 'pageNav'>\n    <button v-if='page > 1' class = 'navigationButton'  id = 'prev' @click='changePage(-1)'>&#8592;Previous Page</button>\n    <button v-if='page < pageCount' class = 'navigationButton' id = 'next' @click='changePage(1)'>Next Page&#8594;</button>\n    </div>\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nimport NovelCard from '../components/NovelCard'\nimport UtfBox from '../components/UtfBox'\n    export default{\n        name: 'Browser',\n        components:{\n            NovelCard,\n            UtfBox,\n        },\n        data(){\n            return{\n            novelData:[],\n            chapterList:[],\n            attributesort:'lastupload',\n            page:1,\n            pageCount:0,\n            novelCount:0,\n            }\n        },\n        props:[\n            'tier'\n        ],\n        methods:{\n        getNovels(identifier){  \n            if(identifier != undefined){\n                identifier = identifier.replace(/&nbsp;/g,'|')\n            }\n        const url = '/novel/multiple?tier='+this.tier+'&identifier='+identifier+'&order='+this.attributesort+'&page='+this.page\n       getAPI.get(url)\n          .then(response => {\n            this.novelData=response.data\n            console.log(this.novelData[0])\n          })\n          .catch(err => {\n            console.log(err)\n          })\n        },\n        sort(p){\n            const selected = document.getElementsByClassName('selected')\n            this.attributesort = p\n            for(var i=0; i < selected.length; i++){\n                selected[i].classList.remove('selected')\n            }\n            document.getElementById('sort-'+p).classList.add('selected')\n            this.getNovels(this.$route.params.identifier)\n        },\n        changePage(change){\n            this.page = this.page + change\n            this.getNovels(this.$route.params.identifier)\n        },\n        getPages(identifier){\n            getAPI.get('/novels-page-count?tier='+this.tier+'&identifier='+identifier)\n                .then(response => {\n                    this.pageCount = response.data['page_count']\n                    this.novelCount = response.data['novel_count']\n                    this.getNovels(identifier)  \n                })\n                .catch(err => {\n                    console.log(err)\n                })\n        }\n        \n    },\n    created(){\n        var identifier = this.$route.params.identifier\n        this.getPages(identifier)\n        this.$watch(\n      () => this.$route.params,\n      (toParams, previousParams) => {\n        // react to route changes...\n            var identifier = this.$route.params.identifier\n            if(identifier != undefined){\n                identifier = identifier.replace(/&nbsp;/g,'|')\n            }\n            if(Object.keys(previousParams).includes('browsetype') && Object.keys(toParams).length == 0){\n                const selected = document.getElementsByClassName('selected')\n                this.getNovels(identifier)\n                this.getPages(identifier)\n                for(var i=0; i < selected.length; i++){\n                selected[i].classList.remove('selected')\n            }\n            }\n      }\n    )     \n    \n    }\n    \n    }\n</script>\n\n<style scoped>\n#Browse{\n    width:100%;\n}\n#novels{\n    display:flex;\n    flex-direction:row;\n}\n#top{\n    display:flex;\n    flex-direction:row;\n    border-bottom:gray 2px solid;\n    margin-bottom:30px;\n    position:relative;\n    height:37px;\n    \n}\n.novelList{\n   display: grid;\n   grid-template-columns: auto auto auto auto;\n   margin:auto;\n   height:fit-content;\n    transition: all .3s ease;\n     /*box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) inset , 0 6px 20px 0 rgba(0, 0, 0, 0.19) inset;*/\n     padding:20px;\n     border-radius:20px;\n     padding-left:20px;\n     padding-right:0px;\n \n}\n#count{\n    width:275px;\n    display:flex;\n    flex-direction:row;\n}\n#sortButtons{\n    width:100%;\n    display:block;\n}\n#pageNumber{\n    position:relative;\n    vertical-align: middle;\n    margin-bottom:-3px;\n    padding:10px;\n    padding-bottom:10px;\n    padding-top:4px;\n    font-size:15px;\n    min-width:75px;\n    float:right;\n    margin-right:30px;\n    border-radius:10px;\n  \n}\n.category{\n    background:none;\n    border-bottom:none;\n    color:gray;\n    position:relative;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    font-size:15px;\n    min-width:75px;\n    \n}\n.selectable{\n    border:1px solid var(--borderColor);\n    border-top-left-radius:5px;\n    border-top-right-radius:5px;\n    border-left:0px;\n}\ninput[type='button'].category:hover{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n}\n\n#sortCategory{\n    font-size:18px;\n    font-weight:bold;\n    margin-bottom:28px;\n    letter-spacing: 0.5px;\n}\n#resultCount{\n    margin-left:20px;\n    font-size:18px;\n    font-weight:600;\n    width:200px;\n}\n.selected{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n    box-shadow: 0 4px 8px 0 var(--shadowColor), 0 6px 20px 0 var(--shadowColor);\n    transition: all .3s ease;\n    \n}\n.navigationButton{\n    border:1px solid var(--borderColor);\n    background:none;\n}\n#next{\n    width:150px;\n    margin-right:30px;\n    float:right;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) , 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    border-radius:10px;\n}\n#prev{\n    width:150px;\n    float:left;\n    margin-left:30px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) , 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    border-radius:10px;\n\n}\n#pageNav{\n    width:100%;\n    display:block;\n}\n@media (max-width: 1200px){\n     .novelList{\n         grid-template-columns: auto auto auto;\n    }\n    #top{\n        flex-direction:column;\n        height: 80px;\n        \n    }\n  }\n@media (max-width: 775px) {\n    .novelList{\n         grid-template-columns: auto;\n    }\n    .novelcard{\n        width:100%;\n    }\n   \n}\n@media (max-width: 700px) {\n    #top{\n        height: 111px;\n        \n    }\n    #next{\n    width:150px;\n    margin-right:0px;\n    float:right;\n}\n#prev{\n    width:150px;\n    float:left;\n    margin-left:0px;\n\n}\n   \n}\n</style>\n"]},"metadata":{},"sourceType":"module"}