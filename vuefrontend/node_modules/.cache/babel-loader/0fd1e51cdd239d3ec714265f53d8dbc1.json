{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-137d6444\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"content\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = {\n  id: \"sortCategory\"\n};\nconst _hoisted_4 = {\n  id: \"top\"\n};\nconst _hoisted_5 = {\n  id: \"count\"\n};\nconst _hoisted_6 = {\n  id: \"resultCount\"\n};\n\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"category\"\n}, \" Order By\", -1\n/* HOISTED */\n));\n\nconst _hoisted_8 = {\n  id: \"sortButtons\"\n};\nconst _hoisted_9 = {\n  class: \"novelList\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UtfBox = _resolveComponent(\"UtfBox\");\n\n  const _component_NovelCard = _resolveComponent(\"NovelCard\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"p\", _hoisted_3, _toDisplayString(this.$route.params.identifier ? this.$route.params.identifier : 'All Novels'), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_UtfBox, {\n    shape: \"â˜…\"\n  }), _createElementVNode(\"p\", _hoisted_6, _toDisplayString($data.novelData.filter($options.contains).length) + \" RESULTS\", 1\n  /* TEXT */\n  ), _hoisted_7]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    class: \"category\",\n    onClick: _cache[0] || (_cache[0] = $event => $data.attributesort = \"latest\")\n  }, \"Latest\"), _createElementVNode(\"button\", {\n    class: \"category\",\n    onClick: _cache[1] || (_cache[1] = $event => $data.attributesort = \"alphabetical\")\n  }, \"A-Z\"), _createElementVNode(\"button\", {\n    class: \"category\",\n    onClick: _cache[2] || (_cache[2] = $event => $data.attributesort = \"length\")\n  }, \"Length\"), _createElementVNode(\"button\", {\n    class: \"category\",\n    onClick: _cache[3] || (_cache[3] = $event => $data.attributesort = \"views\")\n  }, \"Most Views\"), _createElementVNode(\"button\", {\n    class: \"category\",\n    onClick: _cache[4] || (_cache[4] = $event => $data.attributesort = \"new\")\n  }, \"New\")])]), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.novelData.filter($options.contains).sort($options.sort), novel => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: novel.title,\n      id: \"novels\"\n    }, [_createVNode(_component_NovelCard, {\n      novelData: novel\n    }, null, 8\n    /* PROPS */\n    , [\"novelData\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]);\n}","map":{"version":3,"mappings":";;;;;EACKA,KAAK,EAAG;;;gEACTC,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;EACGC,EAAE,EAAG;;;EACHA,EAAE,EAAG;;;EACDA,EAAE,EAAG;;;EAEHA,EAAE,EAAG;;;gEACRD,oBAA2C,OAA3C,EAA2C;EAApCD,KAAK,EAAG;AAA4B,CAA3C,EAA0B,WAA1B,EAAmC;AAAA;AAAnC;;;EAECE,EAAE,EAAG;;;EAQTF,KAAK,EAAG;;;;;;;uBAjBjBG,oBAsBM,KAtBN,cAsBM,CArBFC,UAqBE,EApBFH,oBAA6G,GAA7G,cAA6GI,sBAA9EC,MAA8E,CAAvEC,MAAuE,CAAhEC,UAAgE,GAAtD,KAAQF,MAAR,CAAeC,MAAf,CAAsBC,UAAgC,GAAtB,YAAsB,CAA7G,EAAuF;EAAA;EAAvF,CAoBE,EAnBFP,oBAaM,KAbN,cAaM,CAZFA,oBAIM,KAJN,cAIM,CAHFQ,aAA2BC,iBAA3B,EAA2B;IAAnBC,KAAK,EAAG;EAAW,CAA3B,CAGE,EAFFV,oBAAuE,GAAvE,cAAuEI,iBAA/CO,gBAAUC,MAAV,CAAiBC,iBAAjB,EAA2BC,MAAoB,IAAZ,UAA3D,EAAmE;EAAA;EAAnE,CAEE,EADFC,UACE,CAJN,CAYE,EAPFf,oBAMM,KANN,cAMM,CALFA,oBAA0E,QAA1E,EAA0E;IAAlED,KAAK,EAAG,UAA0D;IAA9CiB,OAAK,sCAAEL,sBAAa,QAAf;EAAyC,CAA1E,EAA2D,QAA3D,CAKE,EAJFX,oBAA6E,QAA7E,EAA6E;IAArED,KAAK,EAAG,UAA6D;IAAjDiB,OAAK,sCAAEL,sBAAa,cAAf;EAA4C,CAA7E,EAAiE,KAAjE,CAIE,EAHFX,oBAA0E,QAA1E,EAA0E;IAAlED,KAAK,EAAG,UAA0D;IAA9CiB,OAAK,sCAAEL,sBAAa,QAAf;EAAyC,CAA1E,EAA2D,QAA3D,CAGE,EAFFX,oBAA6E,QAA7E,EAA6E;IAArED,KAAK,EAAG,UAA6D;IAAjDiB,OAAK,sCAAEL,sBAAa,OAAf;EAA4C,CAA7E,EAA0D,YAA1D,CAEE,EADFX,oBAAoE,QAApE,EAAoE;IAA5DD,KAAK,EAAG,UAAoD;IAAxCiB,OAAK,sCAAEL,sBAAa,KAAf;EAAmC,CAApE,EAAwD,KAAxD,CACE,CANN,CAOE,CAbN,CAmBE,EALFX,oBAIM,KAJN,cAIM,oBAHFE,oBAEMe,SAFN,EAEM,IAFN,EAEMC,YAFeP,gBAAUC,MAAV,CAAiBC,iBAAjB,EAA2BM,IAA3B,CAAgCN,aAAhC,CAEf,EAFMO,KAA6C,IAAxC;yBAAjBlB,oBAEM,KAFN,EAEM;MAFuDmB,GAAG,EAAID,KAAK,CAACE,KAEpE;MAF2ErB,EAAE,EAAG;IAEhF,CAFN,GACIO,aAA+Be,oBAA/B,EAA+B;MAAnBC,SAAS,EAAEJ;IAAQ,CAA/B,EAA4B,IAA5B,EAA4B;IAAA;IAA5B,EAA4B,aAA5B,EADJ;GAEM,CAFN;;EAAA,CAGE,EAJN,CAKE,CAtBN","names":["class","_createElementVNode","id","_createElementBlock","_hoisted_2","_toDisplayString","$route","params","identifier","_createVNode","_component_UtfBox","shape","$data","filter","$options","length","_hoisted_7","onClick","_Fragment","_renderList","sort","novel","key","title","_component_NovelCard","novelData"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Browse.vue"],"sourcesContent":["<template>\n<div class = 'content' >\n    <br>\n    <p id = 'sortCategory'>{{ this.$route.params.identifier ? this.$route.params.identifier : 'All Novels' }}</p>\n    <div id = 'top'>\n        <div id = 'count'>\n            <UtfBox shape = '&#9733;'/>\n            <p id = 'resultCount'>{{novelData.filter(contains).length}} RESULTS</p>\n            <label class = 'category'> Order By</label>\n        </div>\n        <div id = 'sortButtons'>\n            <button class = 'category' @click='attributesort=\"latest\"'>Latest</button>\n            <button class = 'category' @click='attributesort=\"alphabetical\"'>A-Z</button>\n            <button class = 'category' @click='attributesort=\"length\"'>Length</button>\n            <button class = 'category' @click='attributesort=\"views\"'>Most Views</button>\n            <button class = 'category' @click='attributesort=\"new\"'>New</button>\n        </div>\n    </div>\n    <div class = \"novelList\">\n        <div v-for='novel in novelData.filter(contains).sort(sort)' :key = 'novel.title' id = 'novels'>\n            <NovelCard :novelData='novel'/>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nimport NovelCard from '../components/NovelCard'\nimport UtfBox from '../components/UtfBox'\n    export default{\n        name: 'Browser',\n        components:{\n            NovelCard,\n            UtfBox,\n        },\n        data(){\n            return{\n            novelData:[],\n            chapterList:[],\n            attributesort:'latest'\n            }\n        },\n        methods:{\n            slugify(text) {\n            return text          \n                .normalize('NFKD')            \n                .replace(/[^a-zA-Z0-9 ]/g, \"\")//remove nonletter chars             \n                .trim()                                  \n                .replace(/\\s+/g, '-')//replace - with space \n            },\n            contains(novel){\n                if(!this.$route.params.browsetype){\n                    return true\n                }\n                const identifier = this.$route.params.identifier;\n                if(this.$route.params.browsetype.includes('author')){\n                    return novel.author==identifier;\n                }else if(this.$route.params.browsetype.includes('tag')){\n                    return novel.tags.includes(identifier);\n                }\n                else if(this.$route.params.browsetype.includes('genre')){\n                    return novel.genres.includes(identifier);\n            }else{\n                return true\n            }\n        },\n        sort(a,b){\n            switch (this.attributesort){\n                case 'latest':\n                    if(a.last_updated < b.last_updated) { return 1; }\n                    if(a.last_updated > b.last_updated) { return -1; }\n                    return 0;\n                case 'alphabetical':\n                    if(a.title < b.title) { return -1; }\n                    if(a.title > b.title) { return 1; }\n                    return 0;\n                case 'length':\n                    if(a.firstchapter.chapterNumber < b.firstchapter.chapterNumber) { return 1; }\n                    if(a.firstchapter.chapterNumber > b.firstchapter.chapterNumber) { return -1; }\n                    return 0;\n                case 'views':\n                    if(a.views < b.views) { return 1; }\n                    if(a.views > b.views) { return -1; }\n                    return 0;\n                case 'new':\n                    if(a.first_release < b.first_release) { return 1; }\n                    if(a.first_release > b.first_release) { return -1; }\n                    return 0;\n\n            }\n\n        }\n        \n    },\n    created(){\n        document.title='Browse'\n       getAPI.get('/novels/?tier=5')\n          .then(response => {\n            console.log('Post API has recieved data')\n        this.novelData=response.data['Novel']\n        this.chapterList=response.data['Chapter']\n        for (let i = 0; i < this.novelData.length; i++) { \n            var novel=this.novelData[i]\n            novel['firstchapter']=this.chapterList.filter(chapter => chapter.novel==novel.id)[1]\n            novel['secondchapter']=this.chapterList.filter(chapter => chapter.novel==novel.id)[0]\n        }\n        console.log(this.attributesort)\n          })\n          .catch(err => {\n            console.log(err)\n          })\n         \n    }\n    \n    }\n</script>\n\n<style scoped>\n#novels{\n    display:flex;\n    flex-direction:row;\n}\n#top{\n    display:flex;\n    flex-direction:row;\n    border-bottom:gray 2px solid;\n    margin-bottom:30px;\n    position:relative;\n    height:37px;\n}\n.novelList{\n   display: grid;\n   grid-template-columns: auto auto auto auto;\n   margin:auto;\n   height:fit-content;\n \n}\n#count{\n    width:275px;\n    display:flex;\n    flex-direction:row;\n   \n\n}\n#sortButtons{\n    width:400px;\n}\n.category{\n    background:none;\n    border:none;\n    color:gray;\n    position:relative;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    font-size:15px;\n    min-width:75px;\n}\nbutton.category:hover{\n    color:purple;\n    border-bottom:4px solid purple;\n}\n\n.category:focus{\n    color:purple;\n    border-bottom:4px solid purple;\n   outline: none;\n    }\n#sortCategory{\n    font-size:18px;\n    font-weight:bold;\n    margin-bottom:28px;\n    letter-spacing: 0.5px;\n}\n#resultCount{\n    margin-left:20px;\n    font-size:18px;\n    font-weight:600;\n    width:200px;\n}\n\n@media (max-width: 1200px){\n     .novelList{\n         grid-template-columns: auto auto auto;\n    }\n    #top{\n        flex-direction:column;\n        height: 79px;\n    }\n  }\n@media (max-width: 775px) {\n    .novelList{\n         grid-template-columns: auto;\n    }\n   \n}\n</style>\n"]},"metadata":{},"sourceType":"module"}