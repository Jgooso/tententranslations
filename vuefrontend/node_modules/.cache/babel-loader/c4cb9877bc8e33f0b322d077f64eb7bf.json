{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { getAPI } from '../axios-api';\nimport NovelCard from '../components/NovelCard';\nimport UtfBox from '../components/UtfBox';\nexport default {\n  name: 'Browser',\n  components: {\n    NovelCard,\n    UtfBox\n  },\n\n  data() {\n    return {\n      novelData: [],\n      chapterList: [],\n      attributesort: 'new',\n      page: 1,\n      pageCount: 0\n    };\n  },\n\n  props: ['tier'],\n  methods: {\n    sort(a, b) {\n      switch (this.attributesort) {\n        case 'Latest':\n          if (Date.parse(a.lastupload) < Date.parse(b.lastupload)) {\n            return 1;\n          }\n\n          if (Date.parse(a.lastupload) > Date.parse(b.lastupload)) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'alphabetical':\n          if (a.title < b.title) {\n            return -1;\n          }\n\n          if (a.title > b.title) {\n            return 1;\n          }\n\n          return 0;\n\n        case 'length':\n          if (a.firstChapter['chapternumber'] < b.firstChapter['chapternumber']) {\n            return 1;\n          }\n\n          if (a.firstChapter['chapternumber'] > b.firstChapter['chapternumber']) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'views':\n          const view_a = parseInt(a.views);\n          const view_b = parseInt(b.views);\n\n          if (view_a < view_b) {\n            return 1;\n          }\n\n          if (view_a > view_b) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'new':\n          if (Date.parse(a.firstupload) < Date.parse(b.firstupload)) {\n            return 1;\n          }\n\n          if (Date.parse(a.firstupload) > Date.parse(b.firstupload)) {\n            return -1;\n          }\n\n          return 0;\n      }\n    },\n\n    getNovels(order, page) {\n      var identifier = this.$route.params.identifier;\n      console.log(identifier);\n\n      if (identifier != undefined) {\n        identifier = identifier.replace(/&nbsp;/g, '|');\n      }\n\n      const url = '/novel/multiple?tier=' + this.tier + '&identifier=' + identifier + '&order=' + order + '&page=' + this.page;\n      getAPI.get(url).then(response => {\n        console.log('Post API has recieved data');\n        this.novelData = response.data;\n        console.log(this.novelData[0]);\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n\n    print(p) {\n      const selected = document.getElementsByClassName('selected');\n\n      for (var i = 0; i < selected.length; i++) {\n        selected[i].classList.remove('selected');\n      }\n\n      document.getElementById('sort-' + p).classList.add('selected');\n      console.log(p);\n      this.getNovels(p, this.page);\n    }\n\n  },\n\n  created() {\n    getAPI.get('/novels-page-count?tier=' + this.tier + '&identifier=' + this.$route.params.identifier).then(response => {\n      console.log('Post API has recieved data');\n      console.log(response.data);\n      this.pageCount = response.data;\n      this.getNovels('lastupload', 1);\n    }).catch(err => {\n      console.log(err);\n    });\n    this.$watch(() => this.$route.params, (toParams, previousParams) => {\n      // react to route changes...\n      if (Object.keys(previousParams).includes('browsetype') && Object.keys(toParams).length == 0) {\n        const selected = document.getElementsByClassName('selected');\n        this.getNovels('lastupload', 1);\n\n        for (var i = 0; i < selected.length; i++) {\n          selected[i].classList.remove('selected');\n        }\n      }\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","NovelCard","UtfBox","name","components","data","novelData","chapterList","attributesort","page","pageCount","props","methods","sort","a","b","Date","parse","lastupload","title","firstChapter","view_a","parseInt","views","view_b","firstupload","getNovels","order","identifier","$route","params","console","log","undefined","replace","url","tier","get","then","response","catch","err","print","p","selected","document","getElementsByClassName","i","length","classList","remove","getElementById","add","created","$watch","toParams","previousParams","Object","keys","includes"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Browse.vue"],"sourcesContent":["<template>\n<div id = 'Browse' >\n\n    <h1 id = 'sortCategory' v-html='this.$route.params.identifier ? this.$route.params.identifier : \"All Novels\"'/>\n\n    <header id = 'top'>\n        <div id = 'count'>\n            <UtfBox shape = '&#9733;'/>\n            <p id = 'resultCount'>{{novelData.length}} RESULTS</p>\n            <label class = 'category'> Order By</label>\n        </div>\n\n        <div id = 'sortButtons'>\n            <input type='button' class = 'category' @click='print(\"lastupload\")' value = 'Latest' id = 'sort-lastupload'>\n            <input type ='button' class = 'category' @click='print(\"title\")' value = 'A-Z' id = 'sort-title'>\n            <input type ='button' class = 'category' @click='print(\"length\")' value = 'Length' id = 'sort-length'>\n            <input type ='button' class = 'category' @click='print(\"views\")' value = 'Views' id = 'sort-views'>\n            <input type ='button' class = 'category' @click='print(\"firstupload\")' value = 'New' id = 'sort-firstupload'>\n        </div>\n        <h6>Page {{page}} of {{(pageCount)}}</h6>\n    </header>\n\n    <div class = \"novelList\">\n        <div v-for='novel in novelData' :key = 'novel.title' id = 'novels'>\n            <NovelCard \n                :novelData='novel'\n                type=\"browse\"\n                />\n        </div>\n    </div>\n    <div id = 'pageNav'>\n    <button v-if='page > 1'>Previous Page</button>\n    <button v-if='page < pageCount'>Next Page</button>\n    </div>\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nimport NovelCard from '../components/NovelCard'\nimport UtfBox from '../components/UtfBox'\n    export default{\n        name: 'Browser',\n        components:{\n            NovelCard,\n            UtfBox,\n        },\n        data(){\n            return{\n            novelData:[],\n            chapterList:[],\n            attributesort:'new',\n            page:1,\n            pageCount:0\n            }\n        },\n        props:[\n            'tier'\n        ],\n        methods:{\n        sort(a,b){\n            switch (this.attributesort){\n                case 'Latest':\n                    if(Date.parse(a.lastupload) < Date.parse(b.lastupload)) { return 1; }\n                    if(Date.parse(a.lastupload) > Date.parse(b.lastupload)) { return -1; }\n                    return 0;\n                case 'alphabetical':\n                    if(a.title < b.title) { return -1; }\n                    if(a.title > b.title) { return 1; }\n                    return 0;\n                case 'length':\n                    if(a.firstChapter['chapternumber'] < b.firstChapter['chapternumber']) { return 1; }\n                    if(a.firstChapter['chapternumber'] > b.firstChapter['chapternumber']) { return -1; }\n                    return 0;\n                case 'views':\n                    const view_a = parseInt(a.views)\n                    const view_b = parseInt(b.views)\n                    if(view_a < view_b) { return 1; }\n                    if(view_a > view_b) { return -1; }\n                    return 0;\n                case 'new':\n                    if(Date.parse(a.firstupload) < Date.parse(b.firstupload)) { return 1; }\n                    if(Date.parse(a.firstupload) > Date.parse(b.firstupload)) { return -1; }\n                    return 0;\n\n            }\n\n        },\n        getNovels(order,page){\n            var identifier = this.$route.params.identifier\n        console.log(identifier)\n        if(identifier != undefined){\n            identifier = identifier.replace(/&nbsp;/g,'|')\n        }\n        const url = '/novel/multiple?tier='+this.tier+'&identifier='+identifier+'&order='+order+'&page='+this.page\n       getAPI.get(url)\n          .then(response => {\n            console.log('Post API has recieved data')\n            this.novelData=response.data\n            console.log(this.novelData[0])\n          })\n          .catch(err => {\n            console.log(err)\n          })\n        },\n        print(p){\n            const selected = document.getElementsByClassName('selected')\n            for(var i=0; i < selected.length; i++){\n                selected[i].classList.remove('selected')\n            }\n            document.getElementById('sort-'+p).classList.add('selected')\n            console.log(p)\n            this.getNovels(p,this.page)\n        }\n        \n    },\n    created(){\n        \n        getAPI.get('/novels-page-count?tier='+this.tier+'&identifier='+this.$route.params.identifier)\n          .then(response => {\n            console.log('Post API has recieved data')\n            console.log(response.data)\n            this.pageCount = response.data\n            this.getNovels('lastupload',1)  \n          })\n          .catch(err => {\n            console.log(err)\n          })\n        this.$watch(\n      () => this.$route.params,\n      (toParams, previousParams) => {\n        // react to route changes...\n\n            if(Object.keys(previousParams).includes('browsetype') && Object.keys(toParams).length == 0){\n                const selected = document.getElementsByClassName('selected')\n                this.getNovels('lastupload',1)\n                for(var i=0; i < selected.length; i++){\n                selected[i].classList.remove('selected')\n            }\n            }\n      }\n    )     \n    \n    }\n    \n    }\n</script>\n\n<style scoped>\n#Browse{\n    width:100%;\n}\n#novels{\n    display:flex;\n    flex-direction:row;\n}\n#top{\n    display:flex;\n    flex-direction:row;\n    border-bottom:gray 2px solid;\n    margin-bottom:30px;\n    position:relative;\n    height:37px;\n    \n}\n.novelList{\n   display: grid;\n   grid-template-columns: auto auto auto auto;\n   margin:auto;\n   height:fit-content;\n    transition: all .3s ease;\n     /*box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) inset , 0 6px 20px 0 rgba(0, 0, 0, 0.19) inset;*/\n     padding:10px;\n \n}\n#count{\n    width:275px;\n    display:flex;\n    flex-direction:row;\n   \n\n}\n#sortButtons{\n    width:400px;\n}\n.category{\n    background:none;\n    border:none;\n    color:gray;\n    position:relative;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    font-size:15px;\n    min-width:75px;\n}\ninput[type='button'].category:hover{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n}\n\n#sortCategory{\n    font-size:18px;\n    font-weight:bold;\n    margin-bottom:28px;\n    letter-spacing: 0.5px;\n}\n#resultCount{\n    margin-left:20px;\n    font-size:18px;\n    font-weight:600;\n    width:200px;\n}\n.selected{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n    box-shadow: 0 4px 8px 0 var(--shadowColor), 0 6px 20px 0 var(--shadowColor);\n    transition: all .3s ease;\n}\n@media (max-width: 1200px){\n     .novelList{\n         grid-template-columns: auto auto auto;\n    }\n    #top{\n        flex-direction:column;\n        height: 79px;\n        \n    }\n  }\n@media (max-width: 775px) {\n    .novelList{\n         grid-template-columns: auto;\n    }\n   \n}\n</style>\n"]},"metadata":{},"sourceType":"module"}