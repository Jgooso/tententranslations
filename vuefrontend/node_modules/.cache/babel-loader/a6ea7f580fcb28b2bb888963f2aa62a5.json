{"ast":null,"code":"import { getAPI } from '../axios-api';\nexport default {\n  name: 'Upload',\n\n  data() {\n    return {\n      genres: [],\n      tags: []\n    };\n  },\n\n  methods: {\n    getGenres() {\n      console.log(selectedGenres);\n      console.log(url);\n      console.log(selectedtags);\n    },\n\n    showHideTagList(display) {\n      const x = document.getElementById('tagSelect');\n      if (!x) return null;\n\n      if (display == 1) {\n        x.style.display = \"block\";\n      } else {\n        x.style.display = \"none\";\n      }\n    },\n\n    addTag() {\n      const x = document.getElementById('tagtextbox');\n      const tag = document.getElementById('tagSelect').value;\n      x.value += tag + \",\";\n    },\n\n    postData() {\n      var selectedGenres = '';\n      const genreelements = document.getElementsByClassName('genrecheckbox');\n      const url = document.getElementById('urltextbox').value;\n      const selectedtags = document.getElementById('tagtextbox').value;\n\n      for (var i = 0; i < genreelements.length; i++) {\n        if (genreelements[i].checked == true) {\n          selectedGenres += genreelements[i].value + \",\";\n        }\n      }\n\n      selectedGenres = selectedGenres.replace(/(^,)|(,$)/g, '');\n      getAPI.put('/uploaddata', {\n        url: url,\n        tags: selectedtags,\n        genres: selectedGenres\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n\n  },\n\n  created() {\n    getAPI.get('/uploaddata').then(response => {\n      console.log('Chapter API has recieved data');\n      this.genres = response.data['genres'];\n      this.tags = response.data['tags'];\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":"AA0BA,SAASA,MAAT,QAAuB,cAAvB;AACA,eAAc;EACVC,IAAI,EAAC,QADK;;EAEVC,IAAI,GAAE;IACF,OAAM;MACFC,MAAM,EAAC,EADL;MAEFC,IAAI,EAAC;IAFH,CAAN;EAIH,CAPS;;EAQVC,OAAO,EAAC;IACJC,SAAS,GAAE;MAEXC,OAAO,CAACC,GAAR,CAAYC,cAAZ;MACAF,OAAO,CAACC,GAAR,CAAYE,GAAZ;MACAH,OAAO,CAACC,GAAR,CAAYG,YAAZ;IAGC,CARG;;IASJC,eAAe,CAACC,OAAD,EAAS;MACpB,MAAMC,IAAIC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAV;MACA,IAAG,CAACF,CAAJ,EAAM,OAAO,IAAP;;MACN,IAAID,OAAO,IAAE,CAAb,EAAgB;QACZC,CAAC,CAACG,KAAF,CAAQJ,OAAR,GAAkB,OAAlB;MACJ,CAFA,MAEO;QACHC,CAAC,CAACG,KAAF,CAAQJ,OAAR,GAAkB,MAAlB;MACJ;IAEH,CAlBG;;IAmBJK,MAAM,GAAE;MACJ,MAAMJ,IAAIC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAV;MACA,MAAMG,GAAE,GAAIJ,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCI,KAAjD;MACAN,CAAC,CAACM,KAAF,IAAWD,GAAG,GAAC,GAAf;IACH,CAvBG;;IAwBJE,QAAQ,GAAE;MACN,IAAIZ,cAAa,GAAI,EAArB;MACA,MAAMa,aAAY,GAAIP,QAAQ,CAACQ,sBAAT,CAAgC,eAAhC,CAAtB;MACA,MAAMb,GAAE,GAAIK,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCI,KAAlD;MACA,MAAMT,YAAW,GAAII,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCI,KAA3D;;MACA,KAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,aAAa,CAACG,MAA7B,EAAoCD,CAAC,EAArC,EAAwC;QACpC,IAAGF,aAAa,CAACE,CAAD,CAAb,CAAiBE,OAAjB,IAA4B,IAA/B,EAAoC;UAChCjB,cAAa,IAAIa,aAAa,CAACE,CAAD,CAAb,CAAiBJ,KAAjB,GAAuB,GAAxC;QACJ;MACJ;;MACAX,cAAa,GAAIA,cAAc,CAACkB,OAAf,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;MACA3B,MAAM,CAAC4B,GAAP,CAAW,aAAX,EAA0B;QAAClB,GAAG,EAACA,GAAL;QAASN,IAAI,EAACO,YAAd;QAA2BR,MAAM,EAACM;MAAlC,CAA1B,EACKoB,IADL,CACU,UAAUC,QAAV,EAAoB;QACtBvB,OAAO,CAACC,GAAR,CAAYsB,QAAZ;MACP,CAHD,EAIKC,KAJL,CAIW,UAAUC,KAAV,EAAiB;QACpBzB,OAAO,CAACC,GAAR,CAAYwB,KAAZ;MACP,CAND;IAOJ;;EA1CI,CARE;;EAoDVC,OAAO,GAAE;IACLjC,MAAM,CAACkC,GAAP,CAAW,aAAX,EACGL,IADH,CACQC,QAAO,IAAK;MAChBvB,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACA,KAAKL,MAAL,GAAc2B,QAAQ,CAAC5B,IAAT,CAAc,QAAd,CAAd;MACA,KAAKE,IAAL,GAAY0B,QAAQ,CAAC5B,IAAT,CAAc,MAAd,CAAZ;IACD,CALH,EAMG6B,KANH,CAMSI,GAAE,IAAK;MACZ5B,OAAO,CAACC,GAAR,CAAY2B,GAAZ;IACD,CARH;EASJ;;AA9DU,CAAd","names":["getAPI","name","data","genres","tags","methods","getGenres","console","log","selectedGenres","url","selectedtags","showHideTagList","display","x","document","getElementById","style","addTag","tag","value","postData","genreelements","getElementsByClassName","i","length","checked","replace","put","then","response","catch","error","created","get","err"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Upload.vue"],"sourcesContent":["<template>\n<div class = 'content'>\n<div id = 'managementnavigator'>\n<button>Upload</button>\n<button>Schedule</button>\n<button>Edit</button>\n<button>Manage Users</button>\n</div>\n<form>\n<label for=\"fname\">URL:</label>\n<input type=\"text\" id = 'urltextbox' maxlength=\"34\" style='width:280px'>\n<div id = 'genres'>\n<label v-for='genre in genres' :key = 'genre'><input type='checkbox' :value='genre' class = 'genrecheckbox'>{{genre}}</label>\n</div>\n<br><br>\n<label id = 'tags'>Tags:<input type = 'text' @focusin=\"showHideTagList(1)\" @change ='showHideTagList(2)' id = 'tagtextbox'></label>\n<select id = 'tagSelect' @change='addTag()' size = '20'>\n    <option v-for='tag in tags' :key = 'tag' v-html = 'tag'></option>\n</select>\n<button @click='postData()'>Submit</button>\n</form>\n\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nexport default{\n    name:'Upload',\n    data(){\n        return{\n            genres:[],\n            tags:[],\n        }\n    },\n    methods:{\n        getGenres(){\n        \n        console.log(selectedGenres)\n        console.log(url)\n        console.log(selectedtags)\n        \n        \n        },\n        showHideTagList(display){\n            const x = document.getElementById('tagSelect')\n            if(!x)return null\n            if (display==1) {\n                x.style.display = \"block\";\n            } else {\n                x.style.display = \"none\";\n            }\n            \n        },\n        addTag(){\n            const x = document.getElementById('tagtextbox')\n            const tag = document.getElementById('tagSelect').value\n            x.value += tag+\",\"\n        },\n        postData(){\n            var selectedGenres = ''\n            const genreelements = document.getElementsByClassName('genrecheckbox')\n            const url = document.getElementById('urltextbox').value\n            const selectedtags = document.getElementById('tagtextbox').value\n            for(var i=0; i<genreelements.length;i++){\n                if(genreelements[i].checked == true){\n                    selectedGenres +=genreelements[i].value+\",\"\n                }\n            }\n            selectedGenres = selectedGenres.replace(/(^,)|(,$)/g, '')\n            getAPI.put('/uploaddata', {url:url,tags:selectedtags,genres:selectedGenres})\n                .then(function (response) {\n                    console.log(response);\n            })\n                .catch(function (error) {\n                    console.log(error);\n            }); \n        }\n    },\n    created(){\n        getAPI.get('/uploaddata')\n          .then(response => {\n            console.log('Chapter API has recieved data')\n            this.genres = response.data['genres']\n            this.tags = response.data['tags']\n          })\n          .catch(err => {\n            console.log(err)\n          })\n    }\n}\n</script>\n\n<style scoped>\n.content{\n    display:flex;\n    flex-direction:row;\n    height:1000px;\n    margin-top:100px;\n}\n#managementnavigator{\n    height:100%;\n    background-color:lightgray;\n    width:30%;\n    display:flex;\n    flex-direction:column;\n}\nbutton{\n    background:none;\n    border-right:none\n}\n#genres{\n    position:relative;\n    display:grid;\n    grid-template-rows: auto auto auto auto auto auto auto auto auto;\n    grid-auto-flow: column;\n    column-gap: 30px;\n    row-gap:10px;\n    margin:auto;\n    width:100%\n}\ninput{\n    margin-right:5px;\n}\n#tagSelect{\n    display:none;\n    background:lightgray;\n    border:none;\n    -webkit-appearance: none;\n}\n#tags{\n    width:100%\n}\n#tagtextbox{\n    width:500px;\n    text-align:left;\n    overflow-wrap: break-word\n}\n@media (max-width: 775px) {\n    #genres{\n        grid-template-rows: auto auto auto auto auto auto auto auto auto auto auto auto;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}