{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport NovelCard from '../components/NovelCard';\nimport UtfBox from '../components/UtfBox';\nexport default {\n  name: 'Browser',\n  components: {\n    NovelCard,\n    UtfBox\n  },\n\n  data() {\n    return {\n      novelData: [],\n      chapterList: [],\n      attributesort: 'new'\n    };\n  },\n\n  props: ['tier'],\n  methods: {\n    sort(a, b) {\n      switch (this.attributesort) {\n        case 'latest':\n          if (Date.parse(a.lastupload) < Date.parse(b.lastupload)) {\n            return 1;\n          }\n\n          if (Date.parse(a.lastupload) > Date.parse(b.lastupload)) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'alphabetical':\n          if (a.title < b.title) {\n            return -1;\n          }\n\n          if (a.title > b.title) {\n            return 1;\n          }\n\n          return 0;\n\n        case 'length':\n          if (a.firstChapter['chapternumber'] < b.firstChapter['chapternumber']) {\n            return 1;\n          }\n\n          if (a.firstChapter['chapternumber'] > b.firstChapter['chapternumber']) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'views':\n          const view_a = parseInt(a.views);\n          const view_b = parseInt(b.views);\n\n          if (view_a < view_b) {\n            return 1;\n          }\n\n          if (view_a > view_b) {\n            return -1;\n          }\n\n          return 0;\n\n        case 'new':\n          if (Date.parse(a.firstupload) < Date.parse(b.firstupload)) {\n            return 1;\n          }\n\n          if (Date.parse(a.firstupload) > Date.parse(b.firstupload)) {\n            return -1;\n          }\n\n          return 0;\n      }\n    },\n\n    getNovels() {\n      var identifier = this.$route.params.identifier;\n      console.log(identifier);\n\n      if (identifier != undefined) {\n        identifier = identifier.replace(/&nbsp;/g, '|');\n      }\n\n      getAPI.get('/novel/multiple?tier=' + this.tier + '&category=' + this.$route.params.browsetype + '&identifier=' + identifier).then(response => {\n        console.log('Post API has recieved data');\n        this.novelData = response.data;\n        console.log(this.novelData[0]);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n  },\n\n  created() {\n    this.getNovels();\n    this.$watch(() => this.$route.params, (toParams, previousParams) => {\n      // react to route changes...\n      if (previousParams) {//this.getNovels()\n      }\n\n      console.log(previousParams.contains('browsetype'));\n      console.log('toParams', toParams, 'previousParams', previousParams);\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","NovelCard","UtfBox","name","components","data","novelData","chapterList","attributesort","props","methods","sort","a","b","Date","parse","lastupload","title","firstChapter","view_a","parseInt","views","view_b","firstupload","getNovels","identifier","$route","params","console","log","undefined","replace","get","tier","browsetype","then","response","catch","err","created","$watch","toParams","previousParams","contains"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Browse.vue"],"sourcesContent":["<template>\n<div class = 'content' >\n    <br>\n    <p id = 'sortCategory' v-html='this.$route.params.identifier ? this.$route.params.identifier : \"All Novels\"'/>\n    <div id = 'top'>\n        <div id = 'count'>\n            <UtfBox shape = '&#9733;'/>\n            <p id = 'resultCount'>{{novelData.length}} RESULTS</p>\n            <label class = 'category'> Order By</label>\n        </div>\n        <div id = 'sortButtons'>\n            <button class = 'category' @click='attributesort=\"latest\"'>Latest</button>\n            <button class = 'category' @click='attributesort=\"alphabetical\"'>A-Z</button>\n            <button class = 'category' @click='attributesort=\"length\"'>Length</button>\n            <button class = 'category' @click='attributesort=\"views\"'>Most Views</button>\n            <button class = 'category' @click='attributesort=\"new\"'>New</button>\n        </div>\n    </div>\n    <div class = \"novelList\">\n        <div v-for='novel in novelData.sort(sort)' :key = 'novel.title' id = 'novels'>\n            <NovelCard :novelData='novel'/>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nimport NovelCard from '../components/NovelCard'\nimport UtfBox from '../components/UtfBox'\n    export default{\n        name: 'Browser',\n        components:{\n            NovelCard,\n            UtfBox,\n        },\n        data(){\n            return{\n            novelData:[],\n            chapterList:[],\n            attributesort:'new'\n            }\n        },\n        props:[\n            'tier'\n        ],\n        methods:{\n        sort(a,b){\n            switch (this.attributesort){\n                case 'latest':\n                    if(Date.parse(a.lastupload) < Date.parse(b.lastupload)) { return 1; }\n                    if(Date.parse(a.lastupload) > Date.parse(b.lastupload)) { return -1; }\n                    return 0;\n                case 'alphabetical':\n                    if(a.title < b.title) { return -1; }\n                    if(a.title > b.title) { return 1; }\n                    return 0;\n                case 'length':\n                    if(a.firstChapter['chapternumber'] < b.firstChapter['chapternumber']) { return 1; }\n                    if(a.firstChapter['chapternumber'] > b.firstChapter['chapternumber']) { return -1; }\n                    return 0;\n                case 'views':\n                    const view_a = parseInt(a.views)\n                    const view_b = parseInt(b.views)\n                    if(view_a < view_b) { return 1; }\n                    if(view_a > view_b) { return -1; }\n                    return 0;\n                case 'new':\n                    if(Date.parse(a.firstupload) < Date.parse(b.firstupload)) { return 1; }\n                    if(Date.parse(a.firstupload) > Date.parse(b.firstupload)) { return -1; }\n                    return 0;\n\n            }\n\n        },\n        getNovels(){\n            var identifier = this.$route.params.identifier\n        console.log(identifier)\n        if(identifier != undefined){\n            identifier = identifier.replace(/&nbsp;/g,'|')\n        }\n       getAPI.get('/novel/multiple?tier='+this.tier+'&category='+this.$route.params.browsetype+'&identifier='+identifier)\n          .then(response => {\n            console.log('Post API has recieved data')\n            this.novelData=response.data\n            console.log(this.novelData[0])\n          })\n          .catch(err => {\n            console.log(err)\n          })\n        }\n        \n    },\n    created(){\n        this.getNovels()  \n        this.$watch(\n      () => this.$route.params,\n      (toParams, previousParams) => {\n        // react to route changes...\n            if(previousParams){\n           //this.getNovels()\n            }\n            console.log(previousParams.contains('browsetype'))\n           console.log('toParams',toParams,'previousParams',previousParams)\n      }\n    )     \n    }\n    \n    }\n</script>\n\n<style scoped>\n#novels{\n    display:flex;\n    flex-direction:row;\n}\n#top{\n    display:flex;\n    flex-direction:row;\n    border-bottom:gray 2px solid;\n    margin-bottom:30px;\n    position:relative;\n    height:37px;\n}\n.novelList{\n   display: grid;\n   grid-template-columns: auto auto auto auto;\n   margin:auto;\n   height:fit-content;\n \n}\n#count{\n    width:275px;\n    display:flex;\n    flex-direction:row;\n   \n\n}\n#sortButtons{\n    width:400px;\n}\n.category{\n    background:none;\n    border:none;\n    color:gray;\n    position:relative;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    font-size:15px;\n    min-width:75px;\n}\nbutton.category:hover{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n}\n\nbutton.category:active{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n    }\n#sortCategory{\n    font-size:18px;\n    font-weight:bold;\n    margin-bottom:28px;\n    letter-spacing: 0.5px;\n}\n#resultCount{\n    margin-left:20px;\n    font-size:18px;\n    font-weight:600;\n    width:200px;\n}\n\n@media (max-width: 1200px){\n     .novelList{\n         grid-template-columns: auto auto auto;\n    }\n    #top{\n        flex-direction:column;\n        height: 79px;\n    }\n  }\n@media (max-width: 775px) {\n    .novelList{\n         grid-template-columns: auto;\n    }\n   \n}\n</style>\n"]},"metadata":{},"sourceType":"module"}