{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-2f0ab1ce\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  for: \"tagfilter\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"Filter \");\n\nconst _hoisted_3 = {\n  id: \"tagList\"\n};\nconst _hoisted_4 = {\n  class: \"selectedtaglist\"\n};\nconst _hoisted_5 = {\n  id: \"tagselector\"\n};\nconst _hoisted_6 = [\"id\"];\nconst _hoisted_7 = [\"value\", \"name\", \"onChange\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_tagBox = _resolveComponent(\"tagBox\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"label\", _hoisted_1, [_hoisted_2, _createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"tagfilter\",\n    onKeyup: _cache[0] || (_cache[0] = $event => $options.filterTag()),\n    onFocusin: _cache[1] || (_cache[1] = $event => $options.showtags())\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  )]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.selectedtags, tag => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: tag\n    }, [_createVNode(_component_tagBox, {\n      tag: tag,\n      onRemove: $options.removeTag\n    }, null, 8\n    /* PROPS */\n    , [\"tag\", \"onRemove\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.tags.length, i => {\n    return _openBlock(), _createElementBlock(\"label\", {\n      key: i,\n      class: \"tagbutton unselected\",\n      id: $props.tags[i] + i\n    }, [_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      value: _ctx.tag,\n      name: \"tag\" + i,\n      onChange: $event => $options.addTag($props.tags[i] + i)\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_7), _createTextVNode(\" \" + _toDisplayString($props.tags[i]), 1\n    /* TEXT */\n    )], 8\n    /* PROPS */\n    , _hoisted_6);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])]);\n}","map":{"version":3,"mappings":";;;;;EAEOA,GAAG,EAAC;;;iDAAY;;;EAGbC,EAAE,EAAG;;;EACHC,KAAK,EAAG;;;EAKPD,EAAE,EAAG;;;;;;;uBAVlBE,oBAiBM,KAjBN,EAiBM,IAjBN,EAiBM,CAhBNC,oBAEY,OAFZ,cAEY,aADJA,oBAA+E,OAA/E,EAA+E;IAAxEC,IAAI,EAAC,MAAmE;IAA5DJ,EAAE,EAAG,WAAuD;IAA1CK,OAAK,sCAAEC,oBAAF,CAAqC;IAArBC,SAAO,sCAAED,mBAAF;EAAc,CAA/E;;EAAA,CACI,CAFZ,CAgBM,EAbFH,oBAYM,KAZN,cAYM,CAXFA,oBAIK,IAJL,cAIK,oBAHDD,oBAEKM,SAFL,EAEK,IAFL,EAEKC,YAFaC,mBAEb,EAFMC,GAAmB,IAAhB;yBAAdT,oBAEK,IAFL,EAEK;MAF4BU,GAAG,EAAID;IAEnC,CAFL,EAA2C,CACvCE,aAAwCC,iBAAxC,EAAwC;MAA/BH,GAAG,EAAEA,GAA0B;MAApBI,QAAM,EAAET;IAAY,CAAxC;;IAAA,sBADuC,CAA3C;GAEK,CAFL;;EAAA,CAGC,EAJL,CAWE,EANFH,oBAKM,KALN,cAKM,oBAJFD,oBAGQM,SAHR,EAGQ,IAHR,EAGQC,YAHWC,YAAKM,MAGhB,EAHMC,CAAgB,IAAf;yBAAff,oBAGQ,OAHR,EAGQ;MAHyBU,GAAG,EAAEK,CAG9B;MAHiChB,KAAK,EAAG,sBAGzC;MAHkED,EAAE,EAAIU,YAAKO,CAAL,IAAQA;IAGhF,CAHR,GACId,oBAAkF,OAAlF,EAAkF;MAA3EC,IAAI,EAAC,UAAsE;MAA1Dc,KAAK,EAAEC,QAAmD;MAA7CC,IAAI,UAAUH,CAA+B;MAA3BI,QAAM,YAAEf,gBAAOI,YAAKO,CAAL,IAAQA,CAAf;IAAmB,CAAlF;;IAAA,gCAAkF,MAClFK,iBAAEZ,YAAKO,CAAL,CAAF,GAAQ;IAAA;MAFZ;;IAAA;GAGQ,CAHR;;EAAA,CAIE,EALN,CAME,CAZN,CAaE,CAjBN","names":["for","id","class","_createElementBlock","_createElementVNode","type","onKeyup","$options","onFocusin","_Fragment","_renderList","$props","tag","key","_createVNode","_component_tagBox","onRemove","length","i","value","_ctx","name","onChange","_toDisplayString"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/components/TagSelector.vue"],"sourcesContent":["<template>\n<div>\n<label for='tagfilter'>Filter\n        <input type='text' id = 'tagfilter' @keyup='filterTag()' @focusin='showtags()'>\n    </label>\n    <div  id = 'tagList'>\n        <ul class = 'selectedtaglist' >\n            <li v-for='tag in selectedtags' :key = 'tag'>\n                <tagBox :tag='tag' @remove='removeTag'/>\n            </li>\n        </ul>\n        <div id = 'tagselector'>\n            <label v-for='i in tags.length' :key='i' class = 'tagbutton unselected'  :id = 'tags[i]+i'>\n                <input type='checkbox' :value='tag' :name = '\"tag\"+i' @change='addTag(tags[i]+i)'>\n                {{tags[i]}}\n            </label>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport tagBox from '../components/TagBox'\n    export default{\n        name:'TagSelector',\n        props:[\n            'tags',\n            'selectedtags'\n        ],\n        components:{\n            tagBox\n        },\n        methods:{\n            addTag(tag){\n            const tagbutton = document.getElementById(tag)\n            tagbutton.classList.remove('unselected')\n            if(!this.selectedtags.includes(tag)){\n                this.selectedtags.push(tag)\n            }\n            console.log(this.selectedtags)\n           \n        },\n        removeTag(removetag){\n            const index = this.selectedtags.indexOf(removetag)\n            this.selectedtags.splice(index,1)\n            document.getElementById(removetag).classList.add('unselected')\n        },\n        filterTag(){\n            var input, tagbuttons, txtValue\n            input = document.getElementById('tagfilter').value.toUpperCase()\n            tagbuttons = document.getElementsByClassName('tagbutton')\n            for(var i = 0; i < tagbuttons.length; i++){\n                txtValue = tagbuttons[i].value || tagbuttons[i].innerText;\n                if (txtValue.toUpperCase().indexOf(input) > -1) {\n                    tagbuttons[i].style.display = \"\";\n                } else {\n                    tagbuttons[i].style.display = \"none\";\n                }\n            }\n        },\n        showtags(){\n           document.getElementById('tagselector').style.display = 'flex'\n        },\n        hidetags(){\n            document.getElementById('tagselector').style.display = 'none'\n        },\n        }\n    }\n</script>\n\n<style scoped>\n#tagList{\nborder: 2px black solid;\nwidth:500px;\nheight:fit-content;\nmin-height:50px;\nfloat:left;\npadding:20px;\nbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) inset, 0 6px 20px 0 rgba(0, 0, 0, 0.19) inset;\n}\n#tagfilter{\n    height:30px;\n    border:none;\n}\n.selectedtaglist{\n    display:inline;\n    list-style: none;\n    padding:0px;\n   \n}\n\n.selectedtaglist li{\n    display:inline;\n    float:left;\n    margin-left:10px;\n}\n\n#tagselector{\n    display:none;\n    flex-direction:column;\n    overflow:scroll;\n    width:100%;\n    max-height:500px;\n    height:100%;\n    background-color:white;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) inset, 0 6px 20px 0 rgba(0, 0, 0, 0.19) inset;\n}\n.tagbutton{\n    border:none;\n    color:lightgray;\n    background:none;\n}\n.unselected{\n    color:black;\n}\n.unselected:hover{\n    background-color:blue;\n    color:white;\n}\n#tagSelect{\n    background:lightgray;\n    border:none;\n    -webkit-appearance: none;\n}\n#tags{\n    width:100%\n}\n#tagtextbox{\n    width:500px;\n    text-align:left;\n    overflow-wrap: break-word\n}\ninput[type=\"checkbox\"]  {\n   display: none;\n}\n@media (max-width: 775px) {\n    #tagList{\n        width:350px;\n    }\n    #tagselector{\n        width:350px;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}