{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport GenreSelector from '../components/GenreSelector';\nimport TagSelector from '../components/TagSelector';\nimport ChapterSelector from '../components/ChapterSelector';\nimport UtfBox from '../components/UtfBox';\nexport default {\n  data() {\n    return {\n      selectednovel: '',\n      novelList: [],\n      novelData: [],\n      tags: [],\n      genres: [],\n      chapterList: [],\n      sectionList: [],\n      chapterContent: '',\n      currentChapter: [],\n      saved: false\n    };\n  },\n\n  components: {\n    GenreSelector,\n    TagSelector,\n    ChapterSelector,\n    UtfBox\n  },\n  methods: {\n    confirm(open) {\n      var confirmationBox = document.getElementById('confirmationBox');\n\n      if (open == 0) {\n        confirmationBox.style.display = 'flex';\n      } else if (open == 1) {\n        confirmationBox.style.display = 'none';\n      } else if (open == 2) {\n        if (this.novelData.novelactive == 1) {\n          this.novelData.novelactive = 0;\n        } else {\n          this.novelData.novelactive = 1;\n        }\n\n        confirmationBox.style.display = 'none';\n      }\n    },\n\n    selectNovel(a) {\n      console.log(a);\n\n      if (a) {\n        this.selectednovel = a;\n      } else {\n        this.selectednovel = document.getElementById(\"novel-selector\").value;\n      }\n\n      console.log(this.selectednovel);\n      const url = '/novel/single?novel=' + this.selectednovel + '&tier=5&edit=True';\n      getAPI.get(url).then(response => {\n        console.log('Post Novel has recieved data');\n        this.novelData = response.data['Novel'];\n        const sections = response.data['Chapters'].filter(chapter => chapter.chapternumber == 0);\n\n        if (sections.length > 0) {\n          this.sectionList = sections;\n        } else {\n          this.sectionList = [{\n            'section': 0\n          }];\n        }\n\n        this.chapterList = response.data['Chapters'].filter(chapter => chapter.chapternumber != 0);\n        this.genres = response.data['Genres'];\n        this.tags = response.data['Tags'];\n        this.isMounted = true;\n        this.currentChapter = null;\n        this.chapterContent = '';\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n\n    submit() {\n      //const loadingscreen = document.getElementById('loadingscreen')\n      //loadingscreen.style.display = 'block'\n      if (this.editType == 'novel') {\n        const genres = document.getElementsByClassName('genrecheckbox');\n        var selectedGenres = [];\n\n        for (var i = 0; i < genres.length; i++) {\n          if (genres[i].checked == true) {\n            selectedGenres.push(genres[i].value);\n          }\n        }\n\n        console.log('posted');\n        this.novelData.novelstatus = document.getElementById('completedEdit').value;\n        this.novelData.description = document.getElementById('noveldescription').innerHTML;\n        this.novelData.title = document.getElementById('novelTitle').innerHTML;\n        const url = '/novel/single?novel=' + this.selectednovel;\n        getAPI.put(url, {\n          description: this.novelData.description,\n          tags: this.novelData.tags,\n          genres: selectedGenres,\n          completed: this.novelData.novelstatus,\n          title: this.novelData.title,\n          novelactive: this.novelData.novelactive\n        }).then(function (response) {\n          console.log(response);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else if (this.editType == 'chapters') {\n        const titles = document.getElementsByClassName('chapter-list');\n\n        for (var i = 0; i < titles.length; i++) {\n          console.log(titles[i].innerHTML); //console.log(titles[i].id.replace(/[^0-9]/g,''))\n        }\n      }\n    },\n\n    showGenres() {\n      var genre_selector = document.getElementById('genre-selector');\n      console.log(genre_selector);\n\n      if (genre_selector.style.display == 'flex') {\n        genre_selector.style.display = 'none';\n        console.log('flex');\n      } else {\n        genre_selector.style.display = 'flex';\n        console.log('none');\n      }\n    },\n\n    showTags() {\n      var tag_selector = document.getElementById('tag-selector');\n      console.log(tag_selector);\n\n      if (tag_selector.style.display == 'flex') {\n        tag_selector.style.display = 'none';\n        console.log('flex');\n      } else {\n        tag_selector.style.display = 'flex';\n        console.log('none');\n      }\n    },\n\n    switchEdit() {\n      if (this.editType == 'novel') {\n        this.editType = 'chapters';\n      } else {\n        this.editType = 'novel';\n      }\n\n      console.log(this.editType);\n    },\n\n    save() {\n      this.chapterContent = document.getElementById('chapter-content').innerHTML;\n    },\n\n    displayChapter(chapterItem) {\n      const chapter_contents = document.getElementsByClassName('selected');\n      document.getElementById('chapterEditor').style.left = '0px';\n      document.getElementById('table').style.width = '0px';\n      console.log(chapterItem);\n      document.addEventListener('keyup', this.save, false);\n      const url = '/chapter?novel=' + this.novelData.id + '&chapter=' + chapterItem;\n      getAPI.get(url).then(response => {\n        console.log('Chapter API has recieved data');\n        this.chapterContent = response.data;\n      }).catch(err => {\n        console.log(err);\n      });\n      /*\n      try{\n      var editedContent = document.getElementById(\"chapter-content\"+this.currentChapter).innerHTML\n      }catch{}\n          const url = '/chapter?novel='+this.selectednovel+'&chapter='+chapterItem+'&chapterupdate='+ this.currentChapter\n        \n              getAPI.put(url,{content:editedContent})\n                  .then(response => {\n                          console.log('Chapter API has recieved data')\n                              this.chapterContent = response.data\n                              for(var i=0; i < chapter_contents.length; i++){\n                                  chapter_contents[i].classList.remove('selected')\n                              }\n                              if(chapterItem != this.currentChapter){\n                                  document.getElementById(\"chapter\"+chapterItem).classList.add('selected')\n                              }\n                          this.currentChapter = chapterItem \n                  })\n                  .catch(function (error) {\n                      console.log(error);\n                  })\n      console.log(chapter_contents)\n      */\n    },\n\n    hideChapter() {\n      document.getElementById('chapterEditor').style.left = '100%';\n      document.getElementById('table').style.width = '100%';\n      document.removeEventListener('keyup', this.save, false);\n    }\n\n  },\n\n  created() {\n    getAPI.get('/noveltitles').then(response => {\n      console.log('Chapter API has recieved data');\n      this.novelList = response.data;\n      console.log(response.data);\n      console.log(this.novelList[0].novelid);\n      this.selectNovel(this.novelList[0].novelid);\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n\n  mounted() {}\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","GenreSelector","TagSelector","ChapterSelector","UtfBox","data","selectednovel","novelList","novelData","tags","genres","chapterList","sectionList","chapterContent","currentChapter","saved","components","methods","confirm","open","confirmationBox","document","getElementById","style","display","novelactive","selectNovel","a","console","log","value","url","get","then","response","sections","filter","chapter","chapternumber","length","isMounted","catch","err","submit","editType","getElementsByClassName","selectedGenres","i","checked","push","novelstatus","description","innerHTML","title","put","completed","error","titles","showGenres","genre_selector","showTags","tag_selector","switchEdit","save","displayChapter","chapterItem","chapter_contents","left","width","addEventListener","id","hideChapter","removeEventListener","created","novelid","mounted"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Editor.vue"],"sourcesContent":["<template>\n<div id = 'editPage'>\n    <div id = 'confirmationBox'>\n        <h1 style = 'margin:auto;'>{{novelData.novelactive==0 ? 'Confirm Activate Novel' : \"Confirm Deactivate Novel\"}}</h1>\n        <div style='display:flex;flex-direction:row;margin:auto; width:220px'>\n        <button @click='confirm(2)' class = 'confirmation-button'>Confirm</button>\n        <button @click='confirm(1)' class = 'confirmation-button'>Cancel</button>\n        \n        </div>\n    </div>\n    <select id = 'novel-selector' @change=\"selectNovel()\">\n        <option v-for='novel in novelList' :value='novel.novelid'>{{novel.title}}</option>\n    </select>\n    <!-- Novel Edit-->\n    <!-- Novel Edit End-->\n    <div id=\"cover\" ref = 'cover'>\n    <div v-if='novelData.title'>\n        <p id = \"noveltitle\" v-text='novelData.title'/>\n    <div id = \"inner\">\n        <div id = \"novel-information\">\n             <div id = \"data\">\n                <table>\n                    <tr>\n                        <td>Author</td>\n                        <td class=\"info\">{{novelData.author}}</td>\n                    </tr>\n                    <tr>\n                        <td>Genres</td>\n                         <td  class = 'category'><button class = 'show' @click='showGenres()'>Show</button></td>\n                    </tr>\n                    <tr>\n                        <td>Tags</td>\n                        <td  class = 'category'><button class = 'show' @click='showTags()'>Show</button></td>\n                    </tr>\n                </table>\n                <table>\n                    <tr>\n                        <td>Raw Status</td>\n                        <td class=\"info\">\n                                <select id = 'completedEdit' :selected='value=novelData.novelstatus'>\n                                    <option value = 'Ongoing'>Ongoing</option>\n                                    <option value = 'Completed'>Completed</option>\n                                    <option value = 'On Hold'>On Hold</option>\n                                    <option value = 'Dropped'>Dropped</option>\n                                </select>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Novel Active</td>\n                        <td><button @click='confirm(0)'>{{novelData.novelactive==0 ? 'Activate Novel' : \"Deactivate Novel\"}}</button></td>\n                    </tr>\n                    <!--\n                    <tr>\n                        <td>Pages<span id = 'pageSuper'>(Approx.)</span><p id = 'disclaimer'>~1800 characters/360 words per Page</p></td>\n                        <td class=\"info\"><p>{{novelData.pages}}</p></td>\n                    </tr>\n                    -->\n                </table>\n             </div>\n             <div id = 'genre-selector'>\n             <GenreSelector\n                :genres='genres'\n                :selectedgenres='novelData.genres'\n                \n                />\n            </div>\n            <TagSelector\n                :tags='tags'\n                :selectedtags='novelData.tags'\n                id = 'tag-selector'\n                />\n        </div>   \n    </div>    \n    <div id = \"summary\">\n        <div v-if='novelData.title'>\n           <div style = \"display:flex;flex-direction:row;border-bottom:2px lightgray solid;height:30px;\"><UtfBox shape = '&#9733;'/><h3 id = \"divider\">SUMMARY</h3></div><br>\n            <p id=\"noveldescription\" v-html = 'novelData.description'/>\n        </div>\n    </div>\n    <!-- Chapter Edit-->\n    <div id = \"TableOfContents\">\n        <ul  id = 'table' ref='tableofcontentlist'>\n            <li v-for='section in sectionList'>\n                <li class='section' v-html='section.title' :id ='\"section\"+section.section' contenteditable='True'/>\n                <ul>\n                    <li v-for=\"chapter in chapterList.filter(chapter=>chapter.section==section.section)\" :key=\"chapter.chapternumber\" class='table-list' :id='\"chapter\"+chapter.chapternumber'>\n                        <label>\n                        {{chapter.title}}\n                        <input type='button'  class = 'chapter-list' value = chapter.chapternumber @click='displayChapter(chapter.chapternumber)'>\n                        </label>\n                       \n                        <br>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n        <div id = 'chapterEditor'>\n            <button id ='back-button' @click='hideChapter()'>&#8592;</button>\n            <h3>Title</h3>\n                 <pre v-html='chapterContent' class = 'chapter-content' contenteditable='True'/>\n        </div>\n    </div>\n    </div>\n    </div>\n    <!-- Chapter Edit End-->\n<button @click='submit()'>Submit</button>\n</div>\n</template>\n\n\n<script>\nimport { getAPI } from '../axios-api'\nimport GenreSelector from '../components/GenreSelector'\nimport TagSelector from '../components/TagSelector'\nimport ChapterSelector from '../components/ChapterSelector'\nimport UtfBox from '../components/UtfBox'\nexport default{\n    data (){\n        return{\n            selectednovel:'',\n            novelList:[],\n            novelData:[],\n            tags:[],\n            genres:[],\n            chapterList:[],\n            sectionList:[],\n            chapterContent:'',\n            currentChapter:[],\n            saved:false,\n\n        }\n    },\n    components:{\n        GenreSelector,\n        TagSelector,\n        ChapterSelector,\n        UtfBox\n    },\n    methods:{\n        confirm(open){\n            var confirmationBox = document.getElementById('confirmationBox')\n            if(open == 0){\n                confirmationBox.style.display = 'flex'\n            }else if(open == 1){\n                confirmationBox.style.display = 'none'\n            }else if(open == 2){\n                if(this.novelData.novelactive == 1){this.novelData.novelactive=0}\n                else{this.novelData.novelactive=1}\n                confirmationBox.style.display = 'none'\n            }\n        },\n        selectNovel(a){\n            console.log(a)\n            if(a){\n                this.selectednovel=a\n            }else{\n                this.selectednovel = document.getElementById(\"novel-selector\").value\n            }\n            console.log(this.selectednovel)\n            const url = '/novel/single?novel='+this.selectednovel+'&tier=5&edit=True'\n            getAPI.get(url)\n          .then(response => {\n            console.log('Post Novel has recieved data')\n            this.novelData=response.data['Novel']\n            const sections = response.data['Chapters'].filter(chapter => chapter.chapternumber == 0)\n            if(sections.length > 0){\n                this.sectionList = sections\n            }else{\n                this.sectionList = [{'section':0}]\n            }\n            this.chapterList=response.data['Chapters'].filter(chapter => chapter.chapternumber != 0)\n            this.genres = response.data['Genres']\n            this.tags = response.data['Tags']\n            this.isMounted=true\n            this.currentChapter = null\n            this.chapterContent = ''\n          })\n          .catch(err => {\n            console.log(err)\n          })\n       \n        },\n        submit(){\n            //const loadingscreen = document.getElementById('loadingscreen')\n            //loadingscreen.style.display = 'block'\n            if(this.editType=='novel'){\n            const genres = document.getElementsByClassName('genrecheckbox')\n            var selectedGenres = []\n            for(var i=0; i < genres.length; i++){\n                if(genres[i].checked==true){\n                    selectedGenres.push(genres[i].value)\n                }\n            }\n            console.log('posted')\n               this.novelData.novelstatus=document.getElementById('completedEdit').value\n               this.novelData.description=document.getElementById('noveldescription').innerHTML\n               this.novelData.title=document.getElementById('novelTitle').innerHTML\n               const url = '/novel/single?novel='+this.selectednovel\n            getAPI.put(url,{\n                   description:this.novelData.description,\n                   tags:this.novelData.tags,\n                   genres:selectedGenres,\n                   completed:this.novelData.novelstatus,\n                   title:this.novelData.title,\n                   novelactive:this.novelData.novelactive\n               }).then(function (response) {\n                    console.log(response);\n            })\n                .catch(function (error) {\n                    console.log(error);\n            })\n            }else if(this.editType=='chapters'){\n                const titles = document.getElementsByClassName('chapter-list')\n            for(var i=0; i < titles.length;i++){\n                console.log(titles[i].innerHTML)\n                //console.log(titles[i].id.replace(/[^0-9]/g,''))\n            }\n            }\n        },\n        showGenres(){\n            var genre_selector = document.getElementById('genre-selector')\n            console.log(genre_selector)\n            if(genre_selector.style.display=='flex'){\n                genre_selector.style.display = 'none'\n                console.log('flex')\n            }else{\n                genre_selector.style.display = 'flex'\n                console.log('none')\n            }\n        },\n        showTags(){\n            var tag_selector = document.getElementById('tag-selector')\n            console.log(tag_selector)\n            if(tag_selector.style.display=='flex'){\n                tag_selector.style.display = 'none'\n                console.log('flex')\n            }else{\n                tag_selector.style.display = 'flex'\n                console.log('none')\n            }\n        },\n        switchEdit(){\n            if(this.editType=='novel'){\n                this.editType='chapters'\n            }else{\n                this.editType='novel'\n            }\n            console.log(this.editType)\n        },\n        save(){\n            this.chapterContent = document.getElementById('chapter-content').innerHTML\n        },\n        displayChapter(chapterItem){\n            const chapter_contents = document.getElementsByClassName('selected')\n            document.getElementById('chapterEditor').style.left='0px';\n            document.getElementById('table').style.width='0px';\n            console.log(chapterItem)\n            document.addEventListener('keyup', this.save, false);\n            const url = '/chapter?novel='+this.novelData.id+'&chapter='+chapterItem\n            getAPI.get(url)\n            .then(response => {\n                console.log('Chapter API has recieved data')\n                this.chapterContent = response.data\n            })\n            .catch(err => {\n                console.log(err)\n            })\n            /*\n            try{\n            var editedContent = document.getElementById(\"chapter-content\"+this.currentChapter).innerHTML\n            }catch{}\n                const url = '/chapter?novel='+this.selectednovel+'&chapter='+chapterItem+'&chapterupdate='+ this.currentChapter\n              \n                    getAPI.put(url,{content:editedContent})\n                        .then(response => {\n                                console.log('Chapter API has recieved data')\n                                    this.chapterContent = response.data\n                                    for(var i=0; i < chapter_contents.length; i++){\n                                        chapter_contents[i].classList.remove('selected')\n                                    }\n                                    if(chapterItem != this.currentChapter){\n                                        document.getElementById(\"chapter\"+chapterItem).classList.add('selected')\n                                    }\n                                this.currentChapter = chapterItem \n                        })\n                        .catch(function (error) {\n                            console.log(error);\n                        })\n            console.log(chapter_contents)\n            */\n        },\n        hideChapter(){\n            document.getElementById('chapterEditor').style.left='100%'\n             document.getElementById('table').style.width='100%';\n             document.removeEventListener('keyup', this.save, false);\n        }\n    },\n    created(){\n        getAPI.get('/noveltitles')\n          .then(response => {\n            console.log('Chapter API has recieved data')\n            this.novelList = response.data\n            console.log(response.data)\n            console.log(this.novelList[0].novelid)\n            this.selectNovel(this.novelList[0].novelid)\n            \n          })\n          .catch(err => {\n            console.log(err)\n          })\n    },\n    mounted(){\n       \n    }\n}\n</script>\n<style scoped>\n#editPage{\n    width:100%;\n    height:fit-content;\n    max-width:800px;\n\n}\n#novel-selector{\n    width:80%;\n}\n.category{\n    width:100px;\n    height:50px;\n}\n#confirmationBox{\n    display:none;\n    background-color:lightgray;\n    width:350px;\n    height:350px;\n    flex-direction:column;\n    padding:20px;\n    position:fixed;\n    top:50%;\n    justify-content:center;\n    z-index:10;\n\n}\n.confirmation-button{\n    width:100px;\n    height:50px;\n    font-size:20px;\n    margin:auto;\n}\ntr{\n    margin-bottom:30px;\n}\n\n#completedEdit{\n     background:none;\n    border:none;\n    -webkit-appearance: none;\n}\n.show{\n    background-color:white;\n    color: inherit;\n    border: 1px solid black;\n    width:100%;\n}\n\n\n/*Chapter Editor*/\n\n/*Chapter Table of Contents*/\n#TableOfContents{\n    height:fit-content;\n    width:100%;\n    overflow:hidden;\n    display:flex;\n    flex-direction:row;\n}\n#table{\ntext-decoration:none;\n    list-style:none;\n    width:100%;\n    position:relative;\n    transition: 1s ease-in-out;\n    \n}\n.section{\n    color:#000000;\n    font-size:18px;\n    width:100%;\n    padding-left:10px;\n    border-radius:10px;\n}\n.chapter-list{\n    background:none;\n    border:none;\n    -webkit-appearance: none;\n    width:100%;\n    text-align:left;\n    margin-left:0px;\n}\n.table-list{\n    height:fit-content;\n    max-height:30px;\n    overflow:hidden;\n    border-bottom:1px solid lightgray;\n    width:100%;\n    margin-left:0px;\n    \n}\n/*Chapter Table of Contents End*/\n\n/*Chapter Editor Page*/\n#chapterEditor{\n    position:relative;\n    left:100%;\n    transition: 1s ease-in-out;\n    top:0px;\n    width:100%;\n}\n#back-button{\n    background:none;\n    border:none;\n    font-size:30px;\n}\n.chapter-content{\n    height:fit-content;\n    width:100%;\n    white-space: pre-wrap;\n    font-weight:lighter;\n    overflow:hidden;\n}\n/*Chapter Editor Page End*/\n\n/*Chapter Editor End*/\n\n\n\n.comma-list {\n  display: inline;\n  margin-left:0px;\n}\n.comma-list li {\n  display: inline;\n}\n.comma-list li::after {\n  content: \", \";\n}\n.comma-list li:last-child::after {\n    content: \"\";\n}\n@media (max-width: 775px) {\n    #editTable{\n        width:350px;\n    }\n    #novel-selector{\n        width:350px;\n    }\n}\n\n/*Novel Editor*/\n#noveltitle{\n      color: var(--styleColor);\n      font-size: 20px;\n      margin-bottom: 25px;\n      line-height:20px;\n      height:fit-content;\n      margin-top:30px;\n      font-weight:bold;\n      font-family: 'Times New Roman', serif;\n      \n  }\n\n  /*Novel Informatio Table*/\n    #inner{\n        align-self:center;\n        display:flex;\n        flex-direction:row;\n        width:100%;\n        transition: all .2s ease;\n        box-shadow: 0 4px 8px 0 var(--shadowColor), 0 6px 20px 0 var(--shadowColor);\n        margin-top:20px;\n    }\n    #novel-information{\n        background-color: rgba(250, 250, 250, 0.8);\n        padding:20px;\n        width: 100%;\n        height:fit-content;\n        display: flex;\n        flex-direction: column;\n    }\n    #editTable{\n        width:70%;\n        height:fit-content;\n    }\n    table{\n        display:inline;\n        font-size: 15px;\n        max-width: 100%;\n    }\n    td{\n        font-weight: bold;\n        padding-bottom: 10px;\n        padding-right:20px;\n        width:15%;\n        min-width:125px;\n        vertical-align: top;\n        color:black;\n      \n    }\n    .info{\n        font-weight:normal;\n        width: 85%;\n        line-height: 20px;\n        vertical-align: middle;\n        color:rgb(136,136,136);\n        font-size:14px;\n    }\n    #data{\n        display:flex;\n        flex-direction:row;\n    }\n    #genre-selector{\n        display:none;\n    }\n    #tag-selector{\n        display:none\n    }\n    \n\n   /*Novel Informatio Table End*/\n  #summary{\n    width: 100%;\n    text-align: left;\n    display: flex;\n    flex-direction: column;\n    align-self: center;\n    height:fit-content;\n    margin-top:20px;\n}\n#noveldescription{\n    width:100%;\n    font-size: 14px;\n    color:rgb(136,136,136);\n    height:fit-content;\n}\n#divider{\n    font-size:18px;\n    font-weight:bold;\n    margin-left:15px;\n    line-height:18px;\n    height:30px;\n    padding-top:6px;\n}\n /*Novel Editor End*/\n</style>"]},"metadata":{},"sourceType":"module"}