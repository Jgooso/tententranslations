{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport tagBox from '../components/TagBox';\nimport GenreSelector from '../components/GenreSelector';\nimport TagSelector from '../components/TagSelector';\nexport default {\n  data() {\n    return {\n      genres: [],\n      tags: [],\n      selectedtags: [],\n      selectedgenres: []\n    };\n  },\n\n  components: {\n    tagBox,\n    GenreSelector,\n    TagSelector\n  },\n  methods: {\n    postData() {\n      const loadingscreen = document.getElementById('loadingscreen');\n      loadingscreen.style.display = 'block';\n      const url = document.getElementById('urltextbox').value;\n      const genres = document.getElementsByClassName('genrecheckbox');\n      var selectedGenres = [];\n\n      for (var i = 0; i < genres.length; i++) {\n        if (genres[i].checked == true) {\n          selectedGenres.push(genres[i].value);\n        }\n      }\n\n      console.log('posted');\n      getAPI.post('/novel/single', {\n        url: url,\n        tags: this.selectedtags,\n        genres: selectedGenres\n      }).then(function (response) {\n        console.log(response);\n        loadingscreen.style.display = 'none';\n      }).catch(function (error) {\n        console.log(error);\n        loadingscreen.style.display = 'none';\n      });\n    },\n\n    showFile() {\n      files = document.getElementById('cover-image').files;\n      console.log();\n    }\n\n  },\n\n  created() {\n    getAPI.get('/uploaddata').then(response => {\n      console.log('Descriptor API has recieved data');\n      this.genres = response.data['genres'];\n      this.tags = response.data['tags'];\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":"AAuBA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,eAAc;EACVC,IAAI,GAAE;IACF,OAAM;MACFC,MAAM,EAAC,EADL;MAEFC,IAAI,EAAC,EAFH;MAGFC,YAAY,EAAC,EAHX;MAIFC,cAAc,EAAC;IAJb,CAAN;EAMH,CARS;;EASVC,UAAU,EAAC;IACPR,MADO;IAEPC,aAFO;IAGPC;EAHO,CATD;EAcdO,OAAO,EAAC;IACAC,QAAQ,GAAE;MACN,MAAMC,aAAY,GAAIC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAtB;MACAF,aAAa,CAACG,KAAd,CAAoBC,OAApB,GAA8B,OAA9B;MACA,MAAMC,GAAE,GAAIJ,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCI,KAAlD;MACA,MAAMb,MAAK,GAAIQ,QAAQ,CAACM,sBAAT,CAAgC,eAAhC,CAAf;MACA,IAAIC,cAAa,GAAI,EAArB;;MACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,IAAIhB,MAAM,CAACiB,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;QAChC,IAAGhB,MAAM,CAACgB,CAAD,CAAN,CAAUE,OAAV,IAAmB,IAAtB,EAA2B;UACvBH,cAAc,CAACI,IAAf,CAAoBnB,MAAM,CAACgB,CAAD,CAAN,CAAUH,KAA9B;QACJ;MACJ;;MACAO,OAAO,CAACC,GAAR,CAAY,QAAZ;MACA1B,MAAM,CAAC2B,IAAP,CAAY,eAAZ,EAA6B;QAACV,GAAG,EAACA,GAAL;QAASX,IAAI,EAAC,KAAKC,YAAnB;QAAgCF,MAAM,EAACe;MAAvC,CAA7B,EACKQ,IADL,CACU,UAAUC,QAAV,EAAoB;QACtBJ,OAAO,CAACC,GAAR,CAAYG,QAAZ;QACAjB,aAAa,CAACG,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;MACP,CAJD,EAKKc,KALL,CAKW,UAAUC,KAAV,EAAiB;QACpBN,OAAO,CAACC,GAAR,CAAYK,KAAZ;QACAnB,aAAa,CAACG,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;MACP,CARD;IASH,CAtBD;;IAuBAgB,QAAQ,GAAE;MACNC,KAAI,GAAIpB,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCmB,KAA/C;MACAR,OAAO,CAACC,GAAR;IACJ;;EA1BA,CAdM;;EA0CVQ,OAAO,GAAE;IACLlC,MAAM,CAACmC,GAAP,CAAW,aAAX,EACGP,IADH,CACQC,QAAO,IAAK;MAChBJ,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACA,KAAKrB,MAAL,GAAcwB,QAAQ,CAACzB,IAAT,CAAc,QAAd,CAAd;MACA,KAAKE,IAAL,GAAYuB,QAAQ,CAACzB,IAAT,CAAc,MAAd,CAAZ;IACD,CALH,EAMG0B,KANH,CAMSM,GAAE,IAAK;MACZX,OAAO,CAACC,GAAR,CAAYU,GAAZ;IACD,CARH;EAUJ;;AArDU,CAAd","names":["getAPI","tagBox","GenreSelector","TagSelector","data","genres","tags","selectedtags","selectedgenres","components","methods","postData","loadingscreen","document","getElementById","style","display","url","value","getElementsByClassName","selectedGenres","i","length","checked","push","console","log","post","then","response","catch","error","showFile","files","created","get","err"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Upload.vue"],"sourcesContent":["<template>\n<div id = 'download'>\n    <div id = 'loadingscreen'><div class=\"loader\"></div></div>\n    <label for=\"fname\">URL:\n        <input type = \"text\" id = 'urltextbox' name = 'url' maxlength=\"34\" style='width:280px' >\n    </label>\n    <input type=\"file\"\n       id=\"cover-image\" name=\"cover_image\"\n       accept=\"image/png, image/jpeg\" @onchange='showFile()'>\n    <GenreSelector\n    :genres='genres'\n    :selectedgenres='selectedgenres'\n    />\n    <br><br>\n    <input type = 'submit' @click='postData()'>\n    <TagSelector\n    :tags='tags'\n    :selectedtags='selectedtags'\n    />\n</div>\n\n</template>\n<script>\nimport { getAPI } from '../axios-api'\nimport tagBox from '../components/TagBox'\nimport GenreSelector from '../components/GenreSelector'\nimport TagSelector from '../components/TagSelector'\nexport default{\n    data(){\n        return{\n            genres:[],\n            tags:[],\n            selectedtags:[],\n            selectedgenres:[]\n        }\n    },\n    components:{\n        tagBox,\n        GenreSelector,\n        TagSelector\n    },\nmethods:{\n        postData(){\n            const loadingscreen = document.getElementById('loadingscreen')\n            loadingscreen.style.display = 'block'\n            const url = document.getElementById('urltextbox').value;\n            const genres = document.getElementsByClassName('genrecheckbox')\n            var selectedGenres = []\n            for(var i=0; i < genres.length; i++){\n                if(genres[i].checked==true){\n                    selectedGenres.push(genres[i].value)\n                }\n            }\n            console.log('posted')\n            getAPI.post('/novel/single', {url:url,tags:this.selectedtags,genres:selectedGenres})\n                .then(function (response) {\n                    console.log(response);\n                    loadingscreen.style.display = 'none'\n            })\n                .catch(function (error) {\n                    console.log(error);\n                    loadingscreen.style.display = 'none'\n            }); \n        },\n        showFile(){\n            files = document.getElementById('cover-image').files\n            console.log()\n        }\n    },\n    created(){\n        getAPI.get('/uploaddata')\n          .then(response => {\n            console.log('Descriptor API has recieved data')\n            this.genres = response.data['genres']\n            this.tags = response.data['tags']\n          })\n          .catch(err => {\n            console.log(err)\n          })\n          \n    }\n}\n</script>\n<style scoped>\nbutton{\n    background:none;\n    border-right:none\n}\n\ninput{\n    margin-right:5px;\n}\n#download{\n    width:100%;\n    height:fit-content;\n}\n.loader {\n  border: 16px solid #f3f3f3; /* Light grey */\n  border-top: 16px solid #3498db; /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  margin:auto;\n  margin-top:170px;\n\n}\n#loadingscreen{\n    display:none;\n    position:absolute;\n    z-index:5;\n    width:100%;\n    height:100%;\n    background-color:rgba(0,0,0,0.5)\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n@media (max-width: 775px) {\n    #genres{\n        grid-template-rows: auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto;\n        width:300px;\n        margin-left:20px;\n    }\n    #tagList{\n        width:350px;\n    }\n    #tagselector{\n        width:350px;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}