{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport tagBox from '../components/TagBox';\nimport GenreSelector from '../components/GenreSelector';\nimport TagSelector from '../components/TagSelector';\nexport default {\n  data() {\n    return {\n      genres: [],\n      tags: [],\n      selectedtags: [],\n      selectedgenres: [],\n      image: []\n    };\n  },\n\n  components: {\n    tagBox,\n    GenreSelector,\n    TagSelector\n  },\n  methods: {\n    postData() {\n      const loadingscreen = document.getElementById('loadingscreen');\n      loadingscreen.style.display = 'block';\n      const url = document.getElementById('urltextbox').value;\n      const genres = document.getElementsByClassName('genrecheckbox');\n      const files = document.getElementById('cover-image').files;\n      var selectedGenres = [];\n      var image = document.getElementById('output');\n      const upload = URL.createObjectURL(files[0]);\n      console.log(upload);\n\n      for (var i = 0; i < genres.length; i++) {\n        if (genres[i].checked == true) {\n          selectedGenres.push(genres[i].value);\n        }\n      }\n\n      console.log('posted');\n      getAPI.post('/novel/single', {\n        url: url,\n        tags: this.selectedtags,\n        genres: selectedGenres,\n        image: upload\n      }).then(function (response) {\n        console.log(response);\n        loadingscreen.style.display = 'none';\n      }).catch(function (error) {\n        console.log(error);\n        loadingscreen.style.display = 'none';\n      });\n    },\n\n    showFile() {\n      /*\n      const file = document.getElementById('cover-image').files[0]\n      var image = document.getElementById('output')\n      //image.src = URL.createObjectURL(file);\n      console.log(file)\n      console.log(image.src)\n      let data = new FormData()\n      data.append('file', file, file.name)\n      /*\n      getAPI.post('/test',data, {headers: {\"Content-Type\": \"multipart/form-data\"}}).then((res) => {\n          console.log(res);\n      })\n      .catch((err) => {\n          console.log(err);\n      })\n      */\n    },\n\n    showGenres() {\n      var genre_selector = document.getElementById('genre-selector');\n      document.getElementById('tag-selector').style.display = 'none';\n\n      if (genre_selector.style.display == 'flex') {\n        genre_selector.style.display = 'none';\n      } else {\n        genre_selector.style.display = 'flex';\n      }\n    },\n\n    showTags() {\n      var tag_selector = document.getElementById('tag-selector');\n      document.getElementById('genre-selector').style.display = 'none';\n\n      if (tag_selector.style.display == 'flex') {\n        tag_selector.style.display = 'none';\n      } else {\n        tag_selector.style.display = 'flex';\n      }\n    }\n\n  },\n\n  created() {\n    getAPI.get('/uploaddata').then(response => {\n      console.log('Descriptor API has recieved data');\n      this.genres = response.data['genres'];\n      this.tags = response.data['tags'];\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","tagBox","GenreSelector","TagSelector","data","genres","tags","selectedtags","selectedgenres","image","components","methods","postData","loadingscreen","document","getElementById","style","display","url","value","getElementsByClassName","files","selectedGenres","upload","URL","createObjectURL","console","log","i","length","checked","push","post","then","response","catch","error","showFile","showGenres","genre_selector","showTags","tag_selector","created","get","err"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Upload.vue"],"sourcesContent":["<template>\n<div id = 'download'>\n    <div id = 'loadingscreen'><div class=\"loader\"></div></div>\n    <div id = 'upload'>\n        <div id = 'upload_tables'>\n            <div  id = 'image-border'>\n            <img src='#'>\n            </div>\n            <table>\n                <tr>\n                    <td class='category'>Views</td>\n                    <td class = 'info  unselectable'>0</td>\n                </tr>\n                <tr>\n                    <td class='category'>Alternative</td>\n                    <td class='info  unselectable'>後で記入する</td>\n                </tr>\n                <tr>\n                    <td class='category'>URL</td>\n                    <td class='info'><input type = \"url\" id = 'urltextbox' name = 'url' maxlength=\"34\" style='border:none;' placeholder='Enter novel URL'></td>\n                </tr>\n                <tr>\n                    <td class = 'category'>Authors</td>\n                    <td class='info'>Author-san</td>\n                </tr>\n                <tr>\n                    <td class='category'>Genres</td>\n                    <td  @click='showGenres()' class='info' v-if='selectedgenres.length>0'>{{selectedgenres}}</td>\n                    <td v-else style='color:red'  @click='showGenres()' class='info'>Select Genres</td>\n                </tr>\n                <tr>\n                    <td class='category'>Tags</td>\n                    <td @click='showTags()' class='info'  v-if='selectedtags.length>0'></td>\n                    <td v-else style='color:red'  @click='showTags()' class='info'>Select Tags</td>\n                    </tr>\n            </table>\n            <table>\n                <tr>\n                    <td class='category'>Release</td>\n                    <td class='info unselectable'>20XX</td>\n                </tr>\n                <tr>\n                    <td class='category'>Status</td>\n                    <td class='info'>Unreleased</td>\n                </tr>\n                <tr>\n                    <td class='category'>Novel</td>\n                    <td class='info'>\n                        <select id = 'completedEdit' placeholder='SELECT' style='color:red;' onfocus='this.style.color=\"rgb(136,136,136)\"'>\n                            <option value=\"\" disabled selected>Select your option</option>\n                            <option value = 'Ongoing'>Ongoing</option>\n                            <option value = 'Completed'>Completed</option>\n                            <option value = 'On Hold'>On Hold</option>\n                            <option value = 'Dropped'>Dropped</option>\n                        </select>\n                     </td>\n                </tr>\n       \n            </table>\n        </div>\n        <div id = 'genre-selector'>\n             <GenreSelector\n                :genres='genres'\n                :selectedgenres='selectedgenres'\n                \n                />\n        </div>\n        <TagSelector\n            :tags='tags'\n            :selectedtags='selectedtags'\n            id = 'tag-selector'\n        />\n    </div>\n    <input type = 'submit' @click='postData()'>\n    \n\n</div>\n</template>\n<script>\nimport { getAPI } from '../axios-api'\nimport tagBox from '../components/TagBox'\nimport GenreSelector from '../components/GenreSelector'\nimport TagSelector from '../components/TagSelector'\nexport default{\n    data(){\n        return{\n            genres:[],\n            tags:[],\n            selectedtags:[],\n            selectedgenres:[],\n            image:[]\n        }\n    },\n    components:{\n        tagBox,\n        GenreSelector,\n        TagSelector\n    },\nmethods:{\n        postData(){\n            const loadingscreen = document.getElementById('loadingscreen')\n            loadingscreen.style.display = 'block'\n            const url = document.getElementById('urltextbox').value;\n            const genres = document.getElementsByClassName('genrecheckbox')\n            const files = document.getElementById('cover-image').files\n            var selectedGenres = []\n            var image = document.getElementById('output');\n\t        const upload = URL.createObjectURL(files[0]);\n            console.log(upload)\n            for(var i=0; i < genres.length; i++){\n                if(genres[i].checked==true){\n                    selectedGenres.push(genres[i].value)\n                }\n            }\n            console.log('posted')\n            getAPI.post('/novel/single', {url:url,tags:this.selectedtags,genres:selectedGenres,image:upload})\n                .then(function (response) {\n                    console.log(response);\n                    loadingscreen.style.display = 'none'\n            })\n                .catch(function (error) {\n                    console.log(error);\n                    loadingscreen.style.display = 'none'\n            }); \n        },\n        showFile(){\n            /*\n            const file = document.getElementById('cover-image').files[0]\n            var image = document.getElementById('output')\n\t        //image.src = URL.createObjectURL(file);\n            console.log(file)\n            console.log(image.src)\n            let data = new FormData()\n            data.append('file', file, file.name)\n            /*\n            getAPI.post('/test',data, {headers: {\"Content-Type\": \"multipart/form-data\"}}).then((res) => {\n                console.log(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n            */\n\n            \n        },\n        showGenres(){\n            var genre_selector = document.getElementById('genre-selector')\n            document.getElementById('tag-selector').style.display='none'\n            if(genre_selector.style.display=='flex'){\n                genre_selector.style.display = 'none'\n            }else{\n                genre_selector.style.display = 'flex'\n            }\n        },\n        showTags(){\n            var tag_selector = document.getElementById('tag-selector')\n            document.getElementById('genre-selector').style.display='none'\n            if(tag_selector.style.display=='flex'){\n                tag_selector.style.display = 'none'\n            }else{\n                tag_selector.style.display = 'flex'\n            }\n        },\n    },\n    created(){\n        getAPI.get('/uploaddata')\n          .then(response => {\n            console.log('Descriptor API has recieved data')\n            this.genres = response.data['genres']\n            this.tags = response.data['tags']\n          })\n          .catch(err => {\n            console.log(err)\n          })\n          \n    }\n}\n</script>\n<style scoped>\ntable{\n    height:fit-content;\n}\nbutton{\n    background:none;\n    border-right:none\n}\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: red;\n  opacity: 1; /* Firefox */\n}\n#upload{\n    box-shadow: 0 4px 8px 0 var(--shadowColor), 0 6px 20px 0 var(--shadowColor);\n     border-radius:20px;\n     padding:20px;\n}\ninput{\n    margin-right:5px;\n}\n.unselectable{\n      font-size:14px;\n      color:rgb(136,136,136);\n  }\n#download{\n    width:100%;\n    height:fit-content;\n}\n#genre-selector{\n    display:none;\n}\n#tag-selector{\n    display:none;\n}\n.loader {\n  border: 16px solid #f3f3f3; /* Light grey */\n  border-top: 16px solid #3498db; /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  margin:auto;\n  margin-top:170px;\n\n}\n#loadingscreen{\n    display:none;\n    position:absolute;\n    z-index:5;\n    width:100%;\n    height:100%;\n    background-color:rgba(0,0,0,0.5)\n}\n#upload_tables{\n    display:flex;\n    flex-direction:row;\n}\n.category{\n    font-weight: bold;\n      padding-bottom: 10px;\n      padding-right:20px;\n      width:15%;\n      min-width:125px;\n      vertical-align: top;\n      color:black;\n   \n}\n#completedEdit{\n     background-color:transparent;\n    border:none;\n    appearance: none;\n}\n.info{\n    font-weight:normal;\n      width: 85%;\n      line-height: 20px;\n      font-size:14px;\n      vertical-align:top;\n}\n#image-border{\n    height:300px;\n    border:1px solid black;\n    border-radius:10px;\n    background-color: var(--backgroundColor));\n    float:left;\n    transition: all .2s ease;\n    overflow:hidden;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n@media (max-width: 775px) {\n    #genres{\n        grid-template-rows: auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto;\n        width:300px;\n        margin-left:20px;\n    }\n    #tagList{\n        width:350px;\n    }\n    #tagselector{\n        width:350px;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}