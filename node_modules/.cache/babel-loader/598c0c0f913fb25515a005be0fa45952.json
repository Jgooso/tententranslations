{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { getAPI } from '../axios-api';\nimport NovelCard from '../components/NovelCard';\nimport UtfBox from '../components/UtfBox';\nexport default {\n  name: 'Browser',\n  components: {\n    NovelCard,\n    UtfBox\n  },\n\n  data() {\n    return {\n      novelData: [],\n      chapterList: [],\n      attributesort: 'lastupload',\n      page: 1,\n      pageCount: 0,\n      novelCount: 0\n    };\n  },\n\n  props: ['tier'],\n  methods: {\n    getNovels(identifier) {\n      if (identifier != undefined) {\n        identifier = identifier.replace(/&nbsp;/g, '|');\n      }\n\n      const url = '/novel/multiple?tier=' + this.tier + '&identifier=' + identifier + '&order=' + this.attributesort + '&page=' + this.page;\n      console.log(identifier);\n      getAPI.get(url).then(response => {\n        console.log('Post API has recieved data');\n        this.novelData = response.data;\n        console.log(this.novelData[0]);\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n\n    sort(p) {\n      const selected = document.getElementsByClassName('selected');\n      this.attributesort = p;\n\n      for (var i = 0; i < selected.length; i++) {\n        selected[i].classList.remove('selected');\n      }\n\n      document.getElementById('sort-' + p).classList.add('selected');\n      console.log(p);\n      this.getNovels(this.$route.params.identifier);\n    },\n\n    changePage(change) {\n      this.page = this.page + change;\n      this.getNovels(this.$route.params.identifier);\n    },\n\n    getPages(identifier) {\n      getAPI.get('/novels-page-count?tier=' + this.tier + '&identifier=' + identifier).then(response => {\n        console.log('Post API has recieved data');\n        console.log(response.data);\n        this.pageCount = response.data['page_count'];\n        this.novelCount = response.data['novel_count'];\n        this.getNovels(identifier);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n  },\n\n  created() {\n    var identifier = this.$route.params.identifier;\n    console.log(identifier);\n    this.getPages(identifier);\n    this.$watch(() => this.$route.params, (toParams, previousParams) => {\n      // react to route changes...\n      var identifier = this.$route.params.identifier;\n      console.log(identifier);\n\n      if (identifier != undefined) {\n        identifier = identifier.replace(/&nbsp;/g, '|');\n      }\n\n      if (Object.keys(previousParams).includes('browsetype') && Object.keys(toParams).length == 0) {\n        const selected = document.getElementsByClassName('selected');\n        this.getNovels(identifier);\n        this.getPages(identifier);\n\n        for (var i = 0; i < selected.length; i++) {\n          selected[i].classList.remove('selected');\n        }\n      }\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","NovelCard","UtfBox","name","components","data","novelData","chapterList","attributesort","page","pageCount","novelCount","props","methods","getNovels","identifier","undefined","replace","url","tier","console","log","get","then","response","catch","err","sort","p","selected","document","getElementsByClassName","i","length","classList","remove","getElementById","add","$route","params","changePage","change","getPages","created","$watch","toParams","previousParams","Object","keys","includes"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Browse.vue"],"sourcesContent":["<template>\n<div id = 'Browse' >\n\n    <h1 id = 'sortCategory' v-html='this.$route.params.identifier ? this.$route.params.identifier : \"All Novels\"'/>\n\n    <header id = 'top'>\n        <div id = 'count'>\n            <UtfBox shape = '&#9733;'/>\n            <p id = 'resultCount'>{{novelCount}} RESULTS</p>\n            <label class = 'category'> Order By</label>\n        </div>\n\n        <div id = 'sortButtons'>\n            <input type='button' class = 'category' @click='sort(\"lastupload\")' value = 'Latest' id = 'sort-lastupload'>\n            <input type ='button' class = 'category' @click='sort(\"title\")' value = 'A-Z' id = 'sort-title'>\n            <input type ='button' class = 'category' @click='sort(\"length\")' value = 'Length' id = 'sort-length'>\n            <input type ='button' class = 'category' @click='sort(\"views\")' value = 'Trending' id = 'sort-views'>\n            <input type ='button' class = 'category' @click='sort(\"firstupload\")' value = 'New' id = 'sort-firstupload'>\n            <h6 id = 'pageNumber'>Page {{page}} of {{(pageCount)}}</h6>\n        </div>\n        \n    </header>\n\n    <div class = \"novelList\">\n        <div v-for='novel in novelData' :key = 'novel.title' id = 'novels'>\n            <NovelCard \n                :novelData='novel'\n                type=\"browse\"\n                class = 'novelcard'\n                />\n        </div>\n    </div>\n    <div id = 'pageNav'>\n    <button v-if='page > 1' class = 'navigationButton'  id = 'prev' @click='changePage(-1)'>&#8592;Previous Page</button>\n    <button v-if='page < pageCount' class = 'navigationButton' id = 'next' @click='changePage(1)'>Next Page&#8594;</button>\n    </div>\n</div>\n</template>\n\n<script>\nimport { getAPI } from '../axios-api'\nimport NovelCard from '../components/NovelCard'\nimport UtfBox from '../components/UtfBox'\n    export default{\n        name: 'Browser',\n        components:{\n            NovelCard,\n            UtfBox,\n        },\n        data(){\n            return{\n            novelData:[],\n            chapterList:[],\n            attributesort:'lastupload',\n            page:1,\n            pageCount:0,\n            novelCount:0,\n            }\n        },\n        props:[\n            'tier'\n        ],\n        methods:{\n        getNovels(identifier){  \n            if(identifier != undefined){\n                identifier = identifier.replace(/&nbsp;/g,'|')\n            }\n        const url = '/novel/multiple?tier='+this.tier+'&identifier='+identifier+'&order='+this.attributesort+'&page='+this.page\n        console.log(identifier)\n       getAPI.get(url)\n          .then(response => {\n            console.log('Post API has recieved data')\n            this.novelData=response.data\n            console.log(this.novelData[0])\n          })\n          .catch(err => {\n            console.log(err)\n          })\n        },\n        sort(p){\n            const selected = document.getElementsByClassName('selected')\n            this.attributesort = p\n            for(var i=0; i < selected.length; i++){\n                selected[i].classList.remove('selected')\n            }\n            document.getElementById('sort-'+p).classList.add('selected')\n            console.log(p)\n            this.getNovels(this.$route.params.identifier)\n        },\n        changePage(change){\n            this.page = this.page + change\n            this.getNovels(this.$route.params.identifier)\n        },\n        getPages(identifier){\n            getAPI.get('/novels-page-count?tier='+this.tier+'&identifier='+identifier)\n                .then(response => {\n                    console.log('Post API has recieved data')\n                    console.log(response.data)\n                    this.pageCount = response.data['page_count']\n                    this.novelCount = response.data['novel_count']\n                    this.getNovels(identifier)  \n                })\n                .catch(err => {\n                    console.log(err)\n                })\n        }\n        \n    },\n    created(){\n        var identifier = this.$route.params.identifier\n            console.log(identifier)\n        this.getPages(identifier)\n        this.$watch(\n      () => this.$route.params,\n      (toParams, previousParams) => {\n        // react to route changes...\n            var identifier = this.$route.params.identifier\n            console.log(identifier)\n            if(identifier != undefined){\n                identifier = identifier.replace(/&nbsp;/g,'|')\n            }\n            if(Object.keys(previousParams).includes('browsetype') && Object.keys(toParams).length == 0){\n                const selected = document.getElementsByClassName('selected')\n                this.getNovels(identifier)\n                this.getPages(identifier)\n                for(var i=0; i < selected.length; i++){\n                selected[i].classList.remove('selected')\n            }\n            }\n      }\n    )     \n    \n    }\n    \n    }\n</script>\n\n<style scoped>\n#Browse{\n    width:100%;\n}\n#novels{\n    display:flex;\n    flex-direction:row;\n}\n#top{\n    display:flex;\n    flex-direction:row;\n    border-bottom:gray 2px solid;\n    margin-bottom:30px;\n    position:relative;\n    height:37px;\n    \n}\n.novelList{\n   display: grid;\n   grid-template-columns: auto auto auto auto;\n   margin:auto;\n   height:fit-content;\n    transition: all .3s ease;\n     /*box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2) inset , 0 6px 20px 0 rgba(0, 0, 0, 0.19) inset;*/\n     padding:10px;\n \n}\n#count{\n    width:275px;\n    display:flex;\n    flex-direction:row;\n}\n#sortButtons{\n    width:100%;\n    display:block;\n}\n#pageNumber{\n    position:relative;\n    vertical-align: middle;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    padding-top:4px;\n    font-size:15px;\n    min-width:75px;\n    float:right;\n    margin-right:30px;\n}\n.category{\n    background:none;\n    border:none;\n    color:gray;\n    position:relative;\n    margin-bottom:-3px;\n    padding-bottom:10px;\n    font-size:15px;\n    min-width:75px;\n}\ninput[type='button'].category:hover{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n}\n\n#sortCategory{\n    font-size:18px;\n    font-weight:bold;\n    margin-bottom:28px;\n    letter-spacing: 0.5px;\n}\n#resultCount{\n    margin-left:20px;\n    font-size:18px;\n    font-weight:600;\n    width:200px;\n}\n.selected{\n    color:var(--styleColor);\n    border-bottom:4px solid var(--styleColor);\n    box-shadow: 0 4px 8px 0 var(--shadowColor), 0 6px 20px 0 var(--shadowColor);\n    transition: all .3s ease;\n}\n.navigationButton{\n    border:none;\n    background:none;\n}\n#next{\n    width:150px;\n    margin-right:30px;\n    float:right;\n}\n#prev{\n    width:150px;\n    float:left;\n    margin-left:30px;\n\n}\n#pageNav{\n    width:100%;\n    display:block;\n}\n@media (max-width: 1200px){\n     .novelList{\n         grid-template-columns: auto auto auto;\n    }\n    #top{\n        flex-direction:column;\n        height: 80px;\n        \n    }\n  }\n@media (max-width: 775px) {\n    .novelList{\n         grid-template-columns: auto;\n    }\n    .novelcard{\n        width:100%;\n    }\n    #top{\n        flex-direction:column;\n        height: 100px;\n        \n    }\n   \n}\n</style>\n"]},"metadata":{},"sourceType":"module"}