{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nconst typedArrayTypeNames = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array'];\n\nfunction isTypedArrayName(name) {\n  return typedArrayTypeNames.includes(name);\n}\n\nconst objectTypeNames = ['Function', 'Generator', 'AsyncGenerator', 'GeneratorFunction', 'AsyncGeneratorFunction', 'AsyncFunction', 'Observable', 'Array', 'Buffer', 'Blob', 'Object', 'RegExp', 'Date', 'Error', 'Map', 'Set', 'WeakMap', 'WeakSet', 'WeakRef', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Promise', 'URL', 'FormData', 'URLSearchParams', 'HTMLElement', 'NaN', ...typedArrayTypeNames];\n\nfunction isObjectTypeName(name) {\n  return objectTypeNames.includes(name);\n}\n\nconst primitiveTypeNames = ['null', 'undefined', 'string', 'number', 'bigint', 'boolean', 'symbol'];\n\nfunction isPrimitiveTypeName(name) {\n  return primitiveTypeNames.includes(name);\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isOfType(type) {\n  return value => typeof value === type;\n}\n\nconst {\n  toString\n} = Object.prototype;\n\nconst getObjectType = value => {\n  const objectTypeName = toString.call(value).slice(8, -1);\n\n  if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n    return 'HTMLElement';\n  }\n\n  if (isObjectTypeName(objectTypeName)) {\n    return objectTypeName;\n  }\n\n  return undefined;\n};\n\nconst isObjectOfType = type => value => getObjectType(value) === type;\n\nfunction is(value) {\n  if (value === null) {\n    return 'null';\n  }\n\n  switch (typeof value) {\n    case 'undefined':\n      return 'undefined';\n\n    case 'string':\n      return 'string';\n\n    case 'number':\n      return Number.isNaN(value) ? 'NaN' : 'number';\n\n    case 'boolean':\n      return 'boolean';\n\n    case 'function':\n      return 'Function';\n\n    case 'bigint':\n      return 'bigint';\n\n    case 'symbol':\n      return 'symbol';\n\n    default:\n  }\n\n  if (is.observable(value)) {\n    return 'Observable';\n  }\n\n  if (is.array(value)) {\n    return 'Array';\n  }\n\n  if (is.buffer(value)) {\n    return 'Buffer';\n  }\n\n  const tagType = getObjectType(value);\n\n  if (tagType) {\n    return tagType;\n  }\n\n  if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n    throw new TypeError('Please don\\'t use object wrappers for primitive types');\n  }\n\n  return 'Object';\n}\n\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\n\nis.number = value => isNumberType(value) && !is.nan(value);\n\nis.bigint = isOfType('bigint'); // eslint-disable-next-line @typescript-eslint/ban-types\n\nis.function_ = isOfType('function'); // eslint-disable-next-line @typescript-eslint/ban-types\n\nis.null_ = value => value === null;\n\nis.class_ = value => is.function_(value) && value.toString().startsWith('class ');\n\nis.boolean = value => value === true || value === false;\n\nis.symbol = isOfType('symbol');\n\nis.numericString = value => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\n\nis.array = (value, assertion) => {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n\n  if (!is.function_(assertion)) {\n    return true;\n  }\n\n  return value.every(element => assertion(element));\n}; // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\n\n\nis.buffer = value => value?.constructor?.isBuffer?.(value) ?? false;\n\nis.blob = value => isObjectOfType('Blob')(value);\n\nis.nullOrUndefined = value => is.null_(value) || is.undefined(value); // eslint-disable-line @typescript-eslint/ban-types\n\n\nis.object = value => !is.null_(value) && (typeof value === 'object' || is.function_(value)); // eslint-disable-line @typescript-eslint/ban-types\n\n\nis.iterable = value => is.function_(value?.[Symbol.iterator]);\n\nis.asyncIterable = value => is.function_(value?.[Symbol.asyncIterator]);\n\nis.generator = value => is.iterable(value) && is.function_(value?.next) && is.function_(value?.throw);\n\nis.asyncGenerator = value => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\n\nis.nativePromise = value => isObjectOfType('Promise')(value);\n\nconst hasPromiseApi = value => is.function_(value?.then) && is.function_(value?.catch);\n\nis.promise = value => is.nativePromise(value) || hasPromiseApi(value);\n\nis.generatorFunction = isObjectOfType('GeneratorFunction');\n\nis.asyncGeneratorFunction = value => getObjectType(value) === 'AsyncGeneratorFunction';\n\nis.asyncFunction = value => getObjectType(value) === 'AsyncFunction'; // eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\n\n\nis.boundFunction = value => is.function_(value) && !value.hasOwnProperty('prototype');\n\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\n\nis.map = value => isObjectOfType('Map')(value);\n\nis.set = value => isObjectOfType('Set')(value);\n\nis.weakMap = value => isObjectOfType('WeakMap')(value); // eslint-disable-line @typescript-eslint/ban-types\n\n\nis.weakSet = value => isObjectOfType('WeakSet')(value); // eslint-disable-line @typescript-eslint/ban-types\n\n\nis.weakRef = value => isObjectOfType('WeakRef')(value); // eslint-disable-line @typescript-eslint/ban-types\n\n\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\n\nis.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);\n\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\n\nis.urlInstance = value => isObjectOfType('URL')(value);\n\nis.urlString = value => {\n  if (!is.string(value)) {\n    return false;\n  }\n\n  try {\n    new URL(value); // eslint-disable-line no-new\n\n    return true;\n  } catch {\n    return false;\n  }\n}; // Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\n\n\nis.truthy = value => Boolean(value); // eslint-disable-line unicorn/prefer-native-coercion-functions\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\n\n\nis.falsy = value => !value;\n\nis.nan = value => Number.isNaN(value);\n\nis.primitive = value => is.null_(value) || isPrimitiveTypeName(typeof value);\n\nis.integer = value => Number.isInteger(value);\n\nis.safeInteger = value => Number.isSafeInteger(value);\n\nis.plainObject = value => {\n  // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n};\n\nis.typedArray = value => isTypedArrayName(getObjectType(value));\n\nconst isValidLength = value => is.safeInteger(value) && value >= 0;\n\nis.arrayLike = value => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\n\nis.inRange = (value, range) => {\n  if (is.number(range)) {\n    return value >= Math.min(0, range) && value <= Math.max(range, 0);\n  }\n\n  if (is.array(range) && range.length === 2) {\n    return value >= Math.min(...range) && value <= Math.max(...range);\n  }\n\n  throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nconst NODE_TYPE_ELEMENT = 1; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nconst DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\n\nis.domElement = value => is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n\nis.observable = value => {\n  if (!value) {\n    return false;\n  } // eslint-disable-next-line no-use-extend-native/no-use-extend-native, @typescript-eslint/no-unsafe-call\n\n\n  if (value === value[Symbol.observable]?.()) {\n    return true;\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\n\n  if (value === value['@@observable']?.()) {\n    return true;\n  }\n\n  return false;\n};\n\nis.nodeStream = value => is.object(value) && is.function_(value.pipe) && !is.observable(value);\n\nis.infinite = value => value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY;\n\nconst isAbsoluteMod2 = remainder => value => is.integer(value) && Math.abs(value % 2) === remainder;\n\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\n\nis.emptyArray = value => is.array(value) && value.length === 0;\n\nis.nonEmptyArray = value => is.array(value) && value.length > 0;\n\nis.emptyString = value => is.string(value) && value.length === 0;\n\nconst isWhiteSpaceString = value => is.string(value) && !/\\S/.test(value);\n\nis.emptyStringOrWhitespace = value => is.emptyString(value) || isWhiteSpaceString(value); // TODO: Use `not ''` when the `not` operator is available.\n\n\nis.nonEmptyString = value => is.string(value) && value.length > 0; // TODO: Use `not ''` when the `not` operator is available.\n\n\nis.nonEmptyStringAndNotWhitespace = value => is.string(value) && !is.emptyStringOrWhitespace(value); // eslint-disable-next-line unicorn/no-array-callback-reference\n\n\nis.emptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0; // TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\n// eslint-disable-next-line unicorn/no-array-callback-reference\n\n\nis.nonEmptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\n\nis.emptySet = value => is.set(value) && value.size === 0;\n\nis.nonEmptySet = value => is.set(value) && value.size > 0; // eslint-disable-next-line unicorn/no-array-callback-reference\n\n\nis.emptyMap = value => is.map(value) && value.size === 0; // eslint-disable-next-line unicorn/no-array-callback-reference\n\n\nis.nonEmptyMap = value => is.map(value) && value.size > 0; // `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\n\n\nis.propertyKey = value => is.any([is.string, is.number, is.symbol], value);\n\nis.formData = value => isObjectOfType('FormData')(value);\n\nis.urlSearchParams = value => isObjectOfType('URLSearchParams')(value);\n\nconst predicateOnArray = (method, predicate, values) => {\n  if (!is.function_(predicate)) {\n    throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n  }\n\n  if (values.length === 0) {\n    throw new TypeError('Invalid number of values');\n  }\n\n  return method.call(values, predicate);\n};\n\nis.any = (predicate, ...values) => {\n  const predicates = is.array(predicate) ? predicate : [predicate];\n  return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\n\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\n\nconst assertType = (condition, description, value, options = {}) => {\n  if (!condition) {\n    const {\n      multipleValues\n    } = options;\n    const valuesMessage = multipleValues ? `received values of types ${[...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``))].join(', ')}` : `received value of type \\`${is(value)}\\``;\n    throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n  }\n};\n/* eslint-disable @typescript-eslint/no-confusing-void-expression */\n\n\nexport const assert = {\n  // Unknowns.\n  undefined: value => assertType(is.undefined(value), 'undefined', value),\n  string: value => assertType(is.string(value), 'string', value),\n  number: value => assertType(is.number(value), 'number', value),\n  bigint: value => assertType(is.bigint(value), 'bigint', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  function_: value => assertType(is.function_(value), 'Function', value),\n  null_: value => assertType(is.null_(value), 'null', value),\n  class_: value => assertType(is.class_(value), \"Class\"\n  /* AssertionTypeDescription.class_ */\n  , value),\n  boolean: value => assertType(is.boolean(value), 'boolean', value),\n  symbol: value => assertType(is.symbol(value), 'symbol', value),\n  numericString: value => assertType(is.numericString(value), \"string with a number\"\n  /* AssertionTypeDescription.numericString */\n  , value),\n  array: (value, assertion) => {\n    const assert = assertType;\n    assert(is.array(value), 'Array', value);\n\n    if (assertion) {\n      // eslint-disable-next-line unicorn/no-array-for-each, unicorn/no-array-callback-reference\n      value.forEach(assertion);\n    }\n  },\n  buffer: value => assertType(is.buffer(value), 'Buffer', value),\n  blob: value => assertType(is.blob(value), 'Blob', value),\n  nullOrUndefined: value => assertType(is.nullOrUndefined(value), \"null or undefined\"\n  /* AssertionTypeDescription.nullOrUndefined */\n  , value),\n  object: value => assertType(is.object(value), 'Object', value),\n  iterable: value => assertType(is.iterable(value), \"Iterable\"\n  /* AssertionTypeDescription.iterable */\n  , value),\n  asyncIterable: value => assertType(is.asyncIterable(value), \"AsyncIterable\"\n  /* AssertionTypeDescription.asyncIterable */\n  , value),\n  generator: value => assertType(is.generator(value), 'Generator', value),\n  asyncGenerator: value => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n  nativePromise: value => assertType(is.nativePromise(value), \"native Promise\"\n  /* AssertionTypeDescription.nativePromise */\n  , value),\n  promise: value => assertType(is.promise(value), 'Promise', value),\n  generatorFunction: value => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n  asyncGeneratorFunction: value => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  asyncFunction: value => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  boundFunction: value => assertType(is.boundFunction(value), 'Function', value),\n  regExp: value => assertType(is.regExp(value), 'RegExp', value),\n  date: value => assertType(is.date(value), 'Date', value),\n  error: value => assertType(is.error(value), 'Error', value),\n  map: value => assertType(is.map(value), 'Map', value),\n  set: value => assertType(is.set(value), 'Set', value),\n  weakMap: value => assertType(is.weakMap(value), 'WeakMap', value),\n  weakSet: value => assertType(is.weakSet(value), 'WeakSet', value),\n  weakRef: value => assertType(is.weakRef(value), 'WeakRef', value),\n  int8Array: value => assertType(is.int8Array(value), 'Int8Array', value),\n  uint8Array: value => assertType(is.uint8Array(value), 'Uint8Array', value),\n  uint8ClampedArray: value => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n  int16Array: value => assertType(is.int16Array(value), 'Int16Array', value),\n  uint16Array: value => assertType(is.uint16Array(value), 'Uint16Array', value),\n  int32Array: value => assertType(is.int32Array(value), 'Int32Array', value),\n  uint32Array: value => assertType(is.uint32Array(value), 'Uint32Array', value),\n  float32Array: value => assertType(is.float32Array(value), 'Float32Array', value),\n  float64Array: value => assertType(is.float64Array(value), 'Float64Array', value),\n  bigInt64Array: value => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n  bigUint64Array: value => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n  arrayBuffer: value => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n  sharedArrayBuffer: value => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n  dataView: value => assertType(is.dataView(value), 'DataView', value),\n  enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), 'EnumCase', value),\n  urlInstance: value => assertType(is.urlInstance(value), 'URL', value),\n  urlString: value => assertType(is.urlString(value), \"string with a URL\"\n  /* AssertionTypeDescription.urlString */\n  , value),\n  truthy: value => assertType(is.truthy(value), \"truthy\"\n  /* AssertionTypeDescription.truthy */\n  , value),\n  falsy: value => assertType(is.falsy(value), \"falsy\"\n  /* AssertionTypeDescription.falsy */\n  , value),\n  nan: value => assertType(is.nan(value), \"NaN\"\n  /* AssertionTypeDescription.nan */\n  , value),\n  primitive: value => assertType(is.primitive(value), \"primitive\"\n  /* AssertionTypeDescription.primitive */\n  , value),\n  integer: value => assertType(is.integer(value), \"integer\"\n  /* AssertionTypeDescription.integer */\n  , value),\n  safeInteger: value => assertType(is.safeInteger(value), \"integer\"\n  /* AssertionTypeDescription.safeInteger */\n  , value),\n  plainObject: value => assertType(is.plainObject(value), \"plain object\"\n  /* AssertionTypeDescription.plainObject */\n  , value),\n  typedArray: value => assertType(is.typedArray(value), \"TypedArray\"\n  /* AssertionTypeDescription.typedArray */\n  , value),\n  arrayLike: value => assertType(is.arrayLike(value), \"array-like\"\n  /* AssertionTypeDescription.arrayLike */\n  , value),\n  domElement: value => assertType(is.domElement(value), \"HTMLElement\"\n  /* AssertionTypeDescription.domElement */\n  , value),\n  observable: value => assertType(is.observable(value), 'Observable', value),\n  nodeStream: value => assertType(is.nodeStream(value), \"Node.js Stream\"\n  /* AssertionTypeDescription.nodeStream */\n  , value),\n  infinite: value => assertType(is.infinite(value), \"infinite number\"\n  /* AssertionTypeDescription.infinite */\n  , value),\n  emptyArray: value => assertType(is.emptyArray(value), \"empty array\"\n  /* AssertionTypeDescription.emptyArray */\n  , value),\n  nonEmptyArray: value => assertType(is.nonEmptyArray(value), \"non-empty array\"\n  /* AssertionTypeDescription.nonEmptyArray */\n  , value),\n  emptyString: value => assertType(is.emptyString(value), \"empty string\"\n  /* AssertionTypeDescription.emptyString */\n  , value),\n  emptyStringOrWhitespace: value => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\"\n  /* AssertionTypeDescription.emptyStringOrWhitespace */\n  , value),\n  nonEmptyString: value => assertType(is.nonEmptyString(value), \"non-empty string\"\n  /* AssertionTypeDescription.nonEmptyString */\n  , value),\n  nonEmptyStringAndNotWhitespace: value => assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\"\n  /* AssertionTypeDescription.nonEmptyStringAndNotWhitespace */\n  , value),\n  emptyObject: value => assertType(is.emptyObject(value), \"empty object\"\n  /* AssertionTypeDescription.emptyObject */\n  , value),\n  nonEmptyObject: value => assertType(is.nonEmptyObject(value), \"non-empty object\"\n  /* AssertionTypeDescription.nonEmptyObject */\n  , value),\n  emptySet: value => assertType(is.emptySet(value), \"empty set\"\n  /* AssertionTypeDescription.emptySet */\n  , value),\n  nonEmptySet: value => assertType(is.nonEmptySet(value), \"non-empty set\"\n  /* AssertionTypeDescription.nonEmptySet */\n  , value),\n  emptyMap: value => assertType(is.emptyMap(value), \"empty map\"\n  /* AssertionTypeDescription.emptyMap */\n  , value),\n  nonEmptyMap: value => assertType(is.nonEmptyMap(value), \"non-empty map\"\n  /* AssertionTypeDescription.nonEmptyMap */\n  , value),\n  propertyKey: value => assertType(is.propertyKey(value), 'PropertyKey', value),\n  formData: value => assertType(is.formData(value), 'FormData', value),\n  urlSearchParams: value => assertType(is.urlSearchParams(value), 'URLSearchParams', value),\n  // Numbers.\n  evenInteger: value => assertType(is.evenInteger(value), \"even integer\"\n  /* AssertionTypeDescription.evenInteger */\n  , value),\n  oddInteger: value => assertType(is.oddInteger(value), \"odd integer\"\n  /* AssertionTypeDescription.oddInteger */\n  , value),\n  // Two arguments.\n  directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\"\n  /* AssertionTypeDescription.directInstanceOf */\n  , instance),\n  inRange: (value, range) => assertType(is.inRange(value, range), \"in range\"\n  /* AssertionTypeDescription.inRange */\n  , value),\n  // Variadic functions.\n  any: (predicate, ...values) => assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\"\n  /* AssertionTypeDescription.any */\n  , values, {\n    multipleValues: true\n  }),\n  all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\"\n  /* AssertionTypeDescription.all */\n  , values, {\n    multipleValues: true\n  })\n};\n/* eslint-enable @typescript-eslint/no-confusing-void-expression */\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\n\nObject.defineProperties(is, {\n  class: {\n    value: is.class_\n  },\n  function: {\n    value: is.function_\n  },\n  null: {\n    value: is.null_\n  }\n});\nObject.defineProperties(assert, {\n  class: {\n    value: assert.class_\n  },\n  function: {\n    value: assert.function_\n  },\n  null: {\n    value: assert.null_\n  }\n});\nexport default is;","map":{"version":3,"names":["typedArrayTypeNames","isTypedArrayName","name","includes","objectTypeNames","isObjectTypeName","primitiveTypeNames","isPrimitiveTypeName","isOfType","type","value","toString","Object","prototype","getObjectType","objectTypeName","call","slice","test","is","domElement","undefined","isObjectOfType","Number","isNaN","observable","array","buffer","tagType","String","Boolean","TypeError","string","isNumberType","number","nan","bigint","function_","null_","class_","startsWith","boolean","symbol","numericString","emptyStringOrWhitespace","assertion","Array","isArray","every","element","constructor","isBuffer","blob","nullOrUndefined","object","iterable","Symbol","iterator","asyncIterable","asyncIterator","generator","next","throw","asyncGenerator","nativePromise","hasPromiseApi","then","catch","promise","generatorFunction","asyncGeneratorFunction","asyncFunction","boundFunction","hasOwnProperty","regExp","date","error","map","set","weakMap","weakSet","weakRef","int8Array","uint8Array","uint8ClampedArray","int16Array","uint16Array","int32Array","uint32Array","float32Array","float64Array","bigInt64Array","bigUint64Array","arrayBuffer","sharedArrayBuffer","dataView","enumCase","targetEnum","values","directInstanceOf","instance","getPrototypeOf","urlInstance","urlString","URL","truthy","falsy","primitive","integer","isInteger","safeInteger","isSafeInteger","plainObject","toStringTag","typedArray","isValidLength","arrayLike","length","inRange","range","Math","min","max","JSON","stringify","NODE_TYPE_ELEMENT","DOM_PROPERTIES_TO_CHECK","nodeType","nodeName","property","nodeStream","pipe","infinite","POSITIVE_INFINITY","NEGATIVE_INFINITY","isAbsoluteMod2","remainder","abs","evenInteger","oddInteger","emptyArray","nonEmptyArray","emptyString","isWhiteSpaceString","nonEmptyString","nonEmptyStringAndNotWhitespace","emptyObject","keys","nonEmptyObject","emptySet","size","nonEmptySet","emptyMap","nonEmptyMap","propertyKey","any","formData","urlSearchParams","predicateOnArray","method","predicate","predicates","some","singlePredicate","all","assertType","condition","description","options","multipleValues","valuesMessage","Set","singleValue","join","assert","forEach","defineProperties","class","function","null"],"sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/node_modules/ipify/node_modules/@sindresorhus/is/dist/index.js"],"sourcesContent":["const typedArrayTypeNames = [\n    'Int8Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Int16Array',\n    'Uint16Array',\n    'Int32Array',\n    'Uint32Array',\n    'Float32Array',\n    'Float64Array',\n    'BigInt64Array',\n    'BigUint64Array',\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    'Function',\n    'Generator',\n    'AsyncGenerator',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction',\n    'AsyncFunction',\n    'Observable',\n    'Array',\n    'Buffer',\n    'Blob',\n    'Object',\n    'RegExp',\n    'Date',\n    'Error',\n    'Map',\n    'Set',\n    'WeakMap',\n    'WeakSet',\n    'WeakRef',\n    'ArrayBuffer',\n    'SharedArrayBuffer',\n    'DataView',\n    'Promise',\n    'URL',\n    'FormData',\n    'URLSearchParams',\n    'HTMLElement',\n    'NaN',\n    ...typedArrayTypeNames,\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    'null',\n    'undefined',\n    'string',\n    'number',\n    'bigint',\n    'boolean',\n    'symbol',\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n    return (value) => typeof value === type;\n}\nconst { toString } = Object.prototype;\nconst getObjectType = (value) => {\n    const objectTypeName = toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n        return 'HTMLElement';\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nconst isObjectOfType = (type) => (value) => getObjectType(value) === type;\nfunction is(value) {\n    if (value === null) {\n        return 'null';\n    }\n    switch (typeof value) {\n        case 'undefined':\n            return 'undefined';\n        case 'string':\n            return 'string';\n        case 'number':\n            return Number.isNaN(value) ? 'NaN' : 'number';\n        case 'boolean':\n            return 'boolean';\n        case 'function':\n            return 'Function';\n        case 'bigint':\n            return 'bigint';\n        case 'symbol':\n            return 'symbol';\n        default:\n    }\n    if (is.observable(value)) {\n        return 'Observable';\n    }\n    if (is.array(value)) {\n        return 'Array';\n    }\n    if (is.buffer(value)) {\n        return 'Buffer';\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\nis.number = (value) => isNumberType(value) && !is.nan(value);\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.null_ = (value) => value === null;\nis.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');\nis.boolean = (value) => value === true || value === false;\nis.symbol = isOfType('symbol');\nis.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion) => {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!is.function_(assertion)) {\n        return true;\n    }\n    return value.every(element => assertion(element));\n};\n// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\nis.buffer = (value) => value?.constructor?.isBuffer?.(value) ?? false;\nis.blob = (value) => isObjectOfType('Blob')(value);\nis.nullOrUndefined = (value) => is.null_(value) || is.undefined(value); // eslint-disable-line @typescript-eslint/ban-types\nis.object = (value) => !is.null_(value) && (typeof value === 'object' || is.function_(value)); // eslint-disable-line @typescript-eslint/ban-types\nis.iterable = (value) => is.function_(value?.[Symbol.iterator]);\nis.asyncIterable = (value) => is.function_(value?.[Symbol.asyncIterator]);\nis.generator = (value) => is.iterable(value) && is.function_(value?.next) && is.function_(value?.throw);\nis.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = (value) => isObjectOfType('Promise')(value);\nconst hasPromiseApi = (value) => is.function_(value?.then)\n    && is.function_(value?.catch);\nis.promise = (value) => is.nativePromise(value) || hasPromiseApi(value);\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = (value) => getObjectType(value) === 'AsyncGeneratorFunction';\nis.asyncFunction = (value) => getObjectType(value) === 'AsyncFunction';\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = (value) => isObjectOfType('Map')(value);\nis.set = (value) => isObjectOfType('Set')(value);\nis.weakMap = (value) => isObjectOfType('WeakMap')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.weakSet = (value) => isObjectOfType('WeakSet')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.weakRef = (value) => isObjectOfType('WeakRef')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\nis.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = (value) => isObjectOfType('URL')(value);\nis.urlString = (value) => {\n    if (!is.string(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    }\n    catch {\n        return false;\n    }\n};\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = (value) => Boolean(value); // eslint-disable-line unicorn/prefer-native-coercion-functions\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = (value) => !value;\nis.nan = (value) => Number.isNaN(value);\nis.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = (value) => Number.isInteger(value);\nis.safeInteger = (value) => Number.isSafeInteger(value);\nis.plainObject = (value) => {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const prototype = Object.getPrototypeOf(value);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n};\nis.typedArray = (value) => isTypedArrayName(getObjectType(value));\nconst isValidLength = (value) => is.safeInteger(value) && value >= 0;\nis.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.inRange = (value, range) => {\n    if (is.number(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (is.array(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst NODE_TYPE_ELEMENT = 1;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst DOM_PROPERTIES_TO_CHECK = [\n    'innerHTML',\n    'ownerDocument',\n    'style',\n    'attributes',\n    'nodeValue',\n];\nis.domElement = (value) => is.object(value)\n    && value.nodeType === NODE_TYPE_ELEMENT\n    && is.string(value.nodeName)\n    && !is.plainObject(value)\n    && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\nis.observable = (value) => {\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native, @typescript-eslint/no-unsafe-call\n    if (value === value[Symbol.observable]?.()) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    if (value === value['@@observable']?.()) {\n        return true;\n    }\n    return false;\n};\nis.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = (value) => value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY;\nconst isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = (value) => is.array(value) && value.length === 0;\nis.nonEmptyArray = (value) => is.array(value) && value.length > 0;\nis.emptyString = (value) => is.string(value) && value.length === 0;\nconst isWhiteSpaceString = (value) => is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = (value) => is.string(value) && value.length > 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyStringAndNotWhitespace = (value) => is.string(value) && !is.emptyStringOrWhitespace(value);\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = (value) => is.set(value) && value.size === 0;\nis.nonEmptySet = (value) => is.set(value) && value.size > 0;\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.emptyMap = (value) => is.map(value) && value.size === 0;\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.nonEmptyMap = (value) => is.map(value) && value.size > 0;\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nis.propertyKey = (value) => is.any([is.string, is.number, is.symbol], value);\nis.formData = (value) => isObjectOfType('FormData')(value);\nis.urlSearchParams = (value) => isObjectOfType('URLSearchParams')(value);\nconst predicateOnArray = (method, predicate, values) => {\n    if (!is.function_(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError('Invalid number of values');\n    }\n    return method.call(values, predicate);\n};\nis.any = (predicate, ...values) => {\n    const predicates = is.array(predicate) ? predicate : [predicate];\n    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value, options = {}) => {\n    if (!condition) {\n        const { multipleValues } = options;\n        const valuesMessage = multipleValues\n            ? `received values of types ${[\n                ...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``)),\n            ].join(', ')}`\n            : `received value of type \\`${is(value)}\\``;\n        throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n    }\n};\n/* eslint-disable @typescript-eslint/no-confusing-void-expression */\nexport const assert = {\n    // Unknowns.\n    undefined: (value) => assertType(is.undefined(value), 'undefined', value),\n    string: (value) => assertType(is.string(value), 'string', value),\n    number: (value) => assertType(is.number(value), 'number', value),\n    bigint: (value) => assertType(is.bigint(value), 'bigint', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function_: (value) => assertType(is.function_(value), 'Function', value),\n    null_: (value) => assertType(is.null_(value), 'null', value),\n    class_: (value) => assertType(is.class_(value), \"Class\" /* AssertionTypeDescription.class_ */, value),\n    boolean: (value) => assertType(is.boolean(value), 'boolean', value),\n    symbol: (value) => assertType(is.symbol(value), 'symbol', value),\n    numericString: (value) => assertType(is.numericString(value), \"string with a number\" /* AssertionTypeDescription.numericString */, value),\n    array: (value, assertion) => {\n        const assert = assertType;\n        assert(is.array(value), 'Array', value);\n        if (assertion) {\n            // eslint-disable-next-line unicorn/no-array-for-each, unicorn/no-array-callback-reference\n            value.forEach(assertion);\n        }\n    },\n    buffer: (value) => assertType(is.buffer(value), 'Buffer', value),\n    blob: (value) => assertType(is.blob(value), 'Blob', value),\n    nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), \"null or undefined\" /* AssertionTypeDescription.nullOrUndefined */, value),\n    object: (value) => assertType(is.object(value), 'Object', value),\n    iterable: (value) => assertType(is.iterable(value), \"Iterable\" /* AssertionTypeDescription.iterable */, value),\n    asyncIterable: (value) => assertType(is.asyncIterable(value), \"AsyncIterable\" /* AssertionTypeDescription.asyncIterable */, value),\n    generator: (value) => assertType(is.generator(value), 'Generator', value),\n    asyncGenerator: (value) => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n    nativePromise: (value) => assertType(is.nativePromise(value), \"native Promise\" /* AssertionTypeDescription.nativePromise */, value),\n    promise: (value) => assertType(is.promise(value), 'Promise', value),\n    generatorFunction: (value) => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n    asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    asyncFunction: (value) => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    boundFunction: (value) => assertType(is.boundFunction(value), 'Function', value),\n    regExp: (value) => assertType(is.regExp(value), 'RegExp', value),\n    date: (value) => assertType(is.date(value), 'Date', value),\n    error: (value) => assertType(is.error(value), 'Error', value),\n    map: (value) => assertType(is.map(value), 'Map', value),\n    set: (value) => assertType(is.set(value), 'Set', value),\n    weakMap: (value) => assertType(is.weakMap(value), 'WeakMap', value),\n    weakSet: (value) => assertType(is.weakSet(value), 'WeakSet', value),\n    weakRef: (value) => assertType(is.weakRef(value), 'WeakRef', value),\n    int8Array: (value) => assertType(is.int8Array(value), 'Int8Array', value),\n    uint8Array: (value) => assertType(is.uint8Array(value), 'Uint8Array', value),\n    uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n    int16Array: (value) => assertType(is.int16Array(value), 'Int16Array', value),\n    uint16Array: (value) => assertType(is.uint16Array(value), 'Uint16Array', value),\n    int32Array: (value) => assertType(is.int32Array(value), 'Int32Array', value),\n    uint32Array: (value) => assertType(is.uint32Array(value), 'Uint32Array', value),\n    float32Array: (value) => assertType(is.float32Array(value), 'Float32Array', value),\n    float64Array: (value) => assertType(is.float64Array(value), 'Float64Array', value),\n    bigInt64Array: (value) => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n    bigUint64Array: (value) => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n    arrayBuffer: (value) => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n    sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n    dataView: (value) => assertType(is.dataView(value), 'DataView', value),\n    enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), 'EnumCase', value),\n    urlInstance: (value) => assertType(is.urlInstance(value), 'URL', value),\n    urlString: (value) => assertType(is.urlString(value), \"string with a URL\" /* AssertionTypeDescription.urlString */, value),\n    truthy: (value) => assertType(is.truthy(value), \"truthy\" /* AssertionTypeDescription.truthy */, value),\n    falsy: (value) => assertType(is.falsy(value), \"falsy\" /* AssertionTypeDescription.falsy */, value),\n    nan: (value) => assertType(is.nan(value), \"NaN\" /* AssertionTypeDescription.nan */, value),\n    primitive: (value) => assertType(is.primitive(value), \"primitive\" /* AssertionTypeDescription.primitive */, value),\n    integer: (value) => assertType(is.integer(value), \"integer\" /* AssertionTypeDescription.integer */, value),\n    safeInteger: (value) => assertType(is.safeInteger(value), \"integer\" /* AssertionTypeDescription.safeInteger */, value),\n    plainObject: (value) => assertType(is.plainObject(value), \"plain object\" /* AssertionTypeDescription.plainObject */, value),\n    typedArray: (value) => assertType(is.typedArray(value), \"TypedArray\" /* AssertionTypeDescription.typedArray */, value),\n    arrayLike: (value) => assertType(is.arrayLike(value), \"array-like\" /* AssertionTypeDescription.arrayLike */, value),\n    domElement: (value) => assertType(is.domElement(value), \"HTMLElement\" /* AssertionTypeDescription.domElement */, value),\n    observable: (value) => assertType(is.observable(value), 'Observable', value),\n    nodeStream: (value) => assertType(is.nodeStream(value), \"Node.js Stream\" /* AssertionTypeDescription.nodeStream */, value),\n    infinite: (value) => assertType(is.infinite(value), \"infinite number\" /* AssertionTypeDescription.infinite */, value),\n    emptyArray: (value) => assertType(is.emptyArray(value), \"empty array\" /* AssertionTypeDescription.emptyArray */, value),\n    nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), \"non-empty array\" /* AssertionTypeDescription.nonEmptyArray */, value),\n    emptyString: (value) => assertType(is.emptyString(value), \"empty string\" /* AssertionTypeDescription.emptyString */, value),\n    emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* AssertionTypeDescription.emptyStringOrWhitespace */, value),\n    nonEmptyString: (value) => assertType(is.nonEmptyString(value), \"non-empty string\" /* AssertionTypeDescription.nonEmptyString */, value),\n    nonEmptyStringAndNotWhitespace: (value) => assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\" /* AssertionTypeDescription.nonEmptyStringAndNotWhitespace */, value),\n    emptyObject: (value) => assertType(is.emptyObject(value), \"empty object\" /* AssertionTypeDescription.emptyObject */, value),\n    nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), \"non-empty object\" /* AssertionTypeDescription.nonEmptyObject */, value),\n    emptySet: (value) => assertType(is.emptySet(value), \"empty set\" /* AssertionTypeDescription.emptySet */, value),\n    nonEmptySet: (value) => assertType(is.nonEmptySet(value), \"non-empty set\" /* AssertionTypeDescription.nonEmptySet */, value),\n    emptyMap: (value) => assertType(is.emptyMap(value), \"empty map\" /* AssertionTypeDescription.emptyMap */, value),\n    nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), \"non-empty map\" /* AssertionTypeDescription.nonEmptyMap */, value),\n    propertyKey: (value) => assertType(is.propertyKey(value), 'PropertyKey', value),\n    formData: (value) => assertType(is.formData(value), 'FormData', value),\n    urlSearchParams: (value) => assertType(is.urlSearchParams(value), 'URLSearchParams', value),\n    // Numbers.\n    evenInteger: (value) => assertType(is.evenInteger(value), \"even integer\" /* AssertionTypeDescription.evenInteger */, value),\n    oddInteger: (value) => assertType(is.oddInteger(value), \"odd integer\" /* AssertionTypeDescription.oddInteger */, value),\n    // Two arguments.\n    directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\" /* AssertionTypeDescription.directInstanceOf */, instance),\n    inRange: (value, range) => assertType(is.inRange(value, range), \"in range\" /* AssertionTypeDescription.inRange */, value),\n    // Variadic functions.\n    any: (predicate, ...values) => assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* AssertionTypeDescription.any */, values, { multipleValues: true }),\n    all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* AssertionTypeDescription.all */, values, { multipleValues: true }),\n};\n/* eslint-enable @typescript-eslint/no-confusing-void-expression */\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_,\n    },\n    function: {\n        value: is.function_,\n    },\n    null: {\n        value: is.null_,\n    },\n});\nObject.defineProperties(assert, {\n    class: {\n        value: assert.class_,\n    },\n    function: {\n        value: assert.function_,\n    },\n    null: {\n        value: assert.null_,\n    },\n});\nexport default is;\n"],"mappings":";;AAAA,MAAMA,mBAAmB,GAAG,CACxB,WADwB,EAExB,YAFwB,EAGxB,mBAHwB,EAIxB,YAJwB,EAKxB,aALwB,EAMxB,YANwB,EAOxB,aAPwB,EAQxB,cARwB,EASxB,cATwB,EAUxB,eAVwB,EAWxB,gBAXwB,CAA5B;;AAaA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;EAC5B,OAAOF,mBAAmB,CAACG,QAApB,CAA6BD,IAA7B,CAAP;AACH;;AACD,MAAME,eAAe,GAAG,CACpB,UADoB,EAEpB,WAFoB,EAGpB,gBAHoB,EAIpB,mBAJoB,EAKpB,wBALoB,EAMpB,eANoB,EAOpB,YAPoB,EAQpB,OARoB,EASpB,QAToB,EAUpB,MAVoB,EAWpB,QAXoB,EAYpB,QAZoB,EAapB,MAboB,EAcpB,OAdoB,EAepB,KAfoB,EAgBpB,KAhBoB,EAiBpB,SAjBoB,EAkBpB,SAlBoB,EAmBpB,SAnBoB,EAoBpB,aApBoB,EAqBpB,mBArBoB,EAsBpB,UAtBoB,EAuBpB,SAvBoB,EAwBpB,KAxBoB,EAyBpB,UAzBoB,EA0BpB,iBA1BoB,EA2BpB,aA3BoB,EA4BpB,KA5BoB,EA6BpB,GAAGJ,mBA7BiB,CAAxB;;AA+BA,SAASK,gBAAT,CAA0BH,IAA1B,EAAgC;EAC5B,OAAOE,eAAe,CAACD,QAAhB,CAAyBD,IAAzB,CAAP;AACH;;AACD,MAAMI,kBAAkB,GAAG,CACvB,MADuB,EAEvB,WAFuB,EAGvB,QAHuB,EAIvB,QAJuB,EAKvB,QALuB,EAMvB,SANuB,EAOvB,QAPuB,CAA3B;;AASA,SAASC,mBAAT,CAA6BL,IAA7B,EAAmC;EAC/B,OAAOI,kBAAkB,CAACH,QAAnB,CAA4BD,IAA5B,CAAP;AACH,C,CACD;;;AACA,SAASM,QAAT,CAAkBC,IAAlB,EAAwB;EACpB,OAAQC,KAAD,IAAW,OAAOA,KAAP,KAAiBD,IAAnC;AACH;;AACD,MAAM;EAAEE;AAAF,IAAeC,MAAM,CAACC,SAA5B;;AACA,MAAMC,aAAa,GAAIJ,KAAD,IAAW;EAC7B,MAAMK,cAAc,GAAGJ,QAAQ,CAACK,IAAT,CAAcN,KAAd,EAAqBO,KAArB,CAA2B,CAA3B,EAA8B,CAAC,CAA/B,CAAvB;;EACA,IAAI,iBAAiBC,IAAjB,CAAsBH,cAAtB,KAAyCI,EAAE,CAACC,UAAH,CAAcV,KAAd,CAA7C,EAAmE;IAC/D,OAAO,aAAP;EACH;;EACD,IAAIL,gBAAgB,CAACU,cAAD,CAApB,EAAsC;IAClC,OAAOA,cAAP;EACH;;EACD,OAAOM,SAAP;AACH,CATD;;AAUA,MAAMC,cAAc,GAAIb,IAAD,IAAWC,KAAD,IAAWI,aAAa,CAACJ,KAAD,CAAb,KAAyBD,IAArE;;AACA,SAASU,EAAT,CAAYT,KAAZ,EAAmB;EACf,IAAIA,KAAK,KAAK,IAAd,EAAoB;IAChB,OAAO,MAAP;EACH;;EACD,QAAQ,OAAOA,KAAf;IACI,KAAK,WAAL;MACI,OAAO,WAAP;;IACJ,KAAK,QAAL;MACI,OAAO,QAAP;;IACJ,KAAK,QAAL;MACI,OAAOa,MAAM,CAACC,KAAP,CAAad,KAAb,IAAsB,KAAtB,GAA8B,QAArC;;IACJ,KAAK,SAAL;MACI,OAAO,SAAP;;IACJ,KAAK,UAAL;MACI,OAAO,UAAP;;IACJ,KAAK,QAAL;MACI,OAAO,QAAP;;IACJ,KAAK,QAAL;MACI,OAAO,QAAP;;IACJ;EAfJ;;EAiBA,IAAIS,EAAE,CAACM,UAAH,CAAcf,KAAd,CAAJ,EAA0B;IACtB,OAAO,YAAP;EACH;;EACD,IAAIS,EAAE,CAACO,KAAH,CAAShB,KAAT,CAAJ,EAAqB;IACjB,OAAO,OAAP;EACH;;EACD,IAAIS,EAAE,CAACQ,MAAH,CAAUjB,KAAV,CAAJ,EAAsB;IAClB,OAAO,QAAP;EACH;;EACD,MAAMkB,OAAO,GAAGd,aAAa,CAACJ,KAAD,CAA7B;;EACA,IAAIkB,OAAJ,EAAa;IACT,OAAOA,OAAP;EACH;;EACD,IAAIlB,KAAK,YAAYmB,MAAjB,IAA2BnB,KAAK,YAAYoB,OAA5C,IAAuDpB,KAAK,YAAYa,MAA5E,EAAoF;IAChF,MAAM,IAAIQ,SAAJ,CAAc,uDAAd,CAAN;EACH;;EACD,OAAO,QAAP;AACH;;AACDZ,EAAE,CAACE,SAAH,GAAeb,QAAQ,CAAC,WAAD,CAAvB;AACAW,EAAE,CAACa,MAAH,GAAYxB,QAAQ,CAAC,QAAD,CAApB;AACA,MAAMyB,YAAY,GAAGzB,QAAQ,CAAC,QAAD,CAA7B;;AACAW,EAAE,CAACe,MAAH,GAAaxB,KAAD,IAAWuB,YAAY,CAACvB,KAAD,CAAZ,IAAuB,CAACS,EAAE,CAACgB,GAAH,CAAOzB,KAAP,CAA/C;;AACAS,EAAE,CAACiB,MAAH,GAAY5B,QAAQ,CAAC,QAAD,CAApB,C,CACA;;AACAW,EAAE,CAACkB,SAAH,GAAe7B,QAAQ,CAAC,UAAD,CAAvB,C,CACA;;AACAW,EAAE,CAACmB,KAAH,GAAY5B,KAAD,IAAWA,KAAK,KAAK,IAAhC;;AACAS,EAAE,CAACoB,MAAH,GAAa7B,KAAD,IAAWS,EAAE,CAACkB,SAAH,CAAa3B,KAAb,KAAuBA,KAAK,CAACC,QAAN,GAAiB6B,UAAjB,CAA4B,QAA5B,CAA9C;;AACArB,EAAE,CAACsB,OAAH,GAAc/B,KAAD,IAAWA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAApD;;AACAS,EAAE,CAACuB,MAAH,GAAYlC,QAAQ,CAAC,QAAD,CAApB;;AACAW,EAAE,CAACwB,aAAH,GAAoBjC,KAAD,IAAWS,EAAE,CAACa,MAAH,CAAUtB,KAAV,KAAoB,CAACS,EAAE,CAACyB,uBAAH,CAA2BlC,KAA3B,CAArB,IAA0D,CAACa,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACb,KAAD,CAAnB,CAAzF;;AACAS,EAAE,CAACO,KAAH,GAAW,CAAChB,KAAD,EAAQmC,SAAR,KAAsB;EAC7B,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcrC,KAAd,CAAL,EAA2B;IACvB,OAAO,KAAP;EACH;;EACD,IAAI,CAACS,EAAE,CAACkB,SAAH,CAAaQ,SAAb,CAAL,EAA8B;IAC1B,OAAO,IAAP;EACH;;EACD,OAAOnC,KAAK,CAACsC,KAAN,CAAYC,OAAO,IAAIJ,SAAS,CAACI,OAAD,CAAhC,CAAP;AACH,CARD,C,CASA;;;AACA9B,EAAE,CAACQ,MAAH,GAAajB,KAAD,IAAWA,KAAK,EAAEwC,WAAP,EAAoBC,QAApB,GAA+BzC,KAA/B,KAAyC,KAAhE;;AACAS,EAAE,CAACiC,IAAH,GAAW1C,KAAD,IAAWY,cAAc,CAAC,MAAD,CAAd,CAAuBZ,KAAvB,CAArB;;AACAS,EAAE,CAACkC,eAAH,GAAsB3C,KAAD,IAAWS,EAAE,CAACmB,KAAH,CAAS5B,KAAT,KAAmBS,EAAE,CAACE,SAAH,CAAaX,KAAb,CAAnD,C,CAAwE;;;AACxES,EAAE,CAACmC,MAAH,GAAa5C,KAAD,IAAW,CAACS,EAAE,CAACmB,KAAH,CAAS5B,KAAT,CAAD,KAAqB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BS,EAAE,CAACkB,SAAH,CAAa3B,KAAb,CAAlD,CAAvB,C,CAA+F;;;AAC/FS,EAAE,CAACoC,QAAH,GAAe7C,KAAD,IAAWS,EAAE,CAACkB,SAAH,CAAa3B,KAAK,GAAG8C,MAAM,CAACC,QAAV,CAAlB,CAAzB;;AACAtC,EAAE,CAACuC,aAAH,GAAoBhD,KAAD,IAAWS,EAAE,CAACkB,SAAH,CAAa3B,KAAK,GAAG8C,MAAM,CAACG,aAAV,CAAlB,CAA9B;;AACAxC,EAAE,CAACyC,SAAH,GAAgBlD,KAAD,IAAWS,EAAE,CAACoC,QAAH,CAAY7C,KAAZ,KAAsBS,EAAE,CAACkB,SAAH,CAAa3B,KAAK,EAAEmD,IAApB,CAAtB,IAAmD1C,EAAE,CAACkB,SAAH,CAAa3B,KAAK,EAAEoD,KAApB,CAA7E;;AACA3C,EAAE,CAAC4C,cAAH,GAAqBrD,KAAD,IAAWS,EAAE,CAACuC,aAAH,CAAiBhD,KAAjB,KAA2BS,EAAE,CAACkB,SAAH,CAAa3B,KAAK,CAACmD,IAAnB,CAA3B,IAAuD1C,EAAE,CAACkB,SAAH,CAAa3B,KAAK,CAACoD,KAAnB,CAAtF;;AACA3C,EAAE,CAAC6C,aAAH,GAAoBtD,KAAD,IAAWY,cAAc,CAAC,SAAD,CAAd,CAA0BZ,KAA1B,CAA9B;;AACA,MAAMuD,aAAa,GAAIvD,KAAD,IAAWS,EAAE,CAACkB,SAAH,CAAa3B,KAAK,EAAEwD,IAApB,KAC1B/C,EAAE,CAACkB,SAAH,CAAa3B,KAAK,EAAEyD,KAApB,CADP;;AAEAhD,EAAE,CAACiD,OAAH,GAAc1D,KAAD,IAAWS,EAAE,CAAC6C,aAAH,CAAiBtD,KAAjB,KAA2BuD,aAAa,CAACvD,KAAD,CAAhE;;AACAS,EAAE,CAACkD,iBAAH,GAAuB/C,cAAc,CAAC,mBAAD,CAArC;;AACAH,EAAE,CAACmD,sBAAH,GAA6B5D,KAAD,IAAWI,aAAa,CAACJ,KAAD,CAAb,KAAyB,wBAAhE;;AACAS,EAAE,CAACoD,aAAH,GAAoB7D,KAAD,IAAWI,aAAa,CAACJ,KAAD,CAAb,KAAyB,eAAvD,C,CACA;;;AACAS,EAAE,CAACqD,aAAH,GAAoB9D,KAAD,IAAWS,EAAE,CAACkB,SAAH,CAAa3B,KAAb,KAAuB,CAACA,KAAK,CAAC+D,cAAN,CAAqB,WAArB,CAAtD;;AACAtD,EAAE,CAACuD,MAAH,GAAYpD,cAAc,CAAC,QAAD,CAA1B;AACAH,EAAE,CAACwD,IAAH,GAAUrD,cAAc,CAAC,MAAD,CAAxB;AACAH,EAAE,CAACyD,KAAH,GAAWtD,cAAc,CAAC,OAAD,CAAzB;;AACAH,EAAE,CAAC0D,GAAH,GAAUnE,KAAD,IAAWY,cAAc,CAAC,KAAD,CAAd,CAAsBZ,KAAtB,CAApB;;AACAS,EAAE,CAAC2D,GAAH,GAAUpE,KAAD,IAAWY,cAAc,CAAC,KAAD,CAAd,CAAsBZ,KAAtB,CAApB;;AACAS,EAAE,CAAC4D,OAAH,GAAcrE,KAAD,IAAWY,cAAc,CAAC,SAAD,CAAd,CAA0BZ,KAA1B,CAAxB,C,CAA0D;;;AAC1DS,EAAE,CAAC6D,OAAH,GAActE,KAAD,IAAWY,cAAc,CAAC,SAAD,CAAd,CAA0BZ,KAA1B,CAAxB,C,CAA0D;;;AAC1DS,EAAE,CAAC8D,OAAH,GAAcvE,KAAD,IAAWY,cAAc,CAAC,SAAD,CAAd,CAA0BZ,KAA1B,CAAxB,C,CAA0D;;;AAC1DS,EAAE,CAAC+D,SAAH,GAAe5D,cAAc,CAAC,WAAD,CAA7B;AACAH,EAAE,CAACgE,UAAH,GAAgB7D,cAAc,CAAC,YAAD,CAA9B;AACAH,EAAE,CAACiE,iBAAH,GAAuB9D,cAAc,CAAC,mBAAD,CAArC;AACAH,EAAE,CAACkE,UAAH,GAAgB/D,cAAc,CAAC,YAAD,CAA9B;AACAH,EAAE,CAACmE,WAAH,GAAiBhE,cAAc,CAAC,aAAD,CAA/B;AACAH,EAAE,CAACoE,UAAH,GAAgBjE,cAAc,CAAC,YAAD,CAA9B;AACAH,EAAE,CAACqE,WAAH,GAAiBlE,cAAc,CAAC,aAAD,CAA/B;AACAH,EAAE,CAACsE,YAAH,GAAkBnE,cAAc,CAAC,cAAD,CAAhC;AACAH,EAAE,CAACuE,YAAH,GAAkBpE,cAAc,CAAC,cAAD,CAAhC;AACAH,EAAE,CAACwE,aAAH,GAAmBrE,cAAc,CAAC,eAAD,CAAjC;AACAH,EAAE,CAACyE,cAAH,GAAoBtE,cAAc,CAAC,gBAAD,CAAlC;AACAH,EAAE,CAAC0E,WAAH,GAAiBvE,cAAc,CAAC,aAAD,CAA/B;AACAH,EAAE,CAAC2E,iBAAH,GAAuBxE,cAAc,CAAC,mBAAD,CAArC;AACAH,EAAE,CAAC4E,QAAH,GAAczE,cAAc,CAAC,UAAD,CAA5B;;AACAH,EAAE,CAAC6E,QAAH,GAAc,CAACtF,KAAD,EAAQuF,UAAR,KAAuBrF,MAAM,CAACsF,MAAP,CAAcD,UAAd,EAA0B9F,QAA1B,CAAmCO,KAAnC,CAArC;;AACAS,EAAE,CAACgF,gBAAH,GAAsB,CAACC,QAAD,EAAW7D,MAAX,KAAsB3B,MAAM,CAACyF,cAAP,CAAsBD,QAAtB,MAAoC7D,MAAM,CAAC1B,SAAvF;;AACAM,EAAE,CAACmF,WAAH,GAAkB5F,KAAD,IAAWY,cAAc,CAAC,KAAD,CAAd,CAAsBZ,KAAtB,CAA5B;;AACAS,EAAE,CAACoF,SAAH,GAAgB7F,KAAD,IAAW;EACtB,IAAI,CAACS,EAAE,CAACa,MAAH,CAAUtB,KAAV,CAAL,EAAuB;IACnB,OAAO,KAAP;EACH;;EACD,IAAI;IACA,IAAI8F,GAAJ,CAAQ9F,KAAR,EADA,CACgB;;IAChB,OAAO,IAAP;EACH,CAHD,CAIA,MAAM;IACF,OAAO,KAAP;EACH;AACJ,CAXD,C,CAYA;;;AACAS,EAAE,CAACsF,MAAH,GAAa/F,KAAD,IAAWoB,OAAO,CAACpB,KAAD,CAA9B,C,CAAuC;AACvC;;;AACAS,EAAE,CAACuF,KAAH,GAAYhG,KAAD,IAAW,CAACA,KAAvB;;AACAS,EAAE,CAACgB,GAAH,GAAUzB,KAAD,IAAWa,MAAM,CAACC,KAAP,CAAad,KAAb,CAApB;;AACAS,EAAE,CAACwF,SAAH,GAAgBjG,KAAD,IAAWS,EAAE,CAACmB,KAAH,CAAS5B,KAAT,KAAmBH,mBAAmB,CAAC,OAAOG,KAAR,CAAhE;;AACAS,EAAE,CAACyF,OAAH,GAAclG,KAAD,IAAWa,MAAM,CAACsF,SAAP,CAAiBnG,KAAjB,CAAxB;;AACAS,EAAE,CAAC2F,WAAH,GAAkBpG,KAAD,IAAWa,MAAM,CAACwF,aAAP,CAAqBrG,KAArB,CAA5B;;AACAS,EAAE,CAAC6F,WAAH,GAAkBtG,KAAD,IAAW;EACxB;EACA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;IAC7C,OAAO,KAAP;EACH,CAJuB,CAKxB;;;EACA,MAAMG,SAAS,GAAGD,MAAM,CAACyF,cAAP,CAAsB3F,KAAtB,CAAlB;EACA,OAAO,CAACG,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKD,MAAM,CAACC,SAA3C,IAAwDD,MAAM,CAACyF,cAAP,CAAsBxF,SAAtB,MAAqC,IAA9F,KAAuG,EAAE2C,MAAM,CAACyD,WAAP,IAAsBvG,KAAxB,CAAvG,IAAyI,EAAE8C,MAAM,CAACC,QAAP,IAAmB/C,KAArB,CAAhJ;AACH,CARD;;AASAS,EAAE,CAAC+F,UAAH,GAAiBxG,KAAD,IAAWT,gBAAgB,CAACa,aAAa,CAACJ,KAAD,CAAd,CAA3C;;AACA,MAAMyG,aAAa,GAAIzG,KAAD,IAAWS,EAAE,CAAC2F,WAAH,CAAepG,KAAf,KAAyBA,KAAK,IAAI,CAAnE;;AACAS,EAAE,CAACiG,SAAH,GAAgB1G,KAAD,IAAW,CAACS,EAAE,CAACkC,eAAH,CAAmB3C,KAAnB,CAAD,IAA8B,CAACS,EAAE,CAACkB,SAAH,CAAa3B,KAAb,CAA/B,IAAsDyG,aAAa,CAACzG,KAAK,CAAC2G,MAAP,CAA7F;;AACAlG,EAAE,CAACmG,OAAH,GAAa,CAAC5G,KAAD,EAAQ6G,KAAR,KAAkB;EAC3B,IAAIpG,EAAE,CAACe,MAAH,CAAUqF,KAAV,CAAJ,EAAsB;IAClB,OAAO7G,KAAK,IAAI8G,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYF,KAAZ,CAAT,IAA+B7G,KAAK,IAAI8G,IAAI,CAACE,GAAL,CAASH,KAAT,EAAgB,CAAhB,CAA/C;EACH;;EACD,IAAIpG,EAAE,CAACO,KAAH,CAAS6F,KAAT,KAAmBA,KAAK,CAACF,MAAN,KAAiB,CAAxC,EAA2C;IACvC,OAAO3G,KAAK,IAAI8G,IAAI,CAACC,GAAL,CAAS,GAAGF,KAAZ,CAAT,IAA+B7G,KAAK,IAAI8G,IAAI,CAACE,GAAL,CAAS,GAAGH,KAAZ,CAA/C;EACH;;EACD,MAAM,IAAIxF,SAAJ,CAAe,kBAAiB4F,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAsB,EAAtD,CAAN;AACH,CARD,C,CASA;;;AACA,MAAMM,iBAAiB,GAAG,CAA1B,C,CACA;;AACA,MAAMC,uBAAuB,GAAG,CAC5B,WAD4B,EAE5B,eAF4B,EAG5B,OAH4B,EAI5B,YAJ4B,EAK5B,WAL4B,CAAhC;;AAOA3G,EAAE,CAACC,UAAH,GAAiBV,KAAD,IAAWS,EAAE,CAACmC,MAAH,CAAU5C,KAAV,KACpBA,KAAK,CAACqH,QAAN,KAAmBF,iBADC,IAEpB1G,EAAE,CAACa,MAAH,CAAUtB,KAAK,CAACsH,QAAhB,CAFoB,IAGpB,CAAC7G,EAAE,CAAC6F,WAAH,CAAetG,KAAf,CAHmB,IAIpBoH,uBAAuB,CAAC9E,KAAxB,CAA8BiF,QAAQ,IAAIA,QAAQ,IAAIvH,KAAtD,CAJP;;AAKAS,EAAE,CAACM,UAAH,GAAiBf,KAAD,IAAW;EACvB,IAAI,CAACA,KAAL,EAAY;IACR,OAAO,KAAP;EACH,CAHsB,CAIvB;;;EACA,IAAIA,KAAK,KAAKA,KAAK,CAAC8C,MAAM,CAAC/B,UAAR,CAAL,IAAd,EAA4C;IACxC,OAAO,IAAP;EACH,CAPsB,CAQvB;;;EACA,IAAIf,KAAK,KAAKA,KAAK,CAAC,cAAD,CAAL,IAAd,EAAyC;IACrC,OAAO,IAAP;EACH;;EACD,OAAO,KAAP;AACH,CAbD;;AAcAS,EAAE,CAAC+G,UAAH,GAAiBxH,KAAD,IAAWS,EAAE,CAACmC,MAAH,CAAU5C,KAAV,KAAoBS,EAAE,CAACkB,SAAH,CAAa3B,KAAK,CAACyH,IAAnB,CAApB,IAAgD,CAAChH,EAAE,CAACM,UAAH,CAAcf,KAAd,CAA5E;;AACAS,EAAE,CAACiH,QAAH,GAAe1H,KAAD,IAAWA,KAAK,KAAKa,MAAM,CAAC8G,iBAAjB,IAAsC3H,KAAK,KAAKa,MAAM,CAAC+G,iBAAhF;;AACA,MAAMC,cAAc,GAAIC,SAAD,IAAgB9H,KAAD,IAAWS,EAAE,CAACyF,OAAH,CAAWlG,KAAX,KAAqB8G,IAAI,CAACiB,GAAL,CAAS/H,KAAK,GAAG,CAAjB,MAAwB8H,SAA9F;;AACArH,EAAE,CAACuH,WAAH,GAAiBH,cAAc,CAAC,CAAD,CAA/B;AACApH,EAAE,CAACwH,UAAH,GAAgBJ,cAAc,CAAC,CAAD,CAA9B;;AACApH,EAAE,CAACyH,UAAH,GAAiBlI,KAAD,IAAWS,EAAE,CAACO,KAAH,CAAShB,KAAT,KAAmBA,KAAK,CAAC2G,MAAN,KAAiB,CAA/D;;AACAlG,EAAE,CAAC0H,aAAH,GAAoBnI,KAAD,IAAWS,EAAE,CAACO,KAAH,CAAShB,KAAT,KAAmBA,KAAK,CAAC2G,MAAN,GAAe,CAAhE;;AACAlG,EAAE,CAAC2H,WAAH,GAAkBpI,KAAD,IAAWS,EAAE,CAACa,MAAH,CAAUtB,KAAV,KAAoBA,KAAK,CAAC2G,MAAN,KAAiB,CAAjE;;AACA,MAAM0B,kBAAkB,GAAIrI,KAAD,IAAWS,EAAE,CAACa,MAAH,CAAUtB,KAAV,KAAoB,CAAC,KAAKQ,IAAL,CAAUR,KAAV,CAA3D;;AACAS,EAAE,CAACyB,uBAAH,GAA8BlC,KAAD,IAAWS,EAAE,CAAC2H,WAAH,CAAepI,KAAf,KAAyBqI,kBAAkB,CAACrI,KAAD,CAAnF,C,CACA;;;AACAS,EAAE,CAAC6H,cAAH,GAAqBtI,KAAD,IAAWS,EAAE,CAACa,MAAH,CAAUtB,KAAV,KAAoBA,KAAK,CAAC2G,MAAN,GAAe,CAAlE,C,CACA;;;AACAlG,EAAE,CAAC8H,8BAAH,GAAqCvI,KAAD,IAAWS,EAAE,CAACa,MAAH,CAAUtB,KAAV,KAAoB,CAACS,EAAE,CAACyB,uBAAH,CAA2BlC,KAA3B,CAApE,C,CACA;;;AACAS,EAAE,CAAC+H,WAAH,GAAkBxI,KAAD,IAAWS,EAAE,CAACmC,MAAH,CAAU5C,KAAV,KAAoB,CAACS,EAAE,CAAC0D,GAAH,CAAOnE,KAAP,CAArB,IAAsC,CAACS,EAAE,CAAC2D,GAAH,CAAOpE,KAAP,CAAvC,IAAwDE,MAAM,CAACuI,IAAP,CAAYzI,KAAZ,EAAmB2G,MAAnB,KAA8B,CAAlH,C,CACA;AACA;AACA;;;AACAlG,EAAE,CAACiI,cAAH,GAAqB1I,KAAD,IAAWS,EAAE,CAACmC,MAAH,CAAU5C,KAAV,KAAoB,CAACS,EAAE,CAAC0D,GAAH,CAAOnE,KAAP,CAArB,IAAsC,CAACS,EAAE,CAAC2D,GAAH,CAAOpE,KAAP,CAAvC,IAAwDE,MAAM,CAACuI,IAAP,CAAYzI,KAAZ,EAAmB2G,MAAnB,GAA4B,CAAnH;;AACAlG,EAAE,CAACkI,QAAH,GAAe3I,KAAD,IAAWS,EAAE,CAAC2D,GAAH,CAAOpE,KAAP,KAAiBA,KAAK,CAAC4I,IAAN,KAAe,CAAzD;;AACAnI,EAAE,CAACoI,WAAH,GAAkB7I,KAAD,IAAWS,EAAE,CAAC2D,GAAH,CAAOpE,KAAP,KAAiBA,KAAK,CAAC4I,IAAN,GAAa,CAA1D,C,CACA;;;AACAnI,EAAE,CAACqI,QAAH,GAAe9I,KAAD,IAAWS,EAAE,CAAC0D,GAAH,CAAOnE,KAAP,KAAiBA,KAAK,CAAC4I,IAAN,KAAe,CAAzD,C,CACA;;;AACAnI,EAAE,CAACsI,WAAH,GAAkB/I,KAAD,IAAWS,EAAE,CAAC0D,GAAH,CAAOnE,KAAP,KAAiBA,KAAK,CAAC4I,IAAN,GAAa,CAA1D,C,CACA;;;AACAnI,EAAE,CAACuI,WAAH,GAAkBhJ,KAAD,IAAWS,EAAE,CAACwI,GAAH,CAAO,CAACxI,EAAE,CAACa,MAAJ,EAAYb,EAAE,CAACe,MAAf,EAAuBf,EAAE,CAACuB,MAA1B,CAAP,EAA0ChC,KAA1C,CAA5B;;AACAS,EAAE,CAACyI,QAAH,GAAelJ,KAAD,IAAWY,cAAc,CAAC,UAAD,CAAd,CAA2BZ,KAA3B,CAAzB;;AACAS,EAAE,CAAC0I,eAAH,GAAsBnJ,KAAD,IAAWY,cAAc,CAAC,iBAAD,CAAd,CAAkCZ,KAAlC,CAAhC;;AACA,MAAMoJ,gBAAgB,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoB9D,MAApB,KAA+B;EACpD,IAAI,CAAC/E,EAAE,CAACkB,SAAH,CAAa2H,SAAb,CAAL,EAA8B;IAC1B,MAAM,IAAIjI,SAAJ,CAAe,sBAAqB4F,IAAI,CAACC,SAAL,CAAeoC,SAAf,CAA0B,EAA9D,CAAN;EACH;;EACD,IAAI9D,MAAM,CAACmB,MAAP,KAAkB,CAAtB,EAAyB;IACrB,MAAM,IAAItF,SAAJ,CAAc,0BAAd,CAAN;EACH;;EACD,OAAOgI,MAAM,CAAC/I,IAAP,CAAYkF,MAAZ,EAAoB8D,SAApB,CAAP;AACH,CARD;;AASA7I,EAAE,CAACwI,GAAH,GAAS,CAACK,SAAD,EAAY,GAAG9D,MAAf,KAA0B;EAC/B,MAAM+D,UAAU,GAAG9I,EAAE,CAACO,KAAH,CAASsI,SAAT,IAAsBA,SAAtB,GAAkC,CAACA,SAAD,CAArD;EACA,OAAOC,UAAU,CAACC,IAAX,CAAgBC,eAAe,IAAIL,gBAAgB,CAAChH,KAAK,CAACjC,SAAN,CAAgBqJ,IAAjB,EAAuBC,eAAvB,EAAwCjE,MAAxC,CAAnD,CAAP;AACH,CAHD;;AAIA/E,EAAE,CAACiJ,GAAH,GAAS,CAACJ,SAAD,EAAY,GAAG9D,MAAf,KAA0B4D,gBAAgB,CAAChH,KAAK,CAACjC,SAAN,CAAgBmC,KAAjB,EAAwBgH,SAAxB,EAAmC9D,MAAnC,CAAnD;;AACA,MAAMmE,UAAU,GAAG,CAACC,SAAD,EAAYC,WAAZ,EAAyB7J,KAAzB,EAAgC8J,OAAO,GAAG,EAA1C,KAAiD;EAChE,IAAI,CAACF,SAAL,EAAgB;IACZ,MAAM;MAAEG;IAAF,IAAqBD,OAA3B;IACA,MAAME,aAAa,GAAGD,cAAc,GAC7B,4BAA2B,CAC1B,GAAG,IAAIE,GAAJ,CAAQjK,KAAK,CAACmE,GAAN,CAAU+F,WAAW,IAAK,KAAIzJ,EAAE,CAACyJ,WAAD,CAAc,IAA9C,CAAR,CADuB,EAE5BC,IAF4B,CAEvB,IAFuB,CAEjB,EAHmB,GAI7B,4BAA2B1J,EAAE,CAACT,KAAD,CAAQ,IAJ5C;IAKA,MAAM,IAAIqB,SAAJ,CAAe,6BAA4BwI,WAAY,OAAMG,aAAc,GAA3E,CAAN;EACH;AACJ,CAVD;AAWA;;;AACA,OAAO,MAAMI,MAAM,GAAG;EAClB;EACAzJ,SAAS,EAAGX,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACE,SAAH,CAAaX,KAAb,CAAD,EAAsB,WAAtB,EAAmCA,KAAnC,CAFd;EAGlBsB,MAAM,EAAGtB,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACa,MAAH,CAAUtB,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CAHX;EAIlBwB,MAAM,EAAGxB,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACe,MAAH,CAAUxB,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CAJX;EAKlB0B,MAAM,EAAG1B,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiB,MAAH,CAAU1B,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CALX;EAMlB;EACA2B,SAAS,EAAG3B,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACkB,SAAH,CAAa3B,KAAb,CAAD,EAAsB,UAAtB,EAAkCA,KAAlC,CAPd;EAQlB4B,KAAK,EAAG5B,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACmB,KAAH,CAAS5B,KAAT,CAAD,EAAkB,MAAlB,EAA0BA,KAA1B,CARV;EASlB6B,MAAM,EAAG7B,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACoB,MAAH,CAAU7B,KAAV,CAAD,EAAmB;EAAQ;EAA3B,EAAkEA,KAAlE,CATX;EAUlB+B,OAAO,EAAG/B,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACsB,OAAH,CAAW/B,KAAX,CAAD,EAAoB,SAApB,EAA+BA,KAA/B,CAVZ;EAWlBgC,MAAM,EAAGhC,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuB,MAAH,CAAUhC,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CAXX;EAYlBiC,aAAa,EAAGjC,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACwB,aAAH,CAAiBjC,KAAjB,CAAD,EAA0B;EAAuB;EAAjD,EAA+FA,KAA/F,CAZlB;EAalBgB,KAAK,EAAE,CAAChB,KAAD,EAAQmC,SAAR,KAAsB;IACzB,MAAMiI,MAAM,GAAGT,UAAf;IACAS,MAAM,CAAC3J,EAAE,CAACO,KAAH,CAAShB,KAAT,CAAD,EAAkB,OAAlB,EAA2BA,KAA3B,CAAN;;IACA,IAAImC,SAAJ,EAAe;MACX;MACAnC,KAAK,CAACqK,OAAN,CAAclI,SAAd;IACH;EACJ,CApBiB;EAqBlBlB,MAAM,EAAGjB,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACQ,MAAH,CAAUjB,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CArBX;EAsBlB0C,IAAI,EAAG1C,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiC,IAAH,CAAQ1C,KAAR,CAAD,EAAiB,MAAjB,EAAyBA,KAAzB,CAtBT;EAuBlB2C,eAAe,EAAG3C,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACkC,eAAH,CAAmB3C,KAAnB,CAAD,EAA4B;EAAoB;EAAhD,EAAgGA,KAAhG,CAvBpB;EAwBlB4C,MAAM,EAAG5C,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACmC,MAAH,CAAU5C,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CAxBX;EAyBlB6C,QAAQ,EAAG7C,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACoC,QAAH,CAAY7C,KAAZ,CAAD,EAAqB;EAAW;EAAhC,EAAyEA,KAAzE,CAzBb;EA0BlBgD,aAAa,EAAGhD,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuC,aAAH,CAAiBhD,KAAjB,CAAD,EAA0B;EAAgB;EAA1C,EAAwFA,KAAxF,CA1BlB;EA2BlBkD,SAAS,EAAGlD,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyC,SAAH,CAAalD,KAAb,CAAD,EAAsB,WAAtB,EAAmCA,KAAnC,CA3Bd;EA4BlBqD,cAAc,EAAGrD,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC4C,cAAH,CAAkBrD,KAAlB,CAAD,EAA2B,gBAA3B,EAA6CA,KAA7C,CA5BnB;EA6BlBsD,aAAa,EAAGtD,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC6C,aAAH,CAAiBtD,KAAjB,CAAD,EAA0B;EAAiB;EAA3C,EAAyFA,KAAzF,CA7BlB;EA8BlB0D,OAAO,EAAG1D,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiD,OAAH,CAAW1D,KAAX,CAAD,EAAoB,SAApB,EAA+BA,KAA/B,CA9BZ;EA+BlB2D,iBAAiB,EAAG3D,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACkD,iBAAH,CAAqB3D,KAArB,CAAD,EAA8B,mBAA9B,EAAmDA,KAAnD,CA/BtB;EAgClB4D,sBAAsB,EAAG5D,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACmD,sBAAH,CAA0B5D,KAA1B,CAAD,EAAmC,wBAAnC,EAA6DA,KAA7D,CAhC3B;EAiClB;EACA6D,aAAa,EAAG7D,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACoD,aAAH,CAAiB7D,KAAjB,CAAD,EAA0B,eAA1B,EAA2CA,KAA3C,CAlClB;EAmClB;EACA8D,aAAa,EAAG9D,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACqD,aAAH,CAAiB9D,KAAjB,CAAD,EAA0B,UAA1B,EAAsCA,KAAtC,CApClB;EAqClBgE,MAAM,EAAGhE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuD,MAAH,CAAUhE,KAAV,CAAD,EAAmB,QAAnB,EAA6BA,KAA7B,CArCX;EAsClBiE,IAAI,EAAGjE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACwD,IAAH,CAAQjE,KAAR,CAAD,EAAiB,MAAjB,EAAyBA,KAAzB,CAtCT;EAuClBkE,KAAK,EAAGlE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyD,KAAH,CAASlE,KAAT,CAAD,EAAkB,OAAlB,EAA2BA,KAA3B,CAvCV;EAwClBmE,GAAG,EAAGnE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC0D,GAAH,CAAOnE,KAAP,CAAD,EAAgB,KAAhB,EAAuBA,KAAvB,CAxCR;EAyClBoE,GAAG,EAAGpE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC2D,GAAH,CAAOpE,KAAP,CAAD,EAAgB,KAAhB,EAAuBA,KAAvB,CAzCR;EA0ClBqE,OAAO,EAAGrE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC4D,OAAH,CAAWrE,KAAX,CAAD,EAAoB,SAApB,EAA+BA,KAA/B,CA1CZ;EA2ClBsE,OAAO,EAAGtE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC6D,OAAH,CAAWtE,KAAX,CAAD,EAAoB,SAApB,EAA+BA,KAA/B,CA3CZ;EA4ClBuE,OAAO,EAAGvE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC8D,OAAH,CAAWvE,KAAX,CAAD,EAAoB,SAApB,EAA+BA,KAA/B,CA5CZ;EA6ClBwE,SAAS,EAAGxE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC+D,SAAH,CAAaxE,KAAb,CAAD,EAAsB,WAAtB,EAAmCA,KAAnC,CA7Cd;EA8ClByE,UAAU,EAAGzE,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACgE,UAAH,CAAczE,KAAd,CAAD,EAAuB,YAAvB,EAAqCA,KAArC,CA9Cf;EA+ClB0E,iBAAiB,EAAG1E,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiE,iBAAH,CAAqB1E,KAArB,CAAD,EAA8B,mBAA9B,EAAmDA,KAAnD,CA/CtB;EAgDlB2E,UAAU,EAAG3E,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACkE,UAAH,CAAc3E,KAAd,CAAD,EAAuB,YAAvB,EAAqCA,KAArC,CAhDf;EAiDlB4E,WAAW,EAAG5E,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACmE,WAAH,CAAe5E,KAAf,CAAD,EAAwB,aAAxB,EAAuCA,KAAvC,CAjDhB;EAkDlB6E,UAAU,EAAG7E,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACoE,UAAH,CAAc7E,KAAd,CAAD,EAAuB,YAAvB,EAAqCA,KAArC,CAlDf;EAmDlB8E,WAAW,EAAG9E,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACqE,WAAH,CAAe9E,KAAf,CAAD,EAAwB,aAAxB,EAAuCA,KAAvC,CAnDhB;EAoDlB+E,YAAY,EAAG/E,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACsE,YAAH,CAAgB/E,KAAhB,CAAD,EAAyB,cAAzB,EAAyCA,KAAzC,CApDjB;EAqDlBgF,YAAY,EAAGhF,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuE,YAAH,CAAgBhF,KAAhB,CAAD,EAAyB,cAAzB,EAAyCA,KAAzC,CArDjB;EAsDlBiF,aAAa,EAAGjF,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACwE,aAAH,CAAiBjF,KAAjB,CAAD,EAA0B,eAA1B,EAA2CA,KAA3C,CAtDlB;EAuDlBkF,cAAc,EAAGlF,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyE,cAAH,CAAkBlF,KAAlB,CAAD,EAA2B,gBAA3B,EAA6CA,KAA7C,CAvDnB;EAwDlBmF,WAAW,EAAGnF,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC0E,WAAH,CAAenF,KAAf,CAAD,EAAwB,aAAxB,EAAuCA,KAAvC,CAxDhB;EAyDlBoF,iBAAiB,EAAGpF,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC2E,iBAAH,CAAqBpF,KAArB,CAAD,EAA8B,mBAA9B,EAAmDA,KAAnD,CAzDtB;EA0DlBqF,QAAQ,EAAGrF,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC4E,QAAH,CAAYrF,KAAZ,CAAD,EAAqB,UAArB,EAAiCA,KAAjC,CA1Db;EA2DlBsF,QAAQ,EAAE,CAACtF,KAAD,EAAQuF,UAAR,KAAuBoE,UAAU,CAAClJ,EAAE,CAAC6E,QAAH,CAAYtF,KAAZ,EAAmBuF,UAAnB,CAAD,EAAiC,UAAjC,EAA6CvF,KAA7C,CA3DzB;EA4DlB4F,WAAW,EAAG5F,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACmF,WAAH,CAAe5F,KAAf,CAAD,EAAwB,KAAxB,EAA+BA,KAA/B,CA5DhB;EA6DlB6F,SAAS,EAAG7F,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACoF,SAAH,CAAa7F,KAAb,CAAD,EAAsB;EAAoB;EAA1C,EAAoFA,KAApF,CA7Dd;EA8DlB+F,MAAM,EAAG/F,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACsF,MAAH,CAAU/F,KAAV,CAAD,EAAmB;EAAS;EAA5B,EAAmEA,KAAnE,CA9DX;EA+DlBgG,KAAK,EAAGhG,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuF,KAAH,CAAShG,KAAT,CAAD,EAAkB;EAAQ;EAA1B,EAAgEA,KAAhE,CA/DV;EAgElByB,GAAG,EAAGzB,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACgB,GAAH,CAAOzB,KAAP,CAAD,EAAgB;EAAM;EAAtB,EAA0DA,KAA1D,CAhER;EAiElBiG,SAAS,EAAGjG,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACwF,SAAH,CAAajG,KAAb,CAAD,EAAsB;EAAY;EAAlC,EAA4EA,KAA5E,CAjEd;EAkElBkG,OAAO,EAAGlG,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyF,OAAH,CAAWlG,KAAX,CAAD,EAAoB;EAAU;EAA9B,EAAsEA,KAAtE,CAlEZ;EAmElBoG,WAAW,EAAGpG,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC2F,WAAH,CAAepG,KAAf,CAAD,EAAwB;EAAU;EAAlC,EAA8EA,KAA9E,CAnEhB;EAoElBsG,WAAW,EAAGtG,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC6F,WAAH,CAAetG,KAAf,CAAD,EAAwB;EAAe;EAAvC,EAAmFA,KAAnF,CApEhB;EAqElBwG,UAAU,EAAGxG,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC+F,UAAH,CAAcxG,KAAd,CAAD,EAAuB;EAAa;EAApC,EAA+EA,KAA/E,CArEf;EAsElB0G,SAAS,EAAG1G,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiG,SAAH,CAAa1G,KAAb,CAAD,EAAsB;EAAa;EAAnC,EAA6EA,KAA7E,CAtEd;EAuElBU,UAAU,EAAGV,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACC,UAAH,CAAcV,KAAd,CAAD,EAAuB;EAAc;EAArC,EAAgFA,KAAhF,CAvEf;EAwElBe,UAAU,EAAGf,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACM,UAAH,CAAcf,KAAd,CAAD,EAAuB,YAAvB,EAAqCA,KAArC,CAxEf;EAyElBwH,UAAU,EAAGxH,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC+G,UAAH,CAAcxH,KAAd,CAAD,EAAuB;EAAiB;EAAxC,EAAmFA,KAAnF,CAzEf;EA0ElB0H,QAAQ,EAAG1H,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiH,QAAH,CAAY1H,KAAZ,CAAD,EAAqB;EAAkB;EAAvC,EAAgFA,KAAhF,CA1Eb;EA2ElBkI,UAAU,EAAGlI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyH,UAAH,CAAclI,KAAd,CAAD,EAAuB;EAAc;EAArC,EAAgFA,KAAhF,CA3Ef;EA4ElBmI,aAAa,EAAGnI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC0H,aAAH,CAAiBnI,KAAjB,CAAD,EAA0B;EAAkB;EAA5C,EAA0FA,KAA1F,CA5ElB;EA6ElBoI,WAAW,EAAGpI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC2H,WAAH,CAAepI,KAAf,CAAD,EAAwB;EAAe;EAAvC,EAAmFA,KAAnF,CA7EhB;EA8ElBkC,uBAAuB,EAAGlC,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyB,uBAAH,CAA2BlC,KAA3B,CAAD,EAAoC;EAA6B;EAAjE,EAAyHA,KAAzH,CA9E5B;EA+ElBsI,cAAc,EAAGtI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC6H,cAAH,CAAkBtI,KAAlB,CAAD,EAA2B;EAAmB;EAA9C,EAA6FA,KAA7F,CA/EnB;EAgFlBuI,8BAA8B,EAAGvI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC8H,8BAAH,CAAkCvI,KAAlC,CAAD,EAA2C;EAAsC;EAAjF,EAAgJA,KAAhJ,CAhFnC;EAiFlBwI,WAAW,EAAGxI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC+H,WAAH,CAAexI,KAAf,CAAD,EAAwB;EAAe;EAAvC,EAAmFA,KAAnF,CAjFhB;EAkFlB0I,cAAc,EAAG1I,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACiI,cAAH,CAAkB1I,KAAlB,CAAD,EAA2B;EAAmB;EAA9C,EAA6FA,KAA7F,CAlFnB;EAmFlB2I,QAAQ,EAAG3I,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACkI,QAAH,CAAY3I,KAAZ,CAAD,EAAqB;EAAY;EAAjC,EAA0EA,KAA1E,CAnFb;EAoFlB6I,WAAW,EAAG7I,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACoI,WAAH,CAAe7I,KAAf,CAAD,EAAwB;EAAgB;EAAxC,EAAoFA,KAApF,CApFhB;EAqFlB8I,QAAQ,EAAG9I,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACqI,QAAH,CAAY9I,KAAZ,CAAD,EAAqB;EAAY;EAAjC,EAA0EA,KAA1E,CArFb;EAsFlB+I,WAAW,EAAG/I,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACsI,WAAH,CAAe/I,KAAf,CAAD,EAAwB;EAAgB;EAAxC,EAAoFA,KAApF,CAtFhB;EAuFlBgJ,WAAW,EAAGhJ,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuI,WAAH,CAAehJ,KAAf,CAAD,EAAwB,aAAxB,EAAuCA,KAAvC,CAvFhB;EAwFlBkJ,QAAQ,EAAGlJ,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACyI,QAAH,CAAYlJ,KAAZ,CAAD,EAAqB,UAArB,EAAiCA,KAAjC,CAxFb;EAyFlBmJ,eAAe,EAAGnJ,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAAC0I,eAAH,CAAmBnJ,KAAnB,CAAD,EAA4B,iBAA5B,EAA+CA,KAA/C,CAzFpB;EA0FlB;EACAgI,WAAW,EAAGhI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACuH,WAAH,CAAehI,KAAf,CAAD,EAAwB;EAAe;EAAvC,EAAmFA,KAAnF,CA3FhB;EA4FlBiI,UAAU,EAAGjI,KAAD,IAAW2J,UAAU,CAAClJ,EAAE,CAACwH,UAAH,CAAcjI,KAAd,CAAD,EAAuB;EAAc;EAArC,EAAgFA,KAAhF,CA5Ff;EA6FlB;EACAyF,gBAAgB,EAAE,CAACC,QAAD,EAAW7D,MAAX,KAAsB8H,UAAU,CAAClJ,EAAE,CAACgF,gBAAH,CAAoBC,QAApB,EAA8B7D,MAA9B,CAAD,EAAwC;EAAI;EAA5C,EAA6F6D,QAA7F,CA9FhC;EA+FlBkB,OAAO,EAAE,CAAC5G,KAAD,EAAQ6G,KAAR,KAAkB8C,UAAU,CAAClJ,EAAE,CAACmG,OAAH,CAAW5G,KAAX,EAAkB6G,KAAlB,CAAD,EAA2B;EAAW;EAAtC,EAA8E7G,KAA9E,CA/FnB;EAgGlB;EACAiJ,GAAG,EAAE,CAACK,SAAD,EAAY,GAAG9D,MAAf,KAA0BmE,UAAU,CAAClJ,EAAE,CAACwI,GAAH,CAAOK,SAAP,EAAkB,GAAG9D,MAArB,CAAD,EAA+B;EAAyC;EAAxE,EAA4GA,MAA5G,EAAoH;IAAEuE,cAAc,EAAE;EAAlB,CAApH,CAjGvB;EAkGlBL,GAAG,EAAE,CAACJ,SAAD,EAAY,GAAG9D,MAAf,KAA0BmE,UAAU,CAAClJ,EAAE,CAACiJ,GAAH,CAAOJ,SAAP,EAAkB,GAAG9D,MAArB,CAAD,EAA+B;EAA0C;EAAzE,EAA6GA,MAA7G,EAAqH;IAAEuE,cAAc,EAAE;EAAlB,CAArH;AAlGvB,CAAf;AAoGP;AACA;AACA;;AACA7J,MAAM,CAACoK,gBAAP,CAAwB7J,EAAxB,EAA4B;EACxB8J,KAAK,EAAE;IACHvK,KAAK,EAAES,EAAE,CAACoB;EADP,CADiB;EAIxB2I,QAAQ,EAAE;IACNxK,KAAK,EAAES,EAAE,CAACkB;EADJ,CAJc;EAOxB8I,IAAI,EAAE;IACFzK,KAAK,EAAES,EAAE,CAACmB;EADR;AAPkB,CAA5B;AAWA1B,MAAM,CAACoK,gBAAP,CAAwBF,MAAxB,EAAgC;EAC5BG,KAAK,EAAE;IACHvK,KAAK,EAAEoK,MAAM,CAACvI;EADX,CADqB;EAI5B2I,QAAQ,EAAE;IACNxK,KAAK,EAAEoK,MAAM,CAACzI;EADR,CAJkB;EAO5B8I,IAAI,EAAE;IACFzK,KAAK,EAAEoK,MAAM,CAACxI;EADZ;AAPsB,CAAhC;AAWA,eAAenB,EAAf"},"metadata":{},"sourceType":"module"}