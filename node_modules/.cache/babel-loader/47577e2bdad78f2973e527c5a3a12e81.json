{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n\nconst supportedProtocols = new Set(['https:', 'http:', 'file:']);\n\nconst hasCustomProtocol = urlString => {\n  try {\n    const {\n      protocol\n    } = new URL(urlString);\n    return protocol.endsWith(':') && !supportedProtocols.has(protocol);\n  } catch {\n    return false;\n  }\n};\n\nconst normalizeDataURL = (urlString, {\n  stripHash\n}) => {\n  const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n\n  if (!match) {\n    throw new Error(`Invalid URL: ${urlString}`);\n  }\n\n  let {\n    type,\n    data,\n    hash\n  } = match.groups;\n  const mediaType = type.split(';');\n  hash = stripHash ? '' : hash;\n  let isBase64 = false;\n\n  if (mediaType[mediaType.length - 1] === 'base64') {\n    mediaType.pop();\n    isBase64 = true;\n  } // Lowercase MIME type\n\n\n  const mimeType = mediaType.shift()?.toLowerCase() ?? '';\n  const attributes = mediaType.map(attribute => {\n    let [key, value = ''] = attribute.split('=').map(string => string.trim()); // Lowercase `charset`\n\n    if (key === 'charset') {\n      value = value.toLowerCase();\n\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return '';\n      }\n    }\n\n    return `${key}${value ? `=${value}` : ''}`;\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n\n  if (isBase64) {\n    normalizedMediaType.push('base64');\n  }\n\n  if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n\n  return `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;\n};\n\nexport default function normalizeUrl(urlString, options) {\n  options = {\n    defaultProtocol: 'http',\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripTextFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeSingleSlash: true,\n    removeDirectoryIndex: false,\n    removeExplicitPort: false,\n    sortQueryParameters: true,\n    ...options\n  }; // Legacy: Append `:` to the protocol if missing.\n\n  if (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {\n    options.defaultProtocol = `${options.defaultProtocol}:`;\n  }\n\n  urlString = urlString.trim(); // Data URL\n\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n\n  if (hasCustomProtocol(urlString)) {\n    return urlString;\n  }\n\n  const hasRelativeProtocol = urlString.startsWith('//');\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString); // Prepend protocol\n\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n\n  const urlObject = new URL(urlString);\n\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n  }\n\n  if (options.forceHttp && urlObject.protocol === 'https:') {\n    urlObject.protocol = 'http:';\n  }\n\n  if (options.forceHttps && urlObject.protocol === 'http:') {\n    urlObject.protocol = 'https:';\n  } // Remove auth\n\n\n  if (options.stripAuthentication) {\n    urlObject.username = '';\n    urlObject.password = '';\n  } // Remove hash\n\n\n  if (options.stripHash) {\n    urlObject.hash = '';\n  } else if (options.stripTextFragment) {\n    urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');\n  } // Remove duplicate slashes if not preceded by a protocol\n  // NOTE: This could be implemented using a single negative lookbehind\n  // regex, but we avoid that to maintain compatibility with older js engines\n  // which do not have support for that feature.\n\n\n  if (urlObject.pathname) {\n    // TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n    // Split the string by occurrences of this protocol regex, and perform\n    // duplicate-slash replacement on the strings between those occurrences\n    // (if any).\n    const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n    let lastIndex = 0;\n    let result = '';\n\n    for (;;) {\n      const match = protocolRegex.exec(urlObject.pathname);\n\n      if (!match) {\n        break;\n      }\n\n      const protocol = match[0];\n      const protocolAtIndex = match.index;\n      const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n      result += intermediate.replace(/\\/{2,}/g, '/');\n      result += protocol;\n      lastIndex = protocolAtIndex + protocol.length;\n    }\n\n    const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n    result += remnant.replace(/\\/{2,}/g, '/');\n    urlObject.pathname = result;\n  } // Decode URI octets\n\n\n  if (urlObject.pathname) {\n    try {\n      urlObject.pathname = decodeURI(urlObject.pathname);\n    } catch {}\n  } // Remove directory index\n\n\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObject.pathname.split('/');\n    const lastComponent = pathComponents[pathComponents.length - 1];\n\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, -1);\n      urlObject.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n\n  if (urlObject.hostname) {\n    // Remove trailing dot\n    urlObject.hostname = urlObject.hostname.replace(/\\.$/, ''); // Remove `www.`\n\n    if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n      // Each label should be max 63 at length (min: 1).\n      // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n      // Each TLD should be up to 63 characters long (min: 2).\n      // It is technically possible to have a single character TLD, but none currently exist.\n      urlObject.hostname = urlObject.hostname.replace(/^www\\./, '');\n    }\n  } // Remove query unwanted parameters\n\n\n  if (Array.isArray(options.removeQueryParameters)) {\n    // eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n\n  if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n    urlObject.search = '';\n  } // Keep wanted query parameters\n\n\n  if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n    // eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (!testParameter(key, options.keepQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  } // Sort query parameters\n\n\n  if (options.sortQueryParameters) {\n    urlObject.searchParams.sort(); // Calling `.sort()` encodes the search parameters, so we need to decode them again.\n\n    try {\n      urlObject.search = decodeURIComponent(urlObject.search);\n    } catch {}\n  }\n\n  if (options.removeTrailingSlash) {\n    urlObject.pathname = urlObject.pathname.replace(/\\/$/, '');\n  } // Remove an explicit port number, excluding a default port number, if applicable\n\n\n  if (options.removeExplicitPort && urlObject.port) {\n    urlObject.port = '';\n  }\n\n  const oldUrlString = urlString; // Take advantage of many of the Node `url` normalizations\n\n  urlString = urlObject.toString();\n\n  if (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {\n    urlString = urlString.replace(/\\/$/, '');\n  } // Remove ending `/` unless removeSingleSlash is false\n\n\n  if ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {\n    urlString = urlString.replace(/\\/$/, '');\n  } // Restore relative protocol, if applicable\n\n\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, '//');\n  } // Remove http/https\n\n\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n  }\n\n  return urlString;\n}","map":{"version":3,"names":["DATA_URL_DEFAULT_MIME_TYPE","DATA_URL_DEFAULT_CHARSET","testParameter","name","filters","some","filter","RegExp","test","supportedProtocols","Set","hasCustomProtocol","urlString","protocol","URL","endsWith","has","normalizeDataURL","stripHash","match","exec","Error","type","data","hash","groups","mediaType","split","isBase64","length","pop","mimeType","shift","toLowerCase","attributes","map","attribute","key","value","string","trim","Boolean","normalizedMediaType","push","unshift","join","normalizeUrl","options","defaultProtocol","normalizeProtocol","forceHttp","forceHttps","stripAuthentication","stripTextFragment","stripWWW","removeQueryParameters","removeTrailingSlash","removeSingleSlash","removeDirectoryIndex","removeExplicitPort","sortQueryParameters","hasRelativeProtocol","startsWith","isRelativeUrl","replace","urlObject","username","password","pathname","protocolRegex","lastIndex","result","protocolAtIndex","index","intermediate","slice","remnant","decodeURI","Array","isArray","pathComponents","lastComponent","hostname","searchParams","keys","delete","keepQueryParameters","search","sort","decodeURIComponent","port","oldUrlString","toString","stripProtocol"],"sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/node_modules/ipify/node_modules/normalize-url/index.js"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n\nconst supportedProtocols = new Set([\n\t'https:',\n\t'http:',\n\t'file:',\n]);\n\nconst hasCustomProtocol = urlString => {\n\ttry {\n\t\tconst {protocol} = new URL(urlString);\n\t\treturn protocol.endsWith(':') && !supportedProtocols.has(protocol);\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nconst normalizeDataURL = (urlString, {stripHash}) => {\n\tconst match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n\n\tif (!match) {\n\t\tthrow new Error(`Invalid URL: ${urlString}`);\n\t}\n\n\tlet {type, data, hash} = match.groups;\n\tconst mediaType = type.split(';');\n\thash = stripHash ? '' : hash;\n\n\tlet isBase64 = false;\n\tif (mediaType[mediaType.length - 1] === 'base64') {\n\t\tmediaType.pop();\n\t\tisBase64 = true;\n\t}\n\n\t// Lowercase MIME type\n\tconst mimeType = mediaType.shift()?.toLowerCase() ?? '';\n\tconst attributes = mediaType\n\t\t.map(attribute => {\n\t\t\tlet [key, value = ''] = attribute.split('=').map(string => string.trim());\n\n\t\t\t// Lowercase `charset`\n\t\t\tif (key === 'charset') {\n\t\t\t\tvalue = value.toLowerCase();\n\n\t\t\t\tif (value === DATA_URL_DEFAULT_CHARSET) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn `${key}${value ? `=${value}` : ''}`;\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst normalizedMediaType = [\n\t\t...attributes,\n\t];\n\n\tif (isBase64) {\n\t\tnormalizedMediaType.push('base64');\n\t}\n\n\tif (normalizedMediaType.length > 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {\n\t\tnormalizedMediaType.unshift(mimeType);\n\t}\n\n\treturn `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;\n};\n\nexport default function normalizeUrl(urlString, options) {\n\toptions = {\n\t\tdefaultProtocol: 'http',\n\t\tnormalizeProtocol: true,\n\t\tforceHttp: false,\n\t\tforceHttps: false,\n\t\tstripAuthentication: true,\n\t\tstripHash: false,\n\t\tstripTextFragment: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveSingleSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tremoveExplicitPort: false,\n\t\tsortQueryParameters: true,\n\t\t...options,\n\t};\n\n\t// Legacy: Append `:` to the protocol if missing.\n\tif (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {\n\t\toptions.defaultProtocol = `${options.defaultProtocol}:`;\n\t}\n\n\turlString = urlString.trim();\n\n\t// Data URL\n\tif (/^data:/i.test(urlString)) {\n\t\treturn normalizeDataURL(urlString, options);\n\t}\n\n\tif (hasCustomProtocol(urlString)) {\n\t\treturn urlString;\n\t}\n\n\tconst hasRelativeProtocol = urlString.startsWith('//');\n\tconst isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n\t// Prepend protocol\n\tif (!isRelativeUrl) {\n\t\turlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n\t}\n\n\tconst urlObject = new URL(urlString);\n\n\tif (options.forceHttp && options.forceHttps) {\n\t\tthrow new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n\t}\n\n\tif (options.forceHttp && urlObject.protocol === 'https:') {\n\t\turlObject.protocol = 'http:';\n\t}\n\n\tif (options.forceHttps && urlObject.protocol === 'http:') {\n\t\turlObject.protocol = 'https:';\n\t}\n\n\t// Remove auth\n\tif (options.stripAuthentication) {\n\t\turlObject.username = '';\n\t\turlObject.password = '';\n\t}\n\n\t// Remove hash\n\tif (options.stripHash) {\n\t\turlObject.hash = '';\n\t} else if (options.stripTextFragment) {\n\t\turlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');\n\t}\n\n\t// Remove duplicate slashes if not preceded by a protocol\n\t// NOTE: This could be implemented using a single negative lookbehind\n\t// regex, but we avoid that to maintain compatibility with older js engines\n\t// which do not have support for that feature.\n\tif (urlObject.pathname) {\n\t\t// TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n\n\t\t// Split the string by occurrences of this protocol regex, and perform\n\t\t// duplicate-slash replacement on the strings between those occurrences\n\t\t// (if any).\n\t\tconst protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n\n\t\tlet lastIndex = 0;\n\t\tlet result = '';\n\t\tfor (;;) {\n\t\t\tconst match = protocolRegex.exec(urlObject.pathname);\n\t\t\tif (!match) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst protocol = match[0];\n\t\t\tconst protocolAtIndex = match.index;\n\t\t\tconst intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n\n\t\t\tresult += intermediate.replace(/\\/{2,}/g, '/');\n\t\t\tresult += protocol;\n\t\t\tlastIndex = protocolAtIndex + protocol.length;\n\t\t}\n\n\t\tconst remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n\t\tresult += remnant.replace(/\\/{2,}/g, '/');\n\n\t\turlObject.pathname = result;\n\t}\n\n\t// Decode URI octets\n\tif (urlObject.pathname) {\n\t\ttry {\n\t\t\turlObject.pathname = decodeURI(urlObject.pathname);\n\t\t} catch {}\n\t}\n\n\t// Remove directory index\n\tif (options.removeDirectoryIndex === true) {\n\t\toptions.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObject.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, options.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, -1);\n\t\t\turlObject.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\tif (urlObject.hostname) {\n\t\t// Remove trailing dot\n\t\turlObject.hostname = urlObject.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\tif (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n\t\t\t// Each label should be max 63 at length (min: 1).\n\t\t\t// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n\t\t\t// Each TLD should be up to 63 characters long (min: 2).\n\t\t\t// It is technically possible to have a single character TLD, but none currently exist.\n\t\t\turlObject.hostname = urlObject.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(options.removeQueryParameters)) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (testParameter(key, options.removeQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n\t\turlObject.search = '';\n\t}\n\n\t// Keep wanted query parameters\n\tif (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (!testParameter(key, options.keepQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (options.sortQueryParameters) {\n\t\turlObject.searchParams.sort();\n\n\t\t// Calling `.sort()` encodes the search parameters, so we need to decode them again.\n\t\ttry {\n\t\t\turlObject.search = decodeURIComponent(urlObject.search);\n\t\t} catch {}\n\t}\n\n\tif (options.removeTrailingSlash) {\n\t\turlObject.pathname = urlObject.pathname.replace(/\\/$/, '');\n\t}\n\n\t// Remove an explicit port number, excluding a default port number, if applicable\n\tif (options.removeExplicitPort && urlObject.port) {\n\t\turlObject.port = '';\n\t}\n\n\tconst oldUrlString = urlString;\n\n\t// Take advantage of many of the Node `url` normalizations\n\turlString = urlObject.toString();\n\n\tif (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Remove ending `/` unless removeSingleSlash is false\n\tif ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !options.normalizeProtocol) {\n\t\turlString = urlString.replace(/^http:\\/\\//, '//');\n\t}\n\n\t// Remove http/https\n\tif (options.stripProtocol) {\n\t\turlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n\t}\n\n\treturn urlString;\n}\n"],"mappings":";AAAA;AACA,MAAMA,0BAA0B,GAAG,YAAnC;AACA,MAAMC,wBAAwB,GAAG,UAAjC;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmBA,OAAO,CAACC,IAAR,CAAaC,MAAM,IAAIA,MAAM,YAAYC,MAAlB,GAA2BD,MAAM,CAACE,IAAP,CAAYL,IAAZ,CAA3B,GAA+CG,MAAM,KAAKH,IAAjF,CAAzC;;AAEA,MAAMM,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAClC,QADkC,EAElC,OAFkC,EAGlC,OAHkC,CAAR,CAA3B;;AAMA,MAAMC,iBAAiB,GAAGC,SAAS,IAAI;EACtC,IAAI;IACH,MAAM;MAACC;IAAD,IAAa,IAAIC,GAAJ,CAAQF,SAAR,CAAnB;IACA,OAAOC,QAAQ,CAACE,QAAT,CAAkB,GAAlB,KAA0B,CAACN,kBAAkB,CAACO,GAAnB,CAAuBH,QAAvB,CAAlC;EACA,CAHD,CAGE,MAAM;IACP,OAAO,KAAP;EACA;AACD,CAPD;;AASA,MAAMI,gBAAgB,GAAG,CAACL,SAAD,EAAY;EAACM;AAAD,CAAZ,KAA4B;EACpD,MAAMC,KAAK,GAAG,0DAA0DC,IAA1D,CAA+DR,SAA/D,CAAd;;EAEA,IAAI,CAACO,KAAL,EAAY;IACX,MAAM,IAAIE,KAAJ,CAAW,gBAAeT,SAAU,EAApC,CAAN;EACA;;EAED,IAAI;IAACU,IAAD;IAAOC,IAAP;IAAaC;EAAb,IAAqBL,KAAK,CAACM,MAA/B;EACA,MAAMC,SAAS,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAAlB;EACAH,IAAI,GAAGN,SAAS,GAAG,EAAH,GAAQM,IAAxB;EAEA,IAAII,QAAQ,GAAG,KAAf;;EACA,IAAIF,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAAT,KAAoC,QAAxC,EAAkD;IACjDH,SAAS,CAACI,GAAV;IACAF,QAAQ,GAAG,IAAX;EACA,CAfmD,CAiBpD;;;EACA,MAAMG,QAAQ,GAAGL,SAAS,CAACM,KAAV,IAAmBC,WAAnB,MAAoC,EAArD;EACA,MAAMC,UAAU,GAAGR,SAAS,CAC1BS,GADiB,CACbC,SAAS,IAAI;IACjB,IAAI,CAACC,GAAD,EAAMC,KAAK,GAAG,EAAd,IAAoBF,SAAS,CAACT,KAAV,CAAgB,GAAhB,EAAqBQ,GAArB,CAAyBI,MAAM,IAAIA,MAAM,CAACC,IAAP,EAAnC,CAAxB,CADiB,CAGjB;;IACA,IAAIH,GAAG,KAAK,SAAZ,EAAuB;MACtBC,KAAK,GAAGA,KAAK,CAACL,WAAN,EAAR;;MAEA,IAAIK,KAAK,KAAKrC,wBAAd,EAAwC;QACvC,OAAO,EAAP;MACA;IACD;;IAED,OAAQ,GAAEoC,GAAI,GAAEC,KAAK,GAAI,IAAGA,KAAM,EAAb,GAAiB,EAAG,EAAzC;EACA,CAdiB,EAejBhC,MAfiB,CAeVmC,OAfU,CAAnB;EAiBA,MAAMC,mBAAmB,GAAG,CAC3B,GAAGR,UADwB,CAA5B;;EAIA,IAAIN,QAAJ,EAAc;IACbc,mBAAmB,CAACC,IAApB,CAAyB,QAAzB;EACA;;EAED,IAAID,mBAAmB,CAACb,MAApB,GAA6B,CAA7B,IAAmCE,QAAQ,IAAIA,QAAQ,KAAK/B,0BAAhE,EAA6F;IAC5F0C,mBAAmB,CAACE,OAApB,CAA4Bb,QAA5B;EACA;;EAED,OAAQ,QAAOW,mBAAmB,CAACG,IAApB,CAAyB,GAAzB,CAA8B,IAAGjB,QAAQ,GAAGL,IAAI,CAACiB,IAAL,EAAH,GAAiBjB,IAAK,GAAEC,IAAI,GAAI,IAAGA,IAAK,EAAZ,GAAgB,EAAG,EAAvG;AACA,CAjDD;;AAmDA,eAAe,SAASsB,YAAT,CAAsBlC,SAAtB,EAAiCmC,OAAjC,EAA0C;EACxDA,OAAO,GAAG;IACTC,eAAe,EAAE,MADR;IAETC,iBAAiB,EAAE,IAFV;IAGTC,SAAS,EAAE,KAHF;IAITC,UAAU,EAAE,KAJH;IAKTC,mBAAmB,EAAE,IALZ;IAMTlC,SAAS,EAAE,KANF;IAOTmC,iBAAiB,EAAE,IAPV;IAQTC,QAAQ,EAAE,IARD;IASTC,qBAAqB,EAAE,CAAC,WAAD,CATd;IAUTC,mBAAmB,EAAE,IAVZ;IAWTC,iBAAiB,EAAE,IAXV;IAYTC,oBAAoB,EAAE,KAZb;IAaTC,kBAAkB,EAAE,KAbX;IAcTC,mBAAmB,EAAE,IAdZ;IAeT,GAAGb;EAfM,CAAV,CADwD,CAmBxD;;EACA,IAAI,OAAOA,OAAO,CAACC,eAAf,KAAmC,QAAnC,IAA+C,CAACD,OAAO,CAACC,eAAR,CAAwBjC,QAAxB,CAAiC,GAAjC,CAApD,EAA2F;IAC1FgC,OAAO,CAACC,eAAR,GAA2B,GAAED,OAAO,CAACC,eAAgB,GAArD;EACA;;EAEDpC,SAAS,GAAGA,SAAS,CAAC4B,IAAV,EAAZ,CAxBwD,CA0BxD;;EACA,IAAI,UAAUhC,IAAV,CAAeI,SAAf,CAAJ,EAA+B;IAC9B,OAAOK,gBAAgB,CAACL,SAAD,EAAYmC,OAAZ,CAAvB;EACA;;EAED,IAAIpC,iBAAiB,CAACC,SAAD,CAArB,EAAkC;IACjC,OAAOA,SAAP;EACA;;EAED,MAAMiD,mBAAmB,GAAGjD,SAAS,CAACkD,UAAV,CAAqB,IAArB,CAA5B;EACA,MAAMC,aAAa,GAAG,CAACF,mBAAD,IAAwB,SAASrD,IAAT,CAAcI,SAAd,CAA9C,CApCwD,CAsCxD;;EACA,IAAI,CAACmD,aAAL,EAAoB;IACnBnD,SAAS,GAAGA,SAAS,CAACoD,OAAV,CAAkB,0BAAlB,EAA8CjB,OAAO,CAACC,eAAtD,CAAZ;EACA;;EAED,MAAMiB,SAAS,GAAG,IAAInD,GAAJ,CAAQF,SAAR,CAAlB;;EAEA,IAAImC,OAAO,CAACG,SAAR,IAAqBH,OAAO,CAACI,UAAjC,EAA6C;IAC5C,MAAM,IAAI9B,KAAJ,CAAU,kEAAV,CAAN;EACA;;EAED,IAAI0B,OAAO,CAACG,SAAR,IAAqBe,SAAS,CAACpD,QAAV,KAAuB,QAAhD,EAA0D;IACzDoD,SAAS,CAACpD,QAAV,GAAqB,OAArB;EACA;;EAED,IAAIkC,OAAO,CAACI,UAAR,IAAsBc,SAAS,CAACpD,QAAV,KAAuB,OAAjD,EAA0D;IACzDoD,SAAS,CAACpD,QAAV,GAAqB,QAArB;EACA,CAvDuD,CAyDxD;;;EACA,IAAIkC,OAAO,CAACK,mBAAZ,EAAiC;IAChCa,SAAS,CAACC,QAAV,GAAqB,EAArB;IACAD,SAAS,CAACE,QAAV,GAAqB,EAArB;EACA,CA7DuD,CA+DxD;;;EACA,IAAIpB,OAAO,CAAC7B,SAAZ,EAAuB;IACtB+C,SAAS,CAACzC,IAAV,GAAiB,EAAjB;EACA,CAFD,MAEO,IAAIuB,OAAO,CAACM,iBAAZ,EAA+B;IACrCY,SAAS,CAACzC,IAAV,GAAiByC,SAAS,CAACzC,IAAV,CAAewC,OAAf,CAAuB,gBAAvB,EAAyC,EAAzC,CAAjB;EACA,CApEuD,CAsExD;EACA;EACA;EACA;;;EACA,IAAIC,SAAS,CAACG,QAAd,EAAwB;IACvB;IAEA;IACA;IACA;IACA,MAAMC,aAAa,GAAG,gCAAtB;IAEA,IAAIC,SAAS,GAAG,CAAhB;IACA,IAAIC,MAAM,GAAG,EAAb;;IACA,SAAS;MACR,MAAMpD,KAAK,GAAGkD,aAAa,CAACjD,IAAd,CAAmB6C,SAAS,CAACG,QAA7B,CAAd;;MACA,IAAI,CAACjD,KAAL,EAAY;QACX;MACA;;MAED,MAAMN,QAAQ,GAAGM,KAAK,CAAC,CAAD,CAAtB;MACA,MAAMqD,eAAe,GAAGrD,KAAK,CAACsD,KAA9B;MACA,MAAMC,YAAY,GAAGT,SAAS,CAACG,QAAV,CAAmBO,KAAnB,CAAyBL,SAAzB,EAAoCE,eAApC,CAArB;MAEAD,MAAM,IAAIG,YAAY,CAACV,OAAb,CAAqB,SAArB,EAAgC,GAAhC,CAAV;MACAO,MAAM,IAAI1D,QAAV;MACAyD,SAAS,GAAGE,eAAe,GAAG3D,QAAQ,CAACgB,MAAvC;IACA;;IAED,MAAM+C,OAAO,GAAGX,SAAS,CAACG,QAAV,CAAmBO,KAAnB,CAAyBL,SAAzB,EAAoCL,SAAS,CAACG,QAAV,CAAmBvC,MAAvD,CAAhB;IACA0C,MAAM,IAAIK,OAAO,CAACZ,OAAR,CAAgB,SAAhB,EAA2B,GAA3B,CAAV;IAEAC,SAAS,CAACG,QAAV,GAAqBG,MAArB;EACA,CAvGuD,CAyGxD;;;EACA,IAAIN,SAAS,CAACG,QAAd,EAAwB;IACvB,IAAI;MACHH,SAAS,CAACG,QAAV,GAAqBS,SAAS,CAACZ,SAAS,CAACG,QAAX,CAA9B;IACA,CAFD,CAEE,MAAM,CAAE;EACV,CA9GuD,CAgHxD;;;EACA,IAAIrB,OAAO,CAACW,oBAAR,KAAiC,IAArC,EAA2C;IAC1CX,OAAO,CAACW,oBAAR,GAA+B,CAAC,iBAAD,CAA/B;EACA;;EAED,IAAIoB,KAAK,CAACC,OAAN,CAAchC,OAAO,CAACW,oBAAtB,KAA+CX,OAAO,CAACW,oBAAR,CAA6B7B,MAA7B,GAAsC,CAAzF,EAA4F;IAC3F,IAAImD,cAAc,GAAGf,SAAS,CAACG,QAAV,CAAmBzC,KAAnB,CAAyB,GAAzB,CAArB;IACA,MAAMsD,aAAa,GAAGD,cAAc,CAACA,cAAc,CAACnD,MAAf,GAAwB,CAAzB,CAApC;;IAEA,IAAI3B,aAAa,CAAC+E,aAAD,EAAgBlC,OAAO,CAACW,oBAAxB,CAAjB,EAAgE;MAC/DsB,cAAc,GAAGA,cAAc,CAACL,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAjB;MACAV,SAAS,CAACG,QAAV,GAAqBY,cAAc,CAACL,KAAf,CAAqB,CAArB,EAAwB9B,IAAxB,CAA6B,GAA7B,IAAoC,GAAzD;IACA;EACD;;EAED,IAAIoB,SAAS,CAACiB,QAAd,EAAwB;IACvB;IACAjB,SAAS,CAACiB,QAAV,GAAqBjB,SAAS,CAACiB,QAAV,CAAmBlB,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAArB,CAFuB,CAIvB;;IACA,IAAIjB,OAAO,CAACO,QAAR,IAAoB,oDAAoD9C,IAApD,CAAyDyD,SAAS,CAACiB,QAAnE,CAAxB,EAAsG;MACrG;MACA;MACA;MACA;MACAjB,SAAS,CAACiB,QAAV,GAAqBjB,SAAS,CAACiB,QAAV,CAAmBlB,OAAnB,CAA2B,QAA3B,EAAqC,EAArC,CAArB;IACA;EACD,CA3IuD,CA6IxD;;;EACA,IAAIc,KAAK,CAACC,OAAN,CAAchC,OAAO,CAACQ,qBAAtB,CAAJ,EAAkD;IACjD;IACA,KAAK,MAAMlB,GAAX,IAAkB,CAAC,GAAG4B,SAAS,CAACkB,YAAV,CAAuBC,IAAvB,EAAJ,CAAlB,EAAsD;MACrD,IAAIlF,aAAa,CAACmC,GAAD,EAAMU,OAAO,CAACQ,qBAAd,CAAjB,EAAuD;QACtDU,SAAS,CAACkB,YAAV,CAAuBE,MAAvB,CAA8BhD,GAA9B;MACA;IACD;EACD;;EAED,IAAI,CAACyC,KAAK,CAACC,OAAN,CAAchC,OAAO,CAACuC,mBAAtB,CAAD,IAA+CvC,OAAO,CAACQ,qBAAR,KAAkC,IAArF,EAA2F;IAC1FU,SAAS,CAACsB,MAAV,GAAmB,EAAnB;EACA,CAzJuD,CA2JxD;;;EACA,IAAIT,KAAK,CAACC,OAAN,CAAchC,OAAO,CAACuC,mBAAtB,KAA8CvC,OAAO,CAACuC,mBAAR,CAA4BzD,MAA5B,GAAqC,CAAvF,EAA0F;IACzF;IACA,KAAK,MAAMQ,GAAX,IAAkB,CAAC,GAAG4B,SAAS,CAACkB,YAAV,CAAuBC,IAAvB,EAAJ,CAAlB,EAAsD;MACrD,IAAI,CAAClF,aAAa,CAACmC,GAAD,EAAMU,OAAO,CAACuC,mBAAd,CAAlB,EAAsD;QACrDrB,SAAS,CAACkB,YAAV,CAAuBE,MAAvB,CAA8BhD,GAA9B;MACA;IACD;EACD,CAnKuD,CAqKxD;;;EACA,IAAIU,OAAO,CAACa,mBAAZ,EAAiC;IAChCK,SAAS,CAACkB,YAAV,CAAuBK,IAAvB,GADgC,CAGhC;;IACA,IAAI;MACHvB,SAAS,CAACsB,MAAV,GAAmBE,kBAAkB,CAACxB,SAAS,CAACsB,MAAX,CAArC;IACA,CAFD,CAEE,MAAM,CAAE;EACV;;EAED,IAAIxC,OAAO,CAACS,mBAAZ,EAAiC;IAChCS,SAAS,CAACG,QAAV,GAAqBH,SAAS,CAACG,QAAV,CAAmBJ,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAArB;EACA,CAjLuD,CAmLxD;;;EACA,IAAIjB,OAAO,CAACY,kBAAR,IAA8BM,SAAS,CAACyB,IAA5C,EAAkD;IACjDzB,SAAS,CAACyB,IAAV,GAAiB,EAAjB;EACA;;EAED,MAAMC,YAAY,GAAG/E,SAArB,CAxLwD,CA0LxD;;EACAA,SAAS,GAAGqD,SAAS,CAAC2B,QAAV,EAAZ;;EAEA,IAAI,CAAC7C,OAAO,CAACU,iBAAT,IAA8BQ,SAAS,CAACG,QAAV,KAAuB,GAArD,IAA4D,CAACuB,YAAY,CAAC5E,QAAb,CAAsB,GAAtB,CAA7D,IAA2FkD,SAAS,CAACzC,IAAV,KAAmB,EAAlH,EAAsH;IACrHZ,SAAS,GAAGA,SAAS,CAACoD,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAZ;EACA,CA/LuD,CAiMxD;;;EACA,IAAI,CAACjB,OAAO,CAACS,mBAAR,IAA+BS,SAAS,CAACG,QAAV,KAAuB,GAAvD,KAA+DH,SAAS,CAACzC,IAAV,KAAmB,EAAlF,IAAwFuB,OAAO,CAACU,iBAApG,EAAuH;IACtH7C,SAAS,GAAGA,SAAS,CAACoD,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAZ;EACA,CApMuD,CAsMxD;;;EACA,IAAIH,mBAAmB,IAAI,CAACd,OAAO,CAACE,iBAApC,EAAuD;IACtDrC,SAAS,GAAGA,SAAS,CAACoD,OAAV,CAAkB,YAAlB,EAAgC,IAAhC,CAAZ;EACA,CAzMuD,CA2MxD;;;EACA,IAAIjB,OAAO,CAAC8C,aAAZ,EAA2B;IAC1BjF,SAAS,GAAGA,SAAS,CAACoD,OAAV,CAAkB,mBAAlB,EAAuC,EAAvC,CAAZ;EACA;;EAED,OAAOpD,SAAP;AACA"},"metadata":{},"sourceType":"module"}