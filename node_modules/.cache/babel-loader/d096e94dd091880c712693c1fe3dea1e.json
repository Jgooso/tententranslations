{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport GenreSelector from '../components/GenreSelector';\nimport TagSelector from '../components/TagSelector';\nimport ChapterSelector from '../components/ChapterSelector';\nexport default {\n  data() {\n    return {\n      selectednovel: [],\n      novelList: [],\n      novelData: [],\n      tags: [],\n      genres: [],\n      editType: 'novel',\n      chapterList: []\n    };\n  },\n\n  components: {\n    GenreSelector,\n    TagSelector,\n    ChapterSelector\n  },\n  methods: {\n    confirm(open) {\n      var confirmationBox = document.getElementById('confirmationBox');\n\n      if (open == 0) {\n        confirmationBox.style.display = 'flex';\n      } else if (open == 1) {\n        confirmationBox.style.display = 'none';\n      } else if (open == 2) {\n        if (this.novelData.novelactive == 1) {\n          this.novelData.novelactive = 0;\n        } else {\n          this.novelData.novelactive = 1;\n        }\n\n        confirmationBox.style.display = 'none';\n      }\n    },\n\n    selectNovel() {\n      this.selectednovel = document.getElementById(\"novel-selector\").value;\n      console.log(this.selectednovel);\n      const url = '/novel/single?novel=' + this.selectednovel + '&tier=5&edit=True';\n      getAPI.get(url).then(response => {\n        console.log('Post Novel has recieved data');\n        this.novelData = response.data['Novel'];\n        this.chapterList = response.data['Chapters'].filter(chapter => chapter.chapternumber != 0);\n        this.genres = response.data['Genres'];\n        this.tags = response.data['Tags'];\n        console.log(response.data['Chapters']);\n        this.isMounted = true;\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n\n    submit() {\n      //const loadingscreen = document.getElementById('loadingscreen')\n      //loadingscreen.style.display = 'block'\n      const genres = document.getElementsByClassName('genrecheckbox');\n      var selectedGenres = [];\n\n      for (var i = 0; i < genres.length; i++) {\n        if (genres[i].checked == true) {\n          selectedGenres.push(genres[i].value);\n        }\n      }\n\n      console.log('posted');\n      this.novelData.novelstatus = document.getElementById('completedEdit').value;\n      this.novelData.description = document.getElementById('novelDescription').innerHTML;\n      this.novelData.title = document.getElementById('novelTitle').innerHTML;\n      const url = '/novel/single?novel=' + this.selectednovel;\n      getAPI.put(url, {\n        description: this.novelData.description,\n        tags: this.novelData.tags,\n        genres: selectedGenres,\n        completed: this.novelData.novelstatus,\n        title: this.novelData.title,\n        novelactive: this.novelData.novelactive\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    showGenres() {\n      var genre_selector = document.getElementById('genre-selector');\n      console.log(genre_selector);\n\n      if (genre_selector.style.display == 'flex') {\n        genre_selector.style.display = 'none';\n        console.log('flex');\n      } else {\n        genre_selector.style.display = 'flex';\n        console.log('none');\n      }\n    },\n\n    switchEdit() {\n      console.log(this.editType);\n\n      if (this.editType == 'novel') {\n        this.editType = 'chapters';\n      } else {\n        this.editType = 'novel';\n      }\n    }\n\n  },\n\n  created() {\n    getAPI.get('/noveltitles').then(response => {\n      console.log('Chapter API has recieved data');\n      this.novelList = response.data;\n      console.log(response.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","GenreSelector","TagSelector","ChapterSelector","data","selectednovel","novelList","novelData","tags","genres","editType","chapterList","components","methods","confirm","open","confirmationBox","document","getElementById","style","display","novelactive","selectNovel","value","console","log","url","get","then","response","filter","chapter","chapternumber","isMounted","catch","err","submit","getElementsByClassName","selectedGenres","i","length","checked","push","novelstatus","description","innerHTML","title","put","completed","error","showGenres","genre_selector","switchEdit","created"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/EditPage.vue"],"sourcesContent":["<template>\n<div>\n    <div id = 'confirmationBox'>\n        <h1 style = 'margin:auto;'>{{novelData.novelactive==0 ? 'Confirm Activate Novel' : \"Confirm Deactivate Novel\"}}</h1>\n        <div style='display:flex;flex-direction:row;margin:auto; width:220px'>\n        <button @click='confirm(2)' class = 'confirmation-button'>Confirm</button>\n        <button @click='confirm(1)' class = 'confirmation-button'>Cancel</button>\n        \n        </div>\n    </div>\n    <select id = 'novel-selector' @change=\"selectNovel()\">\n        <option v-for='novel in novelList' :value='novel.novelid'>{{novel.title}}</option>\n    </select>\n    <label class=\"toggle\">\n        <input type=\"checkbox\" @click='switchEdit()'>\n        <span class=\"slider round\"></span>\n        <span class=\"labels\" data-on=\"Chapter\" data-off=\"Novel\"></span>\n    </label>\n    <!-- Novel Edit-->\n    <table id = 'editTable' v-if='editType==\"novel\"'>\n        <tr>\n            <td class = 'category'>Title</td>\n            <td v-text = 'novelData.title' contenteditable=\"true\" id = 'novelTitle'/>\n        </tr>\n        <tr>\n            <td  class = 'category'>Description</td>\n            <td v-html = 'novelData.description' contenteditable=\"true\" id = 'novelDescription'/>\n        </tr>\n        <tr>\n            <td  class = 'category'>Novel Active</td>\n            <td><button @click='confirm(0)'>{{novelData.novelactive==0 ? 'Activate Novel' : \"Deactivate Novel\"}}</button></td>\n        </tr>\n        <tr>\n            <td  class = 'category'>Raw Status</td>\n            <td>\n                <select id = 'completedEdit' :selected='value=novelData.novelstatus'>\n                    <option value = 'Ongoing'>Ongoing</option>\n                    <option value = 'Completed'>Completed</option>\n                    <option value = 'On Hold'>On Hold</option>\n                    <option value = 'Dropped'>Dropped</option>\n                </select>\n            </td>\n        </tr>\n        <tr>\n            <td  class = 'category'><button id = 'show-genres' @click='showGenres()'>Genres</button></td>\n            <td id = 'genre-selector'>\n                <GenreSelector\n                :genres='genres'\n                :selectedgenres='novelData.genres'\n                />\n            </td>\n        </tr>\n        <tr>\n            <td  class = 'category'>Tags</td>\n            <td id = 'tag-selector'>\n                <TagSelector\n                :tags='tags'\n                :selectedtags='novelData.tags'\n                />\n            </td>\n        </tr>\n        <tr>\n        <td><button @click='submit()'>Submit</button></td>\n        </tr>\n    </table>\n    <!-- Novel Edit End-->\n\n    <!-- Chapter Edit-->\n    <div id = \"TableOfContents\" v-if='editType=\"chapters\"'>\n        <ul  id = 'table' ref='tableofcontentlist'>\n        <li v-for=\"chapter in chapterList\" :key=\"section.section\">\n            <button v-html='chapter.title'/>\n            <br>\n        </li>\n        </ul>\n        <ul v-if='sectionList.length==0'>\n                <li v-for=\"chapter in chapterList\" :key='chapter.chapterNumber'>\n                <router-link \n                    :to = \"{name: 'chapterPage', params:{title:novelData.novelid,chapter:chapter.chapternumber}}\" class=\"group\">\n                    <p class = 'title'>{{chapter.title}}</p>\n                    <p class = \"date\">{{new Date(chapter.uploaddate).toLocaleString('default', { month: 'long', day:'numeric', year:'numeric' })}}</p>\n                </router-link>\n                </li>\n            </ul>\n        <button @click='showMore()' id = 'showMore' v-if='chapterList.length+sectionList.length > 25'>Show More &#9662;</button>\n    </div>\n    <!-- Chapter Edit End-->\n</div>\n</template>\n\n\n<script>\nimport { getAPI } from '../axios-api'\nimport GenreSelector from '../components/GenreSelector'\nimport TagSelector from '../components/TagSelector'\nimport ChapterSelector from '../components/ChapterSelector'\nexport default{\n    data (){\n        return{\n            selectednovel:[],\n            novelList:[],\n            novelData:[],\n            tags:[],\n            genres:[],\n            editType:'novel',\n            chapterList:[],\n        }\n    },\n    components:{\n        GenreSelector,\n        TagSelector,\n        ChapterSelector\n    },\n    methods:{\n        confirm(open){\n            var confirmationBox = document.getElementById('confirmationBox')\n            if(open == 0){\n                confirmationBox.style.display = 'flex'\n            }else if(open == 1){\n                confirmationBox.style.display = 'none'\n            }else if(open == 2){\n                if(this.novelData.novelactive == 1){this.novelData.novelactive=0}\n                else{this.novelData.novelactive=1}\n                confirmationBox.style.display = 'none'\n            }\n        },\n        selectNovel(){\n            this.selectednovel = document.getElementById(\"novel-selector\").value\n            console.log(this.selectednovel)\n            const url = '/novel/single?novel='+this.selectednovel+'&tier=5&edit=True'\n            getAPI.get(url)\n          .then(response => {\n            console.log('Post Novel has recieved data')\n            this.novelData=response.data['Novel']\n            this.chapterList=response.data['Chapters'].filter(chapter => chapter.chapternumber != 0)\n            this.genres = response.data['Genres']\n            this.tags = response.data['Tags']\n            console.log(response.data['Chapters'])\n            this.isMounted=true\n          })\n          .catch(err => {\n            console.log(err)\n          })\n       \n        },\n        submit(){\n            //const loadingscreen = document.getElementById('loadingscreen')\n            //loadingscreen.style.display = 'block'\n            const genres = document.getElementsByClassName('genrecheckbox')\n            var selectedGenres = []\n            for(var i=0; i < genres.length; i++){\n                if(genres[i].checked==true){\n                    selectedGenres.push(genres[i].value)\n                }\n            }\n            console.log('posted')\n               this.novelData.novelstatus=document.getElementById('completedEdit').value\n               this.novelData.description=document.getElementById('novelDescription').innerHTML\n               this.novelData.title=document.getElementById('novelTitle').innerHTML\n               const url = '/novel/single?novel='+this.selectednovel\n            getAPI.put(url,{\n                   description:this.novelData.description,\n                   tags:this.novelData.tags,\n                   genres:selectedGenres,\n                   completed:this.novelData.novelstatus,\n                   title:this.novelData.title,\n                   novelactive:this.novelData.novelactive\n               }).then(function (response) {\n                    console.log(response);\n            })\n                .catch(function (error) {\n                    console.log(error);\n            })\n        },\n        showGenres(){\n            var genre_selector = document.getElementById('genre-selector')\n            console.log(genre_selector)\n            if(genre_selector.style.display=='flex'){\n                genre_selector.style.display = 'none'\n                console.log('flex')\n            }else{\n                genre_selector.style.display = 'flex'\n                console.log('none')\n            }\n        },\n        switchEdit(){\n            console.log(this.editType)\n            if(this.editType=='novel'){\n                this.editType='chapters'\n            }else{\n                this.editType='novel'\n            }\n        }\n    },\n    created(){\n        getAPI.get('/noveltitles')\n          .then(response => {\n            console.log('Chapter API has recieved data')\n            this.novelList = response.data\n            console.log(response.data)\n          })\n          .catch(err => {\n            console.log(err)\n          })\n    }\n}\n</script>\n<style scoped>\n#novel-selector{\n    width:80%;\n}\n.category{\n    width:100px;\n    height:50px;\n}\n#confirmationBox{\n    display:none;\n    background-color:lightgray;\n    width:350px;\n    height:350px;\n    flex-direction:column;\n    padding:20px;\n    position:fixed;\n    top:50%;\n    justify-content:center;\n    z-index:10;\n\n}\n.confirmation-button{\n    width:100px;\n    height:50px;\n    font-size:20px;\n    margin:auto;\n}\ntr{\n    margin-bottom:30px;\n}\n#genre-selector{\ndisplay:none;\n}\n#editTable{\n    width:70%;\n    height:100%;\n}\n.comma-list {\n  display: inline;\n  margin-left:0px;\n}\n.comma-list li {\n  display: inline;\n}\n.comma-list li::after {\n  content: \", \";\n}\n.comma-list li:last-child::after {\n    content: \"\";\n}\n#completedEdit{\n     background:none;\n    border:none;\n    -webkit-appearance: none;\n}\n#show-genres{\n    background-color:white;\n    border:none;\n    color: inherit;\n}\n.toggle {\n    --width: 100px;\n    --height: 20px;\n    position: relative;\n    display: inline-block;\n    width: var(--width);\n    height: var(--height);\n    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3);\n    border-radius: var(--height);\n    cursor: pointer;\n}\n\n/* hiding checkbox */\n.toggle input {\n    display: none;\n}\n.toggle .slider {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: var(--height);\n    background-color: #ccc;\n    transition: all 0.4s ease-in-out;\n}\n.toggle .slider::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 50px;\n    height: calc(var(--height));\n    background-color: #fff;\n    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3);\n    transition: all 0.4s ease-in-out;\n    z-index:4;\n}\n.toggle input:checked + .slider::before {\n    transform: translateX(50px);\n}\n/* Adding text in the toggle button */\n.toggle .labels {\n    position: absolute;\n    top: 2px;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    font-size: 12px;\n    font-family: sans-serif;\n    transition: all 0.4s ease-in-out;\n}\n\n.toggle .labels::after {\n    content: attr(data-off);\n    position: absolute;\n    right: 5px;\n    color: #4d4d4d;\n    opacity: 1;\n    transition: all 0.4s ease-in-out;\n}\n\n.toggle .labels::before {\n    content: attr(data-on);\n    position: absolute;\n    left: 5px;\n    color: #4d4d4d;\n    transition: all 0.4s ease-in-out;\n}\n@media (max-width: 775px) {\n    #editTable{\n        width:350px;\n    }\n    #novel-selector{\n        width:350px;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}