{"ast":null,"code":"import { getAPI } from '../axios-api';\nimport GenreSelector from '../components/GenreSelector';\nimport TagSelector from '../components/TagSelector';\nimport UtfBox from '../components/UtfBox';\nexport default {\n  data() {\n    return {\n      genres: [],\n      tags: [],\n      selectedtags: [],\n      selectedgenres: [],\n      imageSelected: true\n    };\n  },\n\n  components: {\n    GenreSelector,\n    TagSelector,\n    UtfBox\n  },\n  methods: {\n    postData() {\n      const loadingscreen = document.getElementById('loadingscreen');\n      loadingscreen.style.display = 'block';\n      const form = document.getElementById('upload');\n      const formData = new FormData(form);\n\n      try {\n        const file = document.getElementById('image-selector').files[0];\n        formData.append('file', file, file.name);\n      } catch {\n        console.log('no file');\n      }\n\n      getAPI.post('/novel/single', formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        console.log(res);\n        loadingscreen.style.display = 'none';\n      }).catch(err => {\n        console.log(err);\n        loadingscreen.style.display = 'none';\n      });\n      /*\n      getAPI.post('/novel/single', {url:url,tags:this.selectedtags,genres:selectedGenres,image:upload})\n          .then(function (response) {\n              console.log(response);\n              loadingscreen.style.display = 'none'\n      })\n          .catch(function (error) {\n              console.log(error);\n              loadingscreen.style.display = 'none'\n      }); \n      */\n    },\n\n    showFile() {\n      const file = document.getElementById('image-selector').files[0];\n      var image = document.getElementById('output');\n      image.src = URL.createObjectURL(file);\n      image.style.display = 'block';\n      console.log(file);\n      console.log(image.src);\n      this.imageSelected = true;\n      /*\n      let data = new FormData()\n      data.append('file', file, file.name)\n      \n      getAPI.post('/test',data, {headers: {\"Content-Type\": \"multipart/form-data\"}}).then((res) => {\n          console.log(res);\n      })\n      .catch((err) => {\n          console.log(err);\n      })\n      */\n    },\n\n    showGenres() {\n      var genre_selector = document.getElementById('genre-selector');\n      document.getElementById('tag-selector').style.display = 'none';\n\n      if (genre_selector.style.display == 'flex') {\n        genre_selector.style.display = 'none';\n      } else {\n        genre_selector.style.display = 'flex';\n      }\n    },\n\n    showTags() {\n      var tag_selector = document.getElementById('tag-selector');\n      document.getElementById('genre-selector').style.display = 'none';\n\n      if (tag_selector.style.display == 'flex') {\n        tag_selector.style.display = 'none';\n      } else {\n        tag_selector.style.display = 'flex';\n      }\n    }\n\n  },\n\n  created() {\n    getAPI.get('/uploaddata').then(response => {\n      console.log('Descriptor API has recieved data');\n      this.genres = response.data['genres'];\n      this.tags = response.data['tags'];\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getAPI","GenreSelector","TagSelector","UtfBox","data","genres","tags","selectedtags","selectedgenres","imageSelected","components","methods","postData","loadingscreen","document","getElementById","style","display","form","formData","FormData","file","files","append","name","console","log","post","headers","then","res","catch","err","showFile","image","src","URL","createObjectURL","showGenres","genre_selector","showTags","tag_selector","created","get","response"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Upload.vue"],"sourcesContent":["<template>\n<div id = 'download'>\n\n     <h1 id = \"noveltitle\">Lorem Ipsum</h1>\n    <form id = 'upload' method='postData'>\n     <!--\n        <div id = 'upload_tables'>\n            <div  id = 'image-border' v-if='imageSelected'>\n            <button id = 'remove-image' @click='this.imageSelected=false'>&#9747;</button>\n            <img src='#' id = 'output'>\n            <input type = 'file' id = 'image-selector' @change='showFile()'>\n            </div>\n           \n            <table>\n                <tr>\n                    <td class='category'>Views</td>\n                    <td class = 'info  unselectable'>0</td>\n                </tr>\n                <tr>\n                    <td class='category'>Alternative</td>\n                    <td class='info  unselectable'>ロレム・イプサム</td>\n                </tr>\n                <tr>\n                    <td class='category'>URL</td>\n                    <td class='info'><input type = \"url\" id = 'urltextbox' name = 'url' maxlength=\"34\" style='border:none;' placeholder='Enter novel URL'></td>\n                </tr>\n                <tr>\n                    <td class = 'category'>Authors</td>\n                    <td class='info'>Author-san</td>\n                </tr>\n                <tr>\n                    <td class='category'>Genres</td>\n                    <td  @click='showGenres()' class='info' v-if='selectedgenres.length>0'>{{selectedgenres}}</td>\n                    <td v-else style='color:red'  @click='showGenres()' class='info'>Select Genres</td>\n                </tr>\n                <tr>\n                    <td class='category'>Tags</td>\n                    <td @click='showTags()' class='info'  v-if='selectedtags.length>0'></td>\n                    <td v-else style='color:red'  @click='showTags()' class='info'>Select Tags</td>\n                    </tr>\n            </table>\n            <table>\n                <tr>\n                    <td class='category'>Release</td>\n                    <td class='info unselectable'>20XX</td>\n                </tr>\n                <tr>\n                    <td class='category'>Status</td>\n                    <td class='info'>Unreleased</td>\n                </tr>\n                <tr>\n                    <td class='category'>Novel</td>\n                    <td class='info'>\n                        <select id = 'completedEdit' placeholder='SELECT' style='color:red;' onfocus='this.style.color=\"rgb(136,136,136)\"' form = 'upload' name = 'novelstatus'>\n                            <option value=\"\" disabled selected>Select your option</option>\n                            <option value = 'Ongoing'>Ongoing</option>\n                            <option value = 'Completed'>Completed</option>\n                            <option value = 'On Hold'>On Hold</option>\n                            <option value = 'Dropped'>Dropped</option>\n                        </select>\n                     </td>\n                </tr>\n       \n            </table>\n                         \n        </div>\n\n        <div id = 'genre-selector'>\n             <GenreSelector\n                :genres='genres'\n                :selectedgenres='selectedgenres'\n                \n                />\n        </div>\n        <TagSelector\n            :tags='tags'\n            :selectedtags='selectedtags'\n            id = 'tag-selector'\n        />\n   -->\n   <div id = \"novel-test\">\n                    <div class = 'column1 label'>Views</div>\n                    <div class = 'column2 info '>0</div>\n                    <div class = 'column1 label'>Alternative</div>\n                    <div class = 'column2 info '>To be filled</div>\n                    <div class = 'column1 label'>Raw</div>\n                    <div class = 'column2 info' ><input type ='text'></div>\n                    <div class = 'column1 label'>Author</div>\n                    <div class = 'column2 info' >To be filled in</div>\n                    <div class = 'column1 label'>Genres</div>\n                    <div class = 'column2 info' >To be filled</div>\n                    <div class = 'column1 label'>Tags</div>\n                    <div class = 'column2 info' >To be filled</div>\n                    <div class = 'column3 label' style='grid-row:1/span 1'>Release</div>\n                    <div class = 'column4 info' style='grid-row:1/span 1'>20XX</div>\n                    <div class = 'column3 label' style='grid-row:2/span 1'>Status</div>\n                    <div class = 'column4 info' style='grid-row:2/span 1'>To be Filled</div>\n                    <div class = 'column3 label' style='grid-row:3/span 1'>Novel</div>\n                    <div class = 'column4 info' style='grid-row:3/span 1'>To be filled in</div>\n    </div>\n    </form>\n    <div id = \"summary\">\n        <div>\n           <div style = \"display:flex;flex-direction:row;border-bottom:2px lightgray solid;height:30px;\"><UtfBox shape = '&#9733;'/><h3 id = \"divider\">SUMMARY</h3></div><br>\n            <p id=\"noveldescription\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        </div>\n    </div>\n    <button @click='postData()' style='width:100%;margin-top:30px;'>Submit</button>\n\n</div>\n</template>\n<script>\nimport { getAPI } from '../axios-api'\nimport GenreSelector from '../components/GenreSelector'\nimport TagSelector from '../components/TagSelector'\nimport UtfBox from '../components/UtfBox'\nexport default{\n    data(){\n        return{\n            genres:[],\n            tags:[],\n            selectedtags:[],\n            selectedgenres:[],\n            imageSelected:true,\n        }\n    },\n    components:{\n        GenreSelector,\n        TagSelector,\n        UtfBox\n    },\nmethods:{\n        postData(){\n            const loadingscreen = document.getElementById('loadingscreen')\n            loadingscreen.style.display = 'block'\n            const form = document.getElementById('upload')\n            const formData = new FormData(form)\n            try{\n                const file = document.getElementById('image-selector').files[0]\n                formData.append('file',file,file.name)\n            }catch{\n                console.log('no file')\n            }\n            getAPI.post('/novel/single',formData, {headers: {\"Content-Type\": \"multipart/form-data\"}}).then((res) => {\n                console.log(res);\n                loadingscreen.style.display = 'none'\n            })\n            .catch((err) => {\n                console.log(err);\n                loadingscreen.style.display = 'none'\n            })\n            /*\n            getAPI.post('/novel/single', {url:url,tags:this.selectedtags,genres:selectedGenres,image:upload})\n                .then(function (response) {\n                    console.log(response);\n                    loadingscreen.style.display = 'none'\n            })\n                .catch(function (error) {\n                    console.log(error);\n                    loadingscreen.style.display = 'none'\n            }); \n            */\n        },\n        showFile(){\n            \n            const file = document.getElementById('image-selector').files[0]\n            var image = document.getElementById('output')\n\t        image.src = URL.createObjectURL(file);\n            image.style.display='block'\n            console.log(file)\n            console.log(image.src)\n            this.imageSelected=true\n            /*\n            let data = new FormData()\n            data.append('file', file, file.name)\n            \n            getAPI.post('/test',data, {headers: {\"Content-Type\": \"multipart/form-data\"}}).then((res) => {\n                console.log(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n            */\n\n            \n        },\n        showGenres(){\n            var genre_selector = document.getElementById('genre-selector')\n            document.getElementById('tag-selector').style.display='none'\n            if(genre_selector.style.display=='flex'){\n                genre_selector.style.display = 'none'\n            }else{\n                genre_selector.style.display = 'flex'\n            }\n        },\n        showTags(){\n            var tag_selector = document.getElementById('tag-selector')\n            document.getElementById('genre-selector').style.display='none'\n            if(tag_selector.style.display=='flex'){\n                tag_selector.style.display = 'none'\n            }else{\n                tag_selector.style.display = 'flex'\n            }\n        },\n    },\n    created(){\n        getAPI.get('/uploaddata')\n          .then(response => {\n            console.log('Descriptor API has recieved data')\n            this.genres = response.data['genres']\n            this.tags = response.data['tags']\n          })\n          .catch(err => {\n            console.log(err)\n          })\n          \n    }\n}\n</script>\n<style scoped>\ntable{\n    height:fit-content;\n}\nbutton{\n    background:none;\n    border-right:none\n}\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n  color: red;\n  opacity: 1; /* Firefox */\n}\n#upload{\n    box-shadow: 0 4px 8px 0 var(--shadowColor), 0 6px 20px 0 var(--shadowColor);\n     border-radius:20px;\n     padding:20px;\n}\ninput{\n    margin-right:5px;\n}\n.unselectable{\n      font-size:14px;\n      color:rgb(136,136,136);\n  }\n#download{\n    width:100%;\n    height:fit-content;\n}\n#genre-selector{\n    display:none;\n}\n#tag-selector{\n    display:none;\n}\n\n#upload_tables{\n    display:flex;\n    flex-direction:row;\n}\n#image-selector{\n    margin:auto;\n    width:100px;\n}\n.category{\n    font-weight: bold;\n      padding-bottom: 10px;\n      padding-right:20px;\n      width:15%;\n      min-width:125px;\n      vertical-align: top;\n      color:black;\n   \n}\n#completedEdit{\n     background-color:transparent;\n    border:none;\n    appearance: none;\n}\n.info{\n    font-weight:normal;\n      width: 85%;\n      line-height: 20px;\n      font-size:14px;\n      vertical-align:top;\n}\n#output{\n    margin:auto;\n    width:100%;\n    height:100%;\n    display:none;\n}\n#image-border{\n    height:300px;\n    width:200px;\n    border:1px solid black;\n    margin-right:20px;\n    border-radius:10px;\n    background-color: var(--backgroundColor));\n    float:left;\n    transition: all .2s ease;\n    overflow:hidden;\n    display:flex\n}\n#remove-image{\n    color:rgb(136,136,136);\n    position:relative;\n    top:0px;\n    left:170px;\n    height:30px;\n    width:30px;\n    border:none;\n    font-size:20px;\n}\n#summary{\n    width: 100%;\n    text-align: left;\n    display: flex;\n    flex-direction: column;\n    align-self: center;\n    height:fit-content;\n    margin-top:20px;\n}\n#noveldescription{\n    width:100%;\n    font-size: 14px;\n    color:rgb(136,136,136);\n    height:fit-content;\n}\n#divider{\n    font-size:18px;\n    font-weight:bold;\n    margin-left:15px;\n    line-height:18px;\n    height:30px;\n    padding-top:6px;\n}\n#noveltitle{\n      color: var(--styleColor);\n      font-size: 20px;\n      margin-bottom: 25px;\n      line-height:20px;\n      height:fit-content;\n      margin-top:30px;\n      font-weight:bold;\n      font-family: 'Times New Roman', serif;\n      \n  }\n  #noveltest{\n     display:grid;\n    grid-template-columns: 7.5% 60% 10% 10%;\n    align-self:center;\n    column-gap:20px;\n    row-gap:10px;\n    width:100%;\n    transition: all .2s ease;\n    margin-top:20px;\n    padding:20px;\n  }\n.column1{\n     grid-column:1 / span 1;\n }\n .column2{\n     grid-column:2 / span 1\n }\n .column3{\n     grid-column:3/ span 1;\n }\n .column4{\n     grid-column:4/ span 1\n }\n@media (max-width: 775px) {\n    #genres{\n        grid-template-rows: auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto;\n        width:300px;\n        margin-left:20px;\n    }\n    #tagList{\n        width:350px;\n    }\n    #tagselector{\n        width:350px;\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}