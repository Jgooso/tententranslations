{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nexport default {\n  methods: {\n    addTag(tag) {\n      const tagbutton = document.getElementById(tag);\n      tagbutton.classList.remove('unselected');\n\n      if (!this.selectedtags.includes(tag)) {\n        this.selectedtags.push(tag);\n      }\n    },\n\n    removeTag(removetag) {\n      const index = this.selectedtags.indexOf(removetag);\n      this.selectedtags.splice(index, 1);\n      document.getElementById(removetag).classList.add('unselected');\n    },\n\n    filterTag() {\n      var input, tagbuttons, txtValue;\n      input = document.getElementById('tagfilter').value.toUpperCase();\n      tagbuttons = document.getElementsByClassName('tagbutton');\n\n      for (var i = 0; i < tagbuttons.length; i++) {\n        txtValue = tagbuttons[i].value || tagbuttons[i].innerText;\n\n        if (txtValue.toUpperCase().indexOf(input) > -1) {\n          tagbuttons[i].style.display = \"\";\n        } else {\n          tagbuttons[i].style.display = \"none\";\n        }\n      }\n    },\n\n    postData() {\n      const loadingscreen = document.getElementById('loadingscreen');\n      loadingscreen.style.display = 'block';\n      const form = document.getElementById('download');\n      const selectedGenres = 'Fantasy, Comedy'; //form['genres'].value\n\n      const url = form['url'].value;\n      console.log('posted');\n      getAPI.post('/novel/single', {\n        url: url,\n        tags: this.selectedtags,\n        genres: selectedGenres\n      }).then(function (response) {\n        console.log(response);\n        loadingscreen.style.display = 'none';\n      }).catch(function (error) {\n        console.log(error);\n        loadingscreen.style.display = 'none';\n      });\n    }\n\n  },\n\n  created() {\n    getAPI.get('/uploaddata').then(response => {\n      console.log('Chapter API has recieved data');\n      this.genres = response.data['genres'];\n      this.tags = response.data['tags'];\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n};","map":{"version":3,"mappings":";AA0BA,eAAc;EACdA,OAAO,EAAC;IACAC,MAAM,CAACC,GAAD,EAAK;MACP,MAAMC,SAAQ,GAAIC,QAAQ,CAACC,cAAT,CAAwBH,GAAxB,CAAlB;MACAC,SAAS,CAACG,SAAV,CAAoBC,MAApB,CAA2B,YAA3B;;MACA,IAAG,CAAC,KAAKC,YAAL,CAAkBC,QAAlB,CAA2BP,GAA3B,CAAJ,EAAoC;QAChC,KAAKM,YAAL,CAAkBE,IAAlB,CAAuBR,GAAvB;MACJ;IAEH,CARD;;IASAS,SAAS,CAACC,SAAD,EAAW;MAChB,MAAMC,KAAI,GAAI,KAAKL,YAAL,CAAkBM,OAAlB,CAA0BF,SAA1B,CAAd;MACA,KAAKJ,YAAL,CAAkBO,MAAlB,CAAyBF,KAAzB,EAA+B,CAA/B;MACAT,QAAQ,CAACC,cAAT,CAAwBO,SAAxB,EAAmCN,SAAnC,CAA6CU,GAA7C,CAAiD,YAAjD;IACH,CAbD;;IAcAC,SAAS,GAAE;MACP,IAAIC,KAAJ,EAAWC,UAAX,EAAuBC,QAAvB;MACAF,KAAI,GAAId,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCgB,KAArC,CAA2CC,WAA3C,EAAR;MACAH,UAAS,GAAIf,QAAQ,CAACmB,sBAAT,CAAgC,WAAhC,CAAb;;MACA,KAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIL,UAAU,CAACM,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;QACtCJ,QAAO,GAAID,UAAU,CAACK,CAAD,CAAV,CAAcH,KAAd,IAAuBF,UAAU,CAACK,CAAD,CAAV,CAAcE,SAAhD;;QACA,IAAIN,QAAQ,CAACE,WAAT,GAAuBR,OAAvB,CAA+BI,KAA/B,IAAwC,CAAC,CAA7C,EAAgD;UAC5CC,UAAU,CAACK,CAAD,CAAV,CAAcG,KAAd,CAAoBC,OAApB,GAA8B,EAA9B;QACJ,CAFA,MAEO;UACHT,UAAU,CAACK,CAAD,CAAV,CAAcG,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;QACJ;MACJ;IACH,CA1BD;;IA2BAC,QAAQ,GAAE;MACN,MAAMC,aAAY,GAAI1B,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAtB;MACAyB,aAAa,CAACH,KAAd,CAAoBC,OAApB,GAA8B,OAA9B;MACA,MAAMG,IAAG,GAAI3B,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAb;MACA,MAAM2B,cAAa,GAAI,iBAAvB,CAJM,CAIkC;;MACxC,MAAMC,GAAE,GAAIF,IAAI,CAAC,KAAD,CAAJ,CAAYV,KAAxB;MACAa,OAAO,CAACC,GAAR,CAAY,QAAZ;MACAC,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B;QAACJ,GAAG,EAACA,GAAL;QAASK,IAAI,EAAC,KAAK9B,YAAnB;QAAgC+B,MAAM,EAACP;MAAvC,CAA7B,EACKQ,IADL,CACU,UAAUC,QAAV,EAAoB;QACtBP,OAAO,CAACC,GAAR,CAAYM,QAAZ;QACAX,aAAa,CAACH,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;MACP,CAJD,EAKKc,KALL,CAKW,UAAUC,KAAV,EAAiB;QACpBT,OAAO,CAACC,GAAR,CAAYQ,KAAZ;QACAb,aAAa,CAACH,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;MACP,CARD;IASJ;;EA3CA,CADM;;EA8CVgB,OAAO,GAAE;IAELR,MAAM,CAACS,GAAP,CAAW,aAAX,EACGL,IADH,CACQC,QAAO,IAAK;MAChBP,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACA,KAAKI,MAAL,GAAcE,QAAQ,CAACK,IAAT,CAAc,QAAd,CAAd;MACA,KAAKR,IAAL,GAAYG,QAAQ,CAACK,IAAT,CAAc,MAAd,CAAZ;IACD,CALH,EAMGJ,KANH,CAMSK,GAAE,IAAK;MACZb,OAAO,CAACC,GAAR,CAAYY,GAAZ;IACD,CARH;EAUJ;;AA1DU,CAAd","names":["methods","addTag","tag","tagbutton","document","getElementById","classList","remove","selectedtags","includes","push","removeTag","removetag","index","indexOf","splice","add","filterTag","input","tagbuttons","txtValue","value","toUpperCase","getElementsByClassName","i","length","innerText","style","display","postData","loadingscreen","form","selectedGenres","url","console","log","getAPI","post","tags","genres","then","response","catch","error","created","get","data","err"],"sourceRoot":"","sources":["/Users/joshgoodman/Documents/GitHub/tententranslations/vuefrontend/src/views/Upload.vue"],"sourcesContent":["<template>\n\n<form id = 'download' >\n<div id = 'loadingscreen'><div class=\"loader\"></div></div>\n<label for=\"fname\">URL:</label>\n<input type = \"text\" id = 'urltextbox' name = 'url' maxlength=\"34\" style='width:280px' >\n<div id = 'genres'>\n<label v-for='genre in genres' :key = 'genre'><input type='checkbox' :value='genre' :name = 'genre' class = 'genrecheckbox'>{{genre}}</label>\n</div>\n<br><br>\n<input type = 'submit' @click='postData()'>\n\n</form>\n<div  id = 'tagList'>\n<ul class = 'selectedtaglist' >\n    <li v-for='tag in selectedtags' :key = 'tag'><tagBox :tag='tag' @remove='removeTag'/></li>\n</ul>\n<input id = 'tagfilter' v-on:keyup='filterTag()'>\n</div>\n<div id = 'tagselector'>\n    <button v-for='tag in tags' :key='tag' class = 'tagbutton unselected' :id = 'tag' v-html='tag' @click='addTag(tag)'/>\n\n</div>\n\n</template>\n<script>\nexport default{\nmethods:{\n        addTag(tag){\n            const tagbutton = document.getElementById(tag)\n            tagbutton.classList.remove('unselected')\n            if(!this.selectedtags.includes(tag)){\n                this.selectedtags.push(tag)\n            }\n           \n        },\n        removeTag(removetag){\n            const index = this.selectedtags.indexOf(removetag)\n            this.selectedtags.splice(index,1)\n            document.getElementById(removetag).classList.add('unselected')\n        },\n        filterTag(){\n            var input, tagbuttons, txtValue\n            input = document.getElementById('tagfilter').value.toUpperCase()\n            tagbuttons = document.getElementsByClassName('tagbutton')\n            for(var i = 0; i < tagbuttons.length; i++){\n                txtValue = tagbuttons[i].value || tagbuttons[i].innerText;\n                if (txtValue.toUpperCase().indexOf(input) > -1) {\n                    tagbuttons[i].style.display = \"\";\n                } else {\n                    tagbuttons[i].style.display = \"none\";\n                }\n            }\n        },\n        postData(){\n            const loadingscreen = document.getElementById('loadingscreen')\n            loadingscreen.style.display = 'block'\n            const form = document.getElementById('download');\n            const selectedGenres = 'Fantasy, Comedy'//form['genres'].value\n            const url = form['url'].value\n            console.log('posted')\n            getAPI.post('/novel/single', {url:url,tags:this.selectedtags,genres:selectedGenres})\n                .then(function (response) {\n                    console.log(response);\n                    loadingscreen.style.display = 'none'\n            })\n                .catch(function (error) {\n                    console.log(error);\n                    loadingscreen.style.display = 'none'\n            }); \n        }\n    },\n    created(){\n        \n        getAPI.get('/uploaddata')\n          .then(response => {\n            console.log('Chapter API has recieved data')\n            this.genres = response.data['genres']\n            this.tags = response.data['tags']\n          })\n          .catch(err => {\n            console.log(err)\n          })\n          \n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}